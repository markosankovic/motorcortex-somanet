{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 69d8b2dce84694a50e8e","webpack:///./~/protobufjs/src/util.js","webpack:///./~/protobufjs/src/enum.js","webpack:///./~/protobufjs/src/util/minimal.js","webpack:///./src/utils.js","webpack:///./~/protobufjs/src/field.js","webpack:///./~/protobufjs/src/object.js","webpack:///./~/protobufjs/src/types.js","webpack:///./~/protobufjs/src/namespace.js","webpack:///./src/message_types.js","webpack:///./src/motorcortex.js","webpack:///./src/request.js","webpack:///./~/protobufjs/src/oneof.js","webpack:///./src/subscribe.js","webpack:///./~/protobufjs/src/mapfield.js","webpack:///./~/protobufjs/src/message.js","webpack:///./~/protobufjs/src/method.js","webpack:///./~/protobufjs/src/reader.js","webpack:///./~/protobufjs/src/root.js","webpack:///./~/protobufjs/src/service.js","webpack:///./~/protobufjs/src/type.js","webpack:///./~/protobufjs/src/writer.js","webpack:///./~/@protobufjs/aspromise/index.js","webpack:///./~/@protobufjs/inquire/index.js","webpack:///./~/long/dist/long.js","webpack:///./~/protobufjs/src/converter.js","webpack:///./~/protobufjs/src/decoder.js","webpack:///./~/protobufjs/src/encoder.js","webpack:///./~/protobufjs/src/roots.js","webpack:///./~/protobufjs/src/rpc.js","webpack:///./~/protobufjs/src/tokenize.js","webpack:///./~/protobufjs/src/verifier.js","webpack:///./~/protobufjs/src/wrappers.js","webpack:///./~/webworkify-webpack/index.js","webpack:///./src/core.js","webpack:///./~/@protobufjs/base64/index.js","webpack:///./~/@protobufjs/codegen/index.js","webpack:///./~/@protobufjs/eventemitter/index.js","webpack:///./~/@protobufjs/fetch/index.js","webpack:///./~/@protobufjs/float/index.js","webpack:///./~/@protobufjs/path/index.js","webpack:///./~/@protobufjs/pool/index.js","webpack:///./~/@protobufjs/utf8/index.js","webpack:///./src/request_async.js","webpack:///./src/session_manager.js","webpack:///./src/subscribe_async.js","webpack:///./src/workers/request.worker.js","webpack:///./src/workers/subscribe.worker.js","webpack:///./~/protobufjs/index.js","webpack:///./~/protobufjs/src/common.js","webpack:///./~/protobufjs/src/index-light.js","webpack:///./~/protobufjs/src/index-minimal.js","webpack:///./~/protobufjs/src/index.js","webpack:///./~/protobufjs/src/parse.js","webpack:///./~/protobufjs/src/reader_buffer.js","webpack:///./~/protobufjs/src/rpc/service.js","webpack:///./~/protobufjs/src/util/longbits.js","webpack:///./~/protobufjs/src/writer_buffer.js","webpack:///(webpack)/buildin/global.js","webpack:///./package.json"],"names":["Deferred","_this","promise","Promise","resolve","reject","ConnectionState","CONNECTING","OPEN","CLOSING","CLOSED","motorcortex_parameter_msg","motorcortex_parameter_list_msg","PrimitiveTypes","type_name","decoder","val","index","getUint8","Uint8Array","BYTES_PER_ELEMENT","encoder","i","length","console","log","buffer","toNumber","split","map","item","parseInt","getFloat64","Float64Array","rounding","precision","rounded_val","push","toFixed","parseFloat","getFloat32","Float32Array","getInt8","Int8Array","getInt16","Int16Array","getUint16","Uint16Array","getInt32","Int32Array","getUint32","Uint32Array","offset","lv","long","buf","data_view","DataView","vl","fromNumber","setInt32","low","high","setUint32","TextDecoder","decode","encode","number_of_elements","values","value","String","MessageTypes","types_by_hash","types_by_name","root","protobuf","Root","proto_hash_pair_list","all_loaded_resolve","all_loaded_reject","all_loaded","hash_loaded_resolve","hash_loaded_reject","hash_loaded","proto_loaded","all","_loadProto","then","hash_load_array","proto_hash_pair","hash_file","Error","_loadHash","catch","msg","e","primitive_types","_loadEnum","hash","toString","type_primitive","parameter_flags","getTypeByName","motorcortex","ParameterFlag","parameter_types","ParameterType","permissions","Permission","status_codes","StatusCode","user_groups","UserGroup","data_types","DataType","uints","Unit","payload","type","error","verify","type_inst","create","finish","type_hash","parameter","status","getStatusCode","type_id","info","dataType","getTypeByHash","numberOfElements","str","fromCharCode","byteOffset","data_type","round","proto_builder","ProtoBuf","newBuilder","proto_file","loadProtoFile","clbs","load","url","xmlhttp","XMLHttpRequest","onreadystatechange","readyState","data","JSON","parse","responseText","key","obj","lookupTypeOrEnum","decode_value","open","send","enumerator","valuesById","Motorcortex","name","version","SessionManager","SessionState","Subscribe","SubscribeAsync","Request","RequestAsync","getParameterFlag","getParameterType","getPermission","getUserGroup","getDataType","statusToStr","code","Storage","storage","__storage","alias","LocalStorage","tree","getItem","setItem","IndexDB","req","onsuccess","event","db","result","transaction","object_store_request","objectStore","get","onupgradeneeded","target","abort","onerror","object_store","createObjectStore","put","StorageFactory","getIndexDB","localStorage","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","ParameterTree","__parameter_tree","__parameter_map","storage_factory","parameter_tree_msg","__buildHash","paramter_tree_json","__mapToJson","__initTree","__jsonToMap","load_handle","storage_handle","path","parameter_path","getInfo","parameter_tree","chr","param","dataSize","id","paramType","unit","groupId","b","charCodeAt","stringify","jsonStr","REP_HEADER","RequestData","qeue_handle","_timer_handle","undefined","_qeue_handle","_id","timeout_msec","set","startTimer","_timeout_msec","setTimeout","decoded_data","clearTimeout","delete","error_data","protobuf_types","websocket","request_id","replies","Map","request_channel","request","reply","createGroup","path_list","group_alias","frq_divider","removeGroup","postMessage","port","onmessage","onSubscribeMessage","bind","loadedFiles","timeout_ms","max_request_queue_size","max_request_qeue_size","_emptyReplyQueue","WebSocket","binaryType","onopen","close","_onMessage","onclose","connectionClosed","connectionState","wire_msg","request_data","encoded_msg","size","con_state","req_id","_incReqId","login","password","__encodeLogin","createType","get_session_token_msg","token","restore_session_msg","logout_msg","getParameterTreeHash","param_tree","param_tree_msg","save","params","param_tree_hash_msg","_buildGetParameterMsg","options","_buildSetParameterMsg","force_activate","_buildOverwriteParameterMsg","release_param_msg","param_list","set_param_list_msg","get_param_list_msg","create_group_msg","paths","concat","frqDivider","handle","remove_group_msg","file_name","save_msg","fileName","load_msg","reply_id","message_type","decoded_msg","decodeValue","param_value","activate","_buildSetPayload","get_param_msg","keys","NSEC_IN_SEC","Parameter","timestamp","Subscription","__info","__values","__layout","__decoder","__group_alias","__protobuf_types","__protobuf_datatypes","__observer","__is_complete","__promise","__resolve","__reject","subscription_complete","subscription_failed","slice","observer","Array","header_offset","byteLength","msg_data_view","sec_val","nsec_val","time","TIMESTAMP_HEADER","byte_view","o","subscriptions","SOCKET_CLOSED","subscription","getMessageTypes","_complete","_failed","sub","HEADER_OFFSET","_update","worker","worker_queue","worker_task_id","connection_state","addEventListener","arg","clb","post","protobuf_files","document","URL","lastIndexOf","substring","full_address","proto_pair","proto","files","loaded_files","types_loaded","loadProto","connected","ret","CONNECTION_OK","CONNECTION_LOST","CONNECTION_FAILED","DISCONNECTING","DISCONNECTED","state","state_info","ConnectionData","host","req_port","sub_port","request_timeout_ms","tree_timeout_ms","queue_length","uri","max_request_queue_length","subscribe","connection_data","observers","check_connection_interval_ms","check_token_interval_ms","check_connection_timer","update_token_timer","clearTimers","closing","reconnection","req_closed","sub_closed","stateChange","connection_closed","getSessionTokenMsg","getState","warn","clearInterval","setInterval","checkSessionState","session_ready","req_ready","req_handle","connect","getRequestUri","getRequestTimeoutMs","getQueueLength","sub_handle","getSubscribeUri","restoreSessionMsg","getParameterTree","getTreeTimeoutMs","updateToken","initTimers","restore","hasError","isConnecting","login_data","request_port","subscribe_port","_getObserver","channel","MessageChannel","port1","registerSubscriber","port2","processRequest","ports","motorcortex_types","logout","getTree","getParameterList","getParameter","setParameter","overwriteParameter","releaseParameter","setParameterList","onMessage","processMessage","rpc_request","setPort","d","subsriptions","input_buffer","notify","unsubscribe","RPCRequest","request_queue","onRequestMessage","sb","notify_timer"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AChEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA,WAAW,kBAAkB;AAC7B,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,UAAU;AACrB,aAAa,kBAAkB;AAC/B;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,uDAAuD,yBAAyB,EAAE;AAClF;;AAEA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA,cAAc,KAAK;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB,0CAA0C,iCAAiC;AAC3E,oDAAoD,iCAAiC;AACrF;AACA;;AAEA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C,gCAAgC;AAC5E;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;ACjLD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,uBAAuB;AAClC,WAAW,kBAAkB;AAC7B,WAAW,OAAO;AAClB,WAAW,uBAAuB;AAClC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA,iDAAiD;;AAEjD;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA,8BAA8B;;AAE9B;AACA;AACA;;AAEA;AACA,mDAAmD,iBAAiB;AACpE;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,uBAAuB;AACrC,cAAc,kBAAkB;AAChC;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,aAAa,KAAK;AAClB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB,YAAY,UAAU;AACtB,YAAY,MAAM;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB,YAAY,UAAU;AACtB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;;;;;;;8CCpLA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,oFAAoF;;AAEpF;AACA;AACA,UAAU;AACV;AACA;AACA,mDAAmD,kCAAkC;;AAErF;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,gBAAgB;AAC3B,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;A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ACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,yBAAyB;AACpC,WAAW,yBAAyB;AACpC,WAAW,kBAAkB;AAC7B,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA,+DAA+D;;AAE/D;AACA;AACA,cAAc;AACd;AACA,qBAAqB;;AAErB;AACA;AACA,cAAc;AACd;AACA,iBAAiB;;AAEjB;AACA;AACA,cAAc;AACd;AACA,sCAAsC;;AAEtC;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,kBAAkB;AAChC;;AAEA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;;AAEA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,MAAM;AACnB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;;AAEA,uEAAuE;AACvE;AACA;AACA;AACA;AACA,kGAAkG;AAClG;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,sCAAsC,cAAc,MAAM,iBAAiB;AAC3E;AACA,UAAU;AACV,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,8IAA8I;AACzJ,WAAW,iCAAiC;AAC5C,WAAW,EAAE;AACb,aAAa,eAAe;AAC5B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,sEAAsE,0BAA0B;AAChG;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,sBAAsB;AACjC,WAAW,iCAAiC;AAC5C,aAAa,eAAe;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACjXA;AACA;;AAEA;;AAEA;;AAEA,SAAS;;AAET;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,kBAAkB;AAC7B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA,2BAA2B;;AAE3B;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA,WAAW,iBAAiB;AAC5B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,iBAAiB;AAC5B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,EAAE;AACb,WAAW,QAAQ;AACnB,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;;AAEA;AACA;AACA,WAAW,kBAAkB;AAC7B,WAAW,QAAQ;AACnB,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA,oDAAoD,iBAAiB;AACrE;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACtMA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB,cAAc,OAAO;AACrB,cAAc,eAAe;AAC7B,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnMA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,kBAAkB;AAC7B;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,kBAAkB;AAC7B,aAAa,UAAU;AACvB,YAAY,UAAU;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B,WAAW,eAAe;AAC1B,aAAa,4BAA4B;AACzC;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;;AAEA;;AAEA;AACA;AACA,WAAW,kCAAkC;AAC7C,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,kCAAkC;AAC7C,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;;AAEA;AACA,mCAAmC,gBAAgB;AACnD;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,kBAAkB;AAC7B,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA,4BAA4B;;AAE5B;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,cAAc,kBAAkB;AAChC,cAAc,gCAAgC;AAC9C;;AAEA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,gCAAgC;AAC3C,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA,gEAAgE,kBAAkB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,sBAAsB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,gBAAgB;AAClD,8BAA8B,wBAAwB;AACtD,WAAW,OAAO;AAClB,aAAa,uBAAuB;AACpC,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,iBAAiB;AAC5B,aAAa,UAAU;AACvB,YAAY,UAAU;AACtB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;;AAEA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,iBAAiB;AAC5B,aAAa,UAAU;AACvB,YAAY,UAAU;AACtB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,EAAE;AACb,aAAa,UAAU;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,YAAY;AACvB,WAAW,QAAQ;AACnB,aAAa,sBAAsB;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,KAAK;AACL,uBAAuB,6BAA6B;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA;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AAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,kBAAkB;AAC7B,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA,2BAA2B;;AAE3B;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb,cAAc,OAAO;AACrB;;AAEA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,UAAU;AACrB,aAAa,SAAS;AACtB,YAAY,UAAU;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,8GAA8G;AACzH,WAAW,4JAA4J,EAAE;AACzK,aAAa,eAAe;AAC5B,wBAAwB,8FAA8F;AACtH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;AC7HA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB;AACA;AACA;AACA;AACA;AACA,uDAAuD,iBAAiB;AACxE;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;;AAEA;AACA;AACA,WAAW,kBAAkB;AAC7B,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B,aAAa,YAAY;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,kBAAkB;AAC7B,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,EAAE;AACb,WAAW,mBAAmB;AAC9B,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;;AAEA,6B;;;;;;;AC1IA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,iBAAiB;AAC5B,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,0BAA0B;AACrC,WAAW,0BAA0B;AACrC,WAAW,kBAAkB;AAC7B,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc;AACd;AACA,8BAA8B;;AAE9B;AACA;AACA,cAAc;AACd;AACA,mCAAmC;;AAEnC;AACA;AACA,cAAc;AACd;AACA,0DAA0D;;AAE1D;AACA;AACA,cAAc;AACd;AACA,qCAAqC;;AAErC;AACA;AACA,cAAc;AACd;AACA,4DAA4D;;AAE5D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,kBAAkB;AAChC;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB,YAAY,UAAU;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACtJA;AACA;;AAEA;;AAEA,iBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B,aAAa,oBAAoB,IAAI,mBAAmB,uCAAuC;AAC/F,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA,2BAA2B;AAC3B;AACA,iEAAiE;AACjE,iEAAiE;AACjE,iEAAiE;AACjE,iEAAiE;AACjE,iEAAiE;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB;;AAEA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB;;AAEA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB;;AAEA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA,KAAK;AACL;;;;;;;;ACtZA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,YAAY;AACzB;AACA;;AAEA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,cAAc;AACzB,WAAW,aAAa;AACxB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,2BAA2B;AACrD;AACA;AACA;AACA,+BAA+B,+BAA+B;AAC9D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,+BAA+B;AAC/B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B,qBAAqB;AAClD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,aAAa;AACxB,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,cAAc,uCAAuC,qBAAqB;AACrF,aAAa,cAAc;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,cAAc,uCAAuC,qBAAqB;AACrF,aAAa,KAAK;AAClB,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,iBAAiB;AAC5B,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,KAAK;;AAEL;AACA,uDAAuD;;AAEvD,KAAK;;AAEL;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA,uBAAuB,iDAAiD;AACxE;AACA;AACA,gDAAgD;AAChD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,iBAAiB;AAC5B,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,8DAA8D;AAC9D;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;;AAEL;AACA,8CAA8C;;AAE9C,KAAK;;AAEL,uBAAuB,iDAAiD;AACxE;;AAEA;AACA,8CAA8C;;AAE9C;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;AC7VA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,kBAAkB;AAC7B,YAAY,UAAU;AACtB;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA,sBAAsB;;AAEtB;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,wBAAwB;AACtC;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa,QAAQ;AACrB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA,0DAA0D,kBAAkB;AAC5E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,4GAA4G;AAC5G;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,YAAY;AACzB;AACA;AACA;AACA,2BAA2B,gDAAgD;AAC3E;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;ACtKA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,kBAAkB;AAC7B;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA,qBAAqB;;AAErB;AACA;AACA,cAAc;AACd;AACA,4BAA4B;;AAE5B;AACA;AACA,cAAc;AACd;AACA,gCAAgC;;AAEhC;AACA;AACA,cAAc;AACd;AACA,8BAA8B;;AAE9B;AACA;AACA,cAAc;AACd;AACA,2BAA2B;;AAE3B;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,6DAA6D,kBAAkB;AAC/E;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,gGAAgG,cAAc,2GAA2G,cAAc;AACvO;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,kBAAkB,+CAA+C;AACjE,+CAA+C;;AAE/C;AACA;AACA,uBAAuB,+CAA+C;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,0BAA0B,8BAA8B;AACxD;AACA,uBAAuB;AACvB;AACA;AACA;AACA,yCAAyC,YAAY;AACrD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,uBAAuB;AACrC,cAAc,uBAAuB;AACrC,cAAc,WAAW;AACzB,cAAc,WAAW;AACzB,cAAc,QAAQ;AACtB;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,kBAAkB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,kBAAkB;AACvE;AACA;AACA,qDAAqD,kBAAkB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,4BAA4B,EAAE,uBAAuB;AACzI;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,iBAAiB;AAC5B,aAAa,KAAK;AAClB,YAAY,UAAU;AACtB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,iBAAiB;AAC5B,aAAa,KAAK;AAClB,YAAY,UAAU;AACtB,YAAY,MAAM;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,kBAAkB;AAC7B,aAAa,UAAU,EAAE;AACzB;AACA;AACA;AACA;;AAEA;AACA,YAAY,yBAAyB,GAAG,yBAAyB,MAAM,yBAAyB;AAChG,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,+CAA+C;AAClE;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wDAAwD,yBAAyB;AACjF,WAAW,UAAU,oBAAoB;AACzC,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA,gDAAgD;AAChD;;AAEA;AACA,iGAAiG,yBAAyB;AAC1H,WAAW,UAAU,oBAAoB;AACzC,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,kBAAkB;AAC7B,WAAW,OAAO;AAClB,aAAa,UAAU,EAAE;AACzB,YAAY,MAAM;AAClB,YAAY,qBAAqB,EAAE;AACnC;AACA;AACA,+CAA+C;AAC/C;;AAEA;AACA;AACA,WAAW,kBAAkB;AAC7B,aAAa,UAAU,EAAE;AACzB,YAAY,MAAM;AAClB,YAAY,mBAAmB;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,kBAAkB;AAC7B,aAAa,YAAY;AACzB;AACA;AACA,wCAAwC;AACxC;;AAEA;AACA;AACA,WAAW,kBAAkB;AAC7B,aAAa,UAAU,EAAE;AACzB;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,oBAAoB,MAAM,uBAAuB;AACnF;AACA,cAAc,SAAS;AACvB;AACA,wFAAwF,WAAW;AACnG,cAAc,SAAS;AACvB;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;;AAEA;AACA;AACA,WAAW,UAAU,EAAE;AACvB,WAAW,mBAAmB;AAC9B,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,aAAa;AACnD;AACA,UAAU;AACV,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5kBA;AACA;;AAEA;;AAEA,iBAAiB;;AAEjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,gCAAgC;AAC3C,WAAW,OAAO;AAClB,WAAW,EAAE;AACb;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA,mBAAmB;AACnB;;AAEA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,oBAAoB,IAAI,mBAAmB,0CAA0C;AAClG;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,WAAW;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,gCAAgC;AAC3C,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,mBAAmB;AAC9B,aAAa,OAAO;AACpB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B,aAAa,OAAO;AACpB,YAAY,UAAU;AACtB;AACA;;AAEA;AACA;AACA,WAAW,mBAAmB;AAC9B,aAAa,OAAO;AACpB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;;AAEA;AACA;AACA,WAAW,mBAAmB;AAC9B,aAAa,OAAO;AACpB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B,aAAa,OAAO;AACpB,YAAY,UAAU;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;;AAEA;AACA;AACA,WAAW,kBAAkB;AAC7B,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,yBAAyB,KAAK,2BAA2B;AACrE,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;AC1cA;AACA;;AAEA;AACA,wBAAwB,qBAAqB;AAC7C;AACA,UAAU;AACV,WAAW,WAAW;AACtB,WAAW,KAAK;AAChB,aAAa;AACb;;AAEA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B,WAAW,EAAE;AACb,WAAW,KAAK;AAChB,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;ACnDA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA,KAAK,aAAa;AAClB;AACA;;;;;;;AChBA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA,oDAAoD;;AAEpD,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,eAAe,EAAE;AACjB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,EAAE;AACjB,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,iBAAiB,MAAM;AACvB;AACA;;AAEA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,iBAAiB,MAAM;AACvB;AACA;;AAEA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,iBAAiB,MAAM;AACvB;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA,2BAA2B;;AAE3B;AACA,eAAe,OAAO;AACtB,eAAe,kBAAkB;AACjC,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,kBAAkB;AACjC,eAAe,QAAQ;AACvB,iBAAiB,MAAM;AACvB;AACA;;AAEA;AACA;AACA,eAAe,sBAAsB,8CAA8C;AACnF,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,sBAAsB,8CAA8C;AACnF,iBAAiB;AACjB;AACA;;AAEA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+EAA+E,kBAAkB;AACjG;AACA,eAAe,oBAAoB;AACnC,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,qFAAqF,qBAAqB;AAC1G;AACA,eAAe,oBAAoB;AACnC,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,qFAAqF,oBAAoB;AACzG;AACA,eAAe,oBAAoB;AACnC,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,8FAA8F,2BAA2B;AACzH;AACA,eAAe,oBAAoB;AACnC,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,wFAAwF,uBAAuB;AAC/G;AACA,eAAe,oBAAoB;AACnC,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,iGAAiG,8BAA8B;AAC/H;AACA,eAAe,oBAAoB;AACnC,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6EAA6E,mBAAmB;AAChG;AACA,eAAe,oBAAoB;AACnC,iBAAiB,OAAO;AACxB;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uDAAuD,kBAAkB;AACzE;AACA,iBAAiB,MAAM;AACvB;AACA;;AAEA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mFAAmF,oBAAoB;AACvG;AACA,eAAe,oBAAoB;AACnC,iBAAiB,MAAM;AACvB;AACA;;AAEA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gFAAgF,oBAAoB;AACpG;AACA,eAAe,oBAAoB;AACnC,iBAAiB,MAAM;AACvB;AACA;;AAEA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,mBAAmB;AAC9E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,wEAAwE,kBAAkB;AAC1F;AACA,eAAe,oBAAoB;AACnC,iBAAiB,MAAM;AACvB;AACA;;AAEA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oEAAoE,kBAAkB;AACtF;AACA,eAAe,oBAAoB;AACnC,iBAAiB,MAAM;AACvB;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,aAAa;AAC5B,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iGAAiG,qBAAqB;AACtH;AACA,eAAe,aAAa;AAC5B,iBAAiB,MAAM;AACvB;AACA;;AAEA;AACA;AACA,eAAe,aAAa;AAC5B,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iHAAiH,sBAAsB;AACvI;AACA,eAAe,aAAa;AAC5B,iBAAiB,MAAM;AACvB;AACA;;AAEA;AACA;AACA,eAAe,aAAa;AAC5B,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA,4GAA4G,8BAA8B;AAC1I;AACA,eAAe,aAAa;AAC5B,iBAAiB,MAAM;AACvB;AACA;;AAEA;AACA;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;;;;;;;ACxrCD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD,0BAA0B;AAC1B,2FAA2F,iBAAiB;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,eAAe;AACf,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;;AAEA;AACA,wBAAwB;AACxB,cAAc;AACd;AACA;AACA,gBAAgB;AAChB,0CAA0C,YAAY,KAAK;AAC3D;AACA,WAAW;AACX,OAAO;;AAEP;AACA,SAAS,2BAA2B;AACpC,cAAc;AACd;AACA;AACA;AACA,sBAAsB,aAAa,KAAK;AACxC;AACA,WAAW;AACX,OAAO;;AAEP;AACA,SAAS;AACT;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA,cAAc;AACd,cAAc;;AAEd;AACA;AACA;AACA;AACA,UAAU,mBAAmB;AAC7B;AACA;AACA;AACA;;AAEA,gCAAgC;AAChC,+BAA+B;AAC/B,mBAAmB,2BAA2B;AAC9C;AACA;AACA,OAAO;AACP;;AAEA,2BAA2B;AAC3B,gCAAgC;AAChC,mBAAmB,sBAAsB;AACzC,gBAAgB;AAChB;AACA,OAAO;AACP;;AAEA,8BAA8B;AAC9B,qBAAqB;AACrB,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,4CAA4C;AAC5C,SAAS;AACT,OAAO;AACP;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA,0BAA0B,eAAe;AACzC;AACA,aAAa;AACb,6CAA6C;AAC7C,gBAAgB;AAChB,sBAAsB,aAAa,KAAK;AACxC;AACA,WAAW;AACX,SAAS,2BAA2B;AACpC,0BAA0B;AAC1B;AACA,sBAAsB,aAAa,KAAK;AACxC;AACA,WAAW;AACX,SAAS,OAAO;AAChB,0CAA0C,qBAAqB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;AC9RA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,sGAAsG,kBAAkB,EAAE;AAC1H,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,wBAAwB;;AAExB;AACA,UAAU,gDAAgD;AAC1D;AACA;AACA,oDAAoD;AACpD;;AAEA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B;AAC3B;AACA,4BAA4B;AAC5B;AACA;AACA,0GAA0G;AAC1G;AACA;AACA,aAAa;AACb;AACA,iEAAiE;AACjE;AACA;AACA;;AAEA;AACA,SAAS,2BAA2B;;AAEpC;AACA;;AAEA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA,mBAAmB;;AAEnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA,WAAW;AACX,OAAO;;AAEP;AACA,eAAe,+BAA+B;AAC9C;AACA;AACA;AACA,uCAAuC,WAAW;AAClD;;AAEA;AACA;AACA;AACA;;;;;;;;ACzGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC;AACzC,yCAAyC,YAAY,KAAK;AAC1D;AACA;AACA,8FAA8F;AAC9F;AACA;AACA;AACA,WAAW;AACX,OAAO;;AAEP;AACA,SAAS,2BAA2B;AACpC,8BAA8B,aAAa;;AAE3C;AACA,mEAAmE;;AAEnE;AACA,sBAAsB,YAAY;AAClC;AACA;;AAEA;AACA,aAAa,OAAO;;AAEpB,sBAAsB,YAAY;AAClC;AACA;AACA;AACA;;AAEA,aAAa;AACb,OAAO;;AAEP;AACA,SAAS;AACT;AACA,4DAA4D;;AAE5D;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,C;;;;;;;ACnGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,qBAAqB;AACtD;AACA,UAAU;AACV,WAAW,mCAAmC,YAAY,GAAG;AAC7D,WAAW,WAAW;AACtB,WAAW,gBAAgB;AAC3B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA,mCAAmC,cAAc;AACjD;AACA,UAAU;AACV,WAAW,WAAW;AACtB,WAAW,gBAAgB;AAC3B,aAAa;AACb;;AAEA;;;;;;;;ACnCA;AACA;;AAEA,2BAA2B,EAAE;AAC7B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB,cAAc,uBAAuB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;AACV,aAAa,YAAY;AACzB;;AAEA;AACA;AACA;AACA,UAAU;AACV,aAAa,YAAY;AACzB;;AAEA;AACA;AACA;AACA,UAAU;AACV,WAAW,OAAO;AAClB,aAAa;AACb;;AAEA;AACA;AACA;AACA,UAAU;AACV,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB,YAAY,MAAM;AAClB;;AAEA;AACA;AACA;AACA,UAAU;AACV,WAAW,OAAO;AAClB,aAAa,YAAY;AACzB;;AAEA;AACA,gCAAgC,eAAe;AAC/C;AACA,cAAc,oBAAoB;AAClC,cAAc,oBAAoB;AAClC,cAAc,oBAAoB;AAClC,cAAc,oBAAoB;AAClC,cAAc,oBAAoB;AAClC,cAAc,OAAO;AACrB;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,SAAS;AACT,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC,IAAI;AACpC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4CAA4C;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,yBAAyB,aAAa;AACtC,KAAK;AACL;AACA;;;;;;;;AC5YA;AACA;;AAEA;AACA;;AAEA;AACA,kIAAkI,oBAAoB;AACtJ;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD,yBAAyB;AACzB;AACA;AACA,0EAA0E,iBAAiB;AAC3F;AACA;AACA;AACA,eAAe;AACf,SAAS;AACT;AACA,eAAe;AACf,6CAA6C;AAC7C;AACA;AACA,eAAe;AACf;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd,mBAAmB,gDAAgD;AACnE;AACA;;AAEA;AACA,6CAA6C,oBAAoB;;AAEjE;AACA,wBAAwB;AACxB;AACA;AACA;AACA,0BAA0B,WAAW,KAAK;AAC1C;AACA;AACA,eAAe;;AAEf;AACA,SAAS,2BAA2B;AACpC;AACA;AACA,0BAA0B,YAAY,KAAK;AAC3C;AACA,eAAe;;AAEf;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,C;;;;;;;AChLA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;;AAEA;AACA,qCAAqC,eAAe;AACpD;AACA,UAAU;AACV,WAAW,kBAAkB;AAC7B,aAAa,UAAU,EAAE;AACzB;AACA;;AAEA;AACA,mCAAmC,eAAe;AAClD;AACA,UAAU;AACV,WAAW,UAAU,EAAE;AACvB,WAAW,mBAAmB;AAC9B,aAAa,kBAAkB;AAC/B;AACA;;AAEA;AACA,gCAAgC,eAAe;AAC/C;AACA,cAAc,2BAA2B;AACzC,cAAc,yBAAyB;AACvC;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;AClFA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,mDAAmD,cAAc;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA,0DAA0D,cAAc;AACxE;;AAEA;AACA;AACA;AACA,qCAAqC,0BAA0B,EAAE;AACjE,2CAA2C,eAAe;AAC1D;AACA;AACA;;AAEA;AACA,8DAA8D,+DAA+D;;AAE7H;AACA;;AAEA;AACA,kDAAkD,oBAAoB,WAAW;;AAEjF;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,6CAA6C;AAC7C;;AAEA;AACA,uBAAuB;AACvB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,iBAAiB;AAClC,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2BAA2B;AAChD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,uCAAuC,kCAAkC;;AAEzE;;AAEA,oDAAoD,sBAAsB;AAC1E;AACA;AACA;AACA;AACA;AACA,qFAAqF,sCAAsC,EAAE;AAC7H,sIAAsI,+CAA+C,yEAAyE,gBAAgB,EAAE;AAChR,GAAG;;AAEH,iHAAiH,4CAA4C,sEAAsE,gBAAgB,SAAS;;AAE5P,qCAAqC,0BAA0B;AAC/D,qBAAqB;;AAErB;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;ACzMA;;;;;AAKA;;;;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;IAEahN,W,WAAAA,W;AACT,2BAAc;AAAA;;AACV,aAAKE,OAAL,GAAeA,gBAAf;AAC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ACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA,UAAU;AACV,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA,8BAA8B,EAAE,mBAAmB,EAAE,iBAAiB,EAAE;AACxE;;;;;;;;AC1IA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd,eAAe,yBAAyB;AACxC,eAAe,KAAK;AACpB,iBAAiB,iBAAiB;AAClC,gBAAgB,MAAM;AACtB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF;AAClF;AACA,sCAAsC;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA,0IAA0I,gCAAgC;AAC1K;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;;;;;;;AClGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,EAAE;AACb,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,sBAAsB;AACpC;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;;;;;;;;AC3EA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,mCAAmC,iBAAiB;AACpD;AACA,UAAU;AACV,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa;AACb;;AAEA;AACA,uBAAuB,iBAAiB;AACxC;AACA,UAAU;AACV,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,aAAa;AACxB,WAAW,cAAc;AACzB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,yDAAyD;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,aAAa;AACxB,aAAa,2BAA2B;AACxC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6BAA6B;AAC5D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;;AAEA;AACA;AACA;;;;;;;;AClHA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;;AAEA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;;AAEA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK,IAAI;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK,IAAI;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa,0CAA0C;AACvD;AACA;AACA,aAAa;AACb;AACA,oDAAoD;AACpD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,KAAK;;AAEL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9UA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA,4BAA4B,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChEA;AACA;;AAEA;AACA,4BAA4B,gBAAgB;AAC5C;AACA,UAAU;AACV,WAAW,OAAO;AAClB,aAAa,WAAW;AACxB;;AAEA;AACA,wBAAwB,gBAAgB;AACxC;AACA,UAAU;AACV,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,WAAW;AACxB,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC/CA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,WAAW;AACX,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxGA;;;;;AAKA;;;;;;;;;AAEA;;AACA;;AACA;;;;;;;;AACA;;;;IAIauE,Y;;AAET;;;;;;;;;;;;;;AAcA,0BAAYmF,cAAZ,EAA4B;AAAA;;AAExB,aAAKuH,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,MAAH,GAAY,CAAhB,EAAmB;AACfoW,iBAAK,CAAC,CAAN,EAAS,EAACtJ,IAAI3E,GAAL,EAAUJ,MAAMyU,EAAhB,EAAT;AACAA,eAAGxc,MAAH,GAAY,CAAZ;AACH;AACJ;AACJ;AACD,IAAIyc,eAAepD,YAAY8C,MAAZ,EAAoB,OAAO,IAA3B,CAAnB,C;;;;;;;AClGA;;AAEA;AACA;;;;;;;;ACHA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,kBAAkB;AAC7B,aAAa;AACb,cAAc,WAAW;AACzB,cAAc,WAAW;AACzB,cAAc,WAAW;AACzB,cAAc,WAAW;AACzB,cAAc,WAAW;AACzB,cAAc,WAAW;AACzB,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU,UAAU,UAAU,YAAY,eAAe,EAAE,EAAE,EAAE;AAC/E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd,kBAAkB,OAAO;AACzB,kBAAkB,WAAW;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd,kBAAkB,YAAY;AAC9B,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA,cAAc;AACd,kBAAkB,YAAY;AAC9B,kBAAkB,OAAO;AACzB;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA,cAAc;AACd,kBAAkB,uBAAuB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,cAAc;AACd,kBAAkB,OAAO;AACzB,kBAAkB,EAAE;AACpB,kBAAkB,OAAO;AACzB,kBAAkB,OAAO;AACzB,kBAAkB,QAAQ;AAC1B,kBAAkB,QAAQ;AAC1B,kBAAkB,WAAW;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,cAAc;AACd,kBAAkB,eAAe;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA,cAAc;AACd,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,cAAc;AACd,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,cAAc;AACd,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,cAAc;AACd,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,cAAc;AACd,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,cAAc;AACd,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,cAAc;AACd,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,cAAc;AACd,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,cAAc;AACd,kBAAkB,WAAW;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA,cAAc;AACd,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;;;;;;;;AC9YA;AACA;;AAEA;;AAEA;AACA,qCAAqC,WAAW,MAAM,gBAAgB;AACtE;AACA,UAAU;AACV,WAAW,WAAW;AACtB,WAAW,KAAK;AAChB,aAAa;AACb;;AAEA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,aAAa;AACxB,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,KAAK;AAChB,aAAa,cAAc;AAC3B,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB,YAAY,MAAM;AAClB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;ACvGA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACnCA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACXA;AACA;;AAEA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,YAAY;AAC5C;AACA,cAAc,iBAAiB;AAC/B,cAAc,mBAAmB;AACjC,cAAc,mBAAmB;AACjC,cAAc,iBAAiB;AAC/B,cAAc,KAAK;AACnB;;AAEA;AACA,sCAAsC,YAAY;AAClD;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB,WAAW,cAAc,uCAAuC,qBAAqB;AACrF,aAAa,cAAc;AAC3B,cAAc,OAAO;AACrB,cAAc,cAAc,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,uDAAuD,aAAa,EAAE;;AAEtE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,eAAe;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,eAAe;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,eAAe;AACf;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,mBAAmB;AACnB;AACA,0CAA0C;AAC1C;AACA,mBAAmB;AACnB,SAAS;AACT;AACA;AACA,mBAAmB;AACnB;AACA,iDAAiD;AACjD;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB;AACvB,aAAa;AACb;;AAEA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B;AAC3B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAyC;AACzC;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB;AACvB,aAAa;AACb;;AAEA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAA0C;AAC1C,uBAAuB;AACvB,aAAa;AACb;;AAEA,SAAS;AACT,sCAAsC;AACtC,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,WAAW,KAAK,aAAa,WAAW;AAC3D;AACA;AACA;AACA;;AAEA,iCAAiC;AACjC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAkB,iBAAiB;AACnC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB;AACvB,aAAa;AACb;;AAEA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB;AACvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc,uCAAuC,qBAAqB;AACrF,aAAa,cAAc;AAC3B,cAAc,OAAO;AACrB,cAAc,cAAc,mBAAmB;AAC/C;AACA;;;;;;;;ACpvBA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;;;;;;;;AC3CA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,yCAAyC,sCAAsC;AAC/E;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA,UAAU;AACV,WAAW,WAAW;AACtB,WAAW,KAAK;AAChB,aAAa;AACb;;AAEA;AACA,+BAA+B,kBAAkB,gBAAgB,qBAAqB;AACtF;AACA;AACA;AACA,UAAU;AACV,WAAW,sBAAsB;AACjC,WAAW,gCAAgC;AAC3C,aAAa,uBAAuB;AACpC;;AAEA;AACA;AACA,6CAA6C,qBAAqB;AAClE;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,mCAAmC,kCAAkC;AACrE,WAAW,oCAAoC;AAC/C,WAAW,kBAAkB;AAC7B,WAAW,kBAAkB;AAC7B,WAAW,sBAAsB;AACjC,WAAW,gCAAgC;AAC3C,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+BAA+B,kCAAkC,EAAE;AACnE;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,+BAA+B,eAAe,EAAE;AAChD;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7IA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA,4BAA4B,UAAU;AACtC,4CAA4C,aAAa;AACzD,0BAA0B,UAAU;;AAEpC;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,mBAAmB;AAC9B,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvMA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gBAAgB;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;;;;;;;AChFA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;ACpBA,kBAAkB,oQAAoQ,saAAsa,iBAAiB,sBAAsB,oBAAoB,6nBAA6nB,YAAY,mCAAmC,UAAU,mB","file":"motorcortex.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"motorcortex\"] = factory();\n\telse\n\t\troot[\"motorcortex\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 69d8b2dce84694a50e8e","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(\"./util/minimal\");\r\n\r\nvar roots = require(\"./roots\");\r\n\r\nvar Type, // cyclic\r\n    Enum;\r\n\r\nutil.codegen = require(\"@protobufjs/codegen\");\r\nutil.fetch   = require(\"@protobufjs/fetch\");\r\nutil.path    = require(\"@protobufjs/path\");\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (object) {\r\n        var keys  = Object.keys(object),\r\n            array = new Array(keys.length),\r\n            index = 0;\r\n        while (index < keys.length)\r\n            array[index] = object[keys[index++]];\r\n        return array;\r\n    }\r\n    return [];\r\n};\r\n\r\n/**\r\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\r\n * @param {Array.<*>} array Array to convert\r\n * @returns {Object.<string,*>} Converted object\r\n */\r\nutil.toObject = function toObject(array) {\r\n    var object = {},\r\n        index  = 0;\r\n    while (index < array.length) {\r\n        var key = array[index++],\r\n            val = array[index++];\r\n        if (val !== undefined)\r\n            object[key] = val;\r\n    }\r\n    return object;\r\n};\r\n\r\nvar safePropBackslashRe = /\\\\/g,\r\n    safePropQuoteRe     = /\"/g;\r\n\r\n/**\r\n * Tests whether the specified name is a reserved word in JS.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nutil.isReserved = function isReserved(name) {\r\n    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified property name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    if (!/^[$\\w_]+$/.test(prop) || util.isReserved(prop))\r\n        return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\r\n    return \".\" + prop;\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\nvar camelCaseRe = /_([a-z])/g;\r\n\r\n/**\r\n * Converts a string to camel case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.camelCase = function camelCase(str) {\r\n    return str.substring(0, 1)\r\n         + str.substring(1)\r\n               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });\r\n};\r\n\r\n/**\r\n * Compares reflected fields by id.\r\n * @param {Field} a First field\r\n * @param {Field} b Second field\r\n * @returns {number} Comparison value\r\n */\r\nutil.compareFieldsById = function compareFieldsById(a, b) {\r\n    return a.id - b.id;\r\n};\r\n\r\n/**\r\n * Decorator helper for types (TypeScript).\r\n * @param {Constructor<T>} ctor Constructor function\r\n * @param {string} [typeName] Type name, defaults to the constructor's name\r\n * @returns {Type} Reflected type\r\n * @template T extends Message<T>\r\n * @property {Root} root Decorators root\r\n */\r\nutil.decorateType = function decorateType(ctor, typeName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (ctor.$type) {\r\n        if (typeName && ctor.$type.name !== typeName) {\r\n            util.decorateRoot.remove(ctor.$type);\r\n            ctor.$type.name = typeName;\r\n            util.decorateRoot.add(ctor.$type);\r\n        }\r\n        return ctor.$type;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(\"./type\");\r\n\r\n    var type = new Type(typeName || ctor.name);\r\n    util.decorateRoot.add(type);\r\n    type.ctor = ctor; // sets up .encode, .decode etc.\r\n    Object.defineProperty(ctor, \"$type\", { value: type, enumerable: false });\r\n    Object.defineProperty(ctor.prototype, \"$type\", { value: type, enumerable: false });\r\n    return type;\r\n};\r\n\r\nvar decorateEnumIndex = 0;\r\n\r\n/**\r\n * Decorator helper for enums (TypeScript).\r\n * @param {Object} object Enum object\r\n * @returns {Enum} Reflected enum\r\n */\r\nutil.decorateEnum = function decorateEnum(object) {\r\n\r\n    /* istanbul ignore if */\r\n    if (object.$type)\r\n        return object.$type;\r\n\r\n    /* istanbul ignore next */\r\n    if (!Enum)\r\n        Enum = require(\"./enum\");\r\n\r\n    var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\r\n    util.decorateRoot.add(enm);\r\n    Object.defineProperty(object, \"$type\", { value: enm, enumerable: false });\r\n    return enm;\r\n};\r\n\r\n/**\r\n * Decorator root (TypeScript).\r\n * @name util.decorateRoot\r\n * @type {Root}\r\n * @readonly\r\n */\r\nObject.defineProperty(util, \"decorateRoot\", {\r\n    get: function() {\r\n        return roots[\"decorated\"] || (roots[\"decorated\"] = new (require(\"./root\"))());\r\n    }\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/util.js\n// module id = 0\n// module chunks = 0","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\r\n\r\nvar Namespace = require(\"./namespace\"),\r\n    util = require(\"./util\");\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] The comment for this enum\r\n * @param {Object.<string,string>} [comments] The value comments for this enum\r\n */\r\nfunction Enum(name, values, options, comment, comments) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (values && typeof values !== \"object\")\r\n        throw TypeError(\"values must be an object\");\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Enum comment text.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = comments || {};\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    if (values)\r\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\r\n            if (typeof values[keys[i]] === \"number\") // use forward entries only\r\n                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\r\n}\r\n\r\n/**\r\n * Enum descriptor.\r\n * @interface IEnum\r\n * @property {Object.<string,number>} values Enum values\r\n * @property {Object.<string,*>} [options] Enum options\r\n */\r\n\r\n/**\r\n * Constructs an enum from an enum descriptor.\r\n * @param {string} name Enum name\r\n * @param {IEnum} json Enum descriptor\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\r\n    enm.reserved = json.reserved;\r\n    return enm;\r\n};\r\n\r\n/**\r\n * Converts this enum to an enum descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IEnum} Enum descriptor\r\n */\r\nEnum.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\"  , this.options,\r\n        \"values\"   , this.values,\r\n        \"reserved\" , this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        \"comment\"  , keepComments ? this.comment : undefined,\r\n        \"comments\" , keepComments ? this.comments : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {string} [comment] Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnum.prototype.add = function add(name, id, comment) {\r\n    // utilized by the parser but not by .fromJSON\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n\r\n    if (this.isReservedId(id))\r\n        throw Error(\"id \" + id + \" is reserved in \" + this);\r\n\r\n    if (this.isReservedName(name))\r\n        throw Error(\"name '\" + name + \"' is reserved in \" + this);\r\n\r\n    if (this.valuesById[id] !== undefined) {\r\n        if (!(this.options && this.options.allow_alias))\r\n            throw Error(\"duplicate id \" + id + \" in \" + this);\r\n        this.values[name] = id;\r\n    } else\r\n        this.valuesById[this.values[name] = id] = name;\r\n\r\n    this.comments[name] = comment || null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnum.prototype.remove = function remove(name) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    var val = this.values[name];\r\n    if (val == null)\r\n        throw Error(\"name '\" + name + \"' does not exist in \" + this);\r\n\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nEnum.prototype.isReservedId = function isReservedId(id) {\r\n    return Namespace.isReservedId(this.reserved, id);\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nEnum.prototype.isReservedName = function isReservedName(name) {\r\n    return Namespace.isReservedName(this.reserved, name);\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/enum.js\n// module id = 1\n// module chunks = 0","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(\"@protobufjs/aspromise\");\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(\"@protobufjs/base64\");\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\r\n\r\n// float handling accross browsers\r\nutil.float = require(\"@protobufjs/float\");\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(\"@protobufjs/inquire\");\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = require(\"@protobufjs/utf8\");\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(\"@protobufjs/pool\");\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(\"./longbits\");\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n * @const\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n * @const\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n * @const\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of {@link util.isSet}.\r\n * @function\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isset =\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isSet = function isSet(obj, prop) {\r\n    var value = obj[prop];\r\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\r\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @interface Buffer\r\n * @extends Uint8Array\r\n */\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {Constructor<Buffer>}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n// Internal alias of or polyfull for Buffer.from.\r\nutil._Buffer_from = null;\r\n\r\n// Internal alias of or polyfill for Buffer.allocUnsafe.\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {Constructor<Uint8Array>}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @interface Long\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {Constructor<Long>}\r\n */\r\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n}\r\n\r\nutil.merge = merge;\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {Constructor<Error>} Custom error constructor\r\n */\r\nfunction newError(name) {\r\n\r\n    function CustomError(message, properties) {\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    }\r\n\r\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\r\n\r\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\r\n\r\n    CustomError.prototype.toString = function toString() {\r\n        return this.name + \": \" + this.message;\r\n    };\r\n\r\n    return CustomError;\r\n}\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @template T extends Message<T>\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>} [properties] Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message<T>}\r\n */\r\n\r\n/**\r\n * A OneOf getter as returned by {@link util.oneOfGetter}.\r\n * @typedef OneOfGetter\r\n * @type {function}\r\n * @returns {string|undefined} Set field name, if any\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfGetter} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * A OneOf setter as returned by {@link util.oneOfSetter}.\r\n * @typedef OneOfSetter\r\n * @type {function}\r\n * @param {string|undefined} value Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfSetter} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations.\r\n *\r\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\r\n *\r\n * - Longs become strings\r\n * - Enums become string keys\r\n * - Bytes become base64 encoded strings\r\n * - (Sub-)Messages become plain objects\r\n * - Maps become plain objects with all string keys\r\n * - Repeated fields become arrays\r\n * - NaN and Infinity for float and double fields become strings\r\n *\r\n * @type {IConversionOptions}\r\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String,\r\n    json: true\r\n};\r\n\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/util/minimal.js\n// module id = 2\n// module chunks = 0","/*\n * Developer : Alexey Zakharov (alexey.zakharov@vectioneer.com)\n * All rights reserved. Copyright (c) 2015 - 2018 VECTIONEER.\n */\n\n'use strict';\n\nexport class Deferred {\n    constructor() {\n        let _this = this;\n        this.promise = new Promise(function (resolve, reject) {\n            _this.reject = reject\n            _this.resolve = resolve\n        });\n    }\n}\n\nexport const ConnectionState = {\n    CONNECTING: 0,\n    OPEN: 1,\n    CLOSING: 2,\n    CLOSED: 3\n};\n\n\n// WEBPACK FOOTER //\n// ./src/utils.js","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\r\n\r\nvar Enum  = require(\"./enum\"),\r\n    types = require(\"./types\"),\r\n    util  = require(\"./util\");\r\n\r\nvar Type; // cyclic\r\n\r\nvar ruleRe = /^required|optional|repeated$/;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @name Field\r\n * @classdesc Reflected message field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a field from a field descriptor.\r\n * @param {string} name Field name\r\n * @param {IField} json Field descriptor\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Field} instead.\r\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports FieldBase\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\r\nfunction Field(name, id, type, rule, extend, options, comment) {\r\n\r\n    if (util.isObject(rule)) {\r\n        comment = extend;\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        comment = options;\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {Type|null}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {OneOf|null}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {Type|Enum|null}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {Field|null}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {Field|null}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {boolean|null}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n\r\n    /**\r\n     * Comment for this field.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(Field.prototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\") // clear cached before setting\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Field descriptor.\r\n * @interface IField\r\n * @property {string} [rule=\"optional\"] Field rule\r\n * @property {string} type Field type\r\n * @property {number} id Field id\r\n * @property {Object.<string,*>} [options] Field options\r\n */\r\n\r\n/**\r\n * Extension field descriptor.\r\n * @interface IExtensionField\r\n * @extends IField\r\n * @property {string} extend Extended type\r\n */\r\n\r\n/**\r\n * Converts this field to a field descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IField} Field descriptor\r\n */\r\nField.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nField.prototype.resolve = function resolve() {\r\n\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\r\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\r\n        if (this.resolvedType instanceof Type)\r\n            this.typeDefault = null;\r\n        else // instanceof Enum\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] != null) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // remove unnecessary options\r\n    if (this.options) {\r\n        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\r\n            delete this.options.packed;\r\n        if (!Object.keys(this.options).length)\r\n            this.options = undefined;\r\n    }\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // take special care of maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = util.emptyObject;\r\n    else if (this.repeated)\r\n        this.defaultValue = util.emptyArray;\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    // ensure proper value on prototype\r\n    if (this.parent instanceof Type)\r\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\r\n * @typedef FieldDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} fieldName Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @param {T} [defaultValue] Default value\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\r\n */\r\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\r\n\r\n    // submessage: decorate the submessage and use its name as the type\r\n    if (typeof fieldType === \"function\")\r\n        fieldType = util.decorateType(fieldType).name;\r\n\r\n    // enum reference: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldType && typeof fieldType === \"object\")\r\n        fieldType = util.decorateEnum(fieldType).name;\r\n\r\n    return function fieldDecorator(prototype, fieldName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\r\n    };\r\n};\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {Constructor<T>|string} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends Message<T>\r\n * @variation 2\r\n */\r\n// like Field.d but without a default value\r\n\r\nField._configure = function configure(Type_) {\r\n    Type = Type_;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/field.js\n// module id = 4\n// module chunks = 0","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\n\r\nvar util = require(\"./util\");\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {Namespace|null}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = null;\r\n\r\n    /**\r\n     * Defining file name.\r\n     * @type {string|null}\r\n     */\r\n    this.filename = null;\r\n}\r\n\r\nObject.defineProperties(ReflectionObject.prototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its descriptor representation.\r\n * @returns {Object.<string,*>} Descriptor\r\n * @abstract\r\n */\r\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObject.prototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\r\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObject.prototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n\r\nReflectionObject._configure = function(Root_) {\r\n    Root = Root_;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/object.js\n// module id = 5\n// module chunks = 0","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(\"./util\");\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @const\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {null} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/types.js\n// module id = 6\n// module chunks = 0","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\r\n\r\nvar Enum     = require(\"./enum\"),\r\n    Field    = require(\"./field\"),\r\n    util     = require(\"./util\");\r\n\r\nvar Type,    // cyclic\r\n    Service; // \"\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array, toJSONOptions) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON(toJSONOptions);\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nNamespace.isReservedId = function isReservedId(reserved, id) {\r\n    if (reserved)\r\n        for (var i = 0; i < reserved.length; ++i)\r\n            if (typeof reserved[i] !== \"string\" && reserved[i][0] <= id && reserved[i][1] >= id)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nNamespace.isReservedName = function isReservedName(reserved, name) {\r\n    if (reserved)\r\n        for (var i = 0; i < reserved.length; ++i)\r\n            if (reserved[i] === name)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {ReflectionObject[]|null}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * Namespace descriptor.\r\n * @interface INamespace\r\n * @property {Object.<string,*>} [options] Namespace options\r\n * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors\r\n */\r\n\r\n/**\r\n * Any extension field descriptor.\r\n * @typedef AnyExtensionField\r\n * @type {IExtensionField|IExtensionMapField}\r\n */\r\n\r\n/**\r\n * Any nested object descriptor.\r\n * @typedef AnyNestedObject\r\n * @type {IEnum|IType|IService|AnyExtensionField|INamespace}\r\n */\r\n// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)\r\n\r\n/**\r\n * Converts this namespace to a namespace descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {INamespace} Namespace descriptor\r\n */\r\nNamespace.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    return util.toObject([\r\n        \"options\" , this.options,\r\n        \"nested\"  , arrayToJSON(this.nestedArray, toJSONOptions)\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds nested objects to this namespace from nested object descriptors.\r\n * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    /* istanbul ignore else */\r\n    if (nestedJson) {\r\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\r\n            nested = nestedJson[names[i]];\r\n            ns.add( // most to least likely\r\n                ( nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespace.prototype.get = function get(name) {\r\n    return this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespace.prototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum: \" + name);\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespace.prototype.add = function add(object) {\r\n\r\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\r\n        throw TypeError(\"object must be a valid nested object\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespace.prototype.remove = function remove(object) {\r\n\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    if (object.parent !== this)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespace.prototype.define = function define(path, json) {\r\n\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path))\r\n        throw TypeError(\"illegal path\");\r\n    if (path && path.length && path[0] === \"\")\r\n        throw Error(\"path must be relative\");\r\n\r\n    var ptr = this;\r\n    while (path.length > 0) {\r\n        var part = path.shift();\r\n        if (ptr.nested && ptr.nested[part]) {\r\n            ptr = ptr.nested[part];\r\n            if (!(ptr instanceof Namespace))\r\n                throw Error(\"path conflicts with non-namespace objects\");\r\n        } else\r\n            ptr.add(ptr = new Namespace(part));\r\n    }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return this.resolve();\r\n};\r\n\r\n/**\r\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\r\n */\r\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\r\n\r\n    /* istanbul ignore next */\r\n    if (typeof filterTypes === \"boolean\") {\r\n        parentAlreadyChecked = filterTypes;\r\n        filterTypes = undefined;\r\n    } else if (filterTypes && !Array.isArray(filterTypes))\r\n        filterTypes = [ filterTypes ];\r\n\r\n    if (util.isString(path) && path.length) {\r\n        if (path === \".\")\r\n            return this.root;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return this;\r\n\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterTypes);\r\n\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found) {\r\n        if (path.length === 1) {\r\n            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)\r\n                return found;\r\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))\r\n            return found;\r\n\r\n    // Otherwise try each nested namespace\r\n    } else\r\n        for (var i = 0; i < this.nestedArray.length; ++i)\r\n            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))\r\n                return found;\r\n\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterTypes);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespace.prototype.lookupType = function lookupType(path) {\r\n    var found = this.lookup(path, [ Type ]);\r\n    if (!found)\r\n        throw Error(\"no such type: \" + path);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Enum} Looked up enum\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, [ Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type or enum\r\n * @throws {Error} If `path` does not point to a type or enum\r\n */\r\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\r\n    var found = this.lookup(path, [ Type, Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespace.prototype.lookupService = function lookupService(path) {\r\n    var found = this.lookup(path, [ Service ]);\r\n    if (!found)\r\n        throw Error(\"no such Service '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\nNamespace._configure = function(Type_, Service_) {\r\n    Type    = Type_;\r\n    Service = Service_;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/namespace.js\n// module id = 7\n// module chunks = 0","/*\r\n * Developer : Alexey Zakharov (alexey.zakharov@vectioneer.com)\r\n * All rights reserved. Copyright (c) 2015 - 2018 VECTIONEER.\r\n */\r\n\r\n'use strict';\r\n\r\nexport const motorcortex_parameter_msg = 1;\r\nexport const motorcortex_parameter_list_msg = 2;\r\n\r\nimport motorcortex from './motorcortex';\r\nimport protobuf from 'protobufjs';\r\nimport long from 'long';\r\n\r\nclass PrimitiveTypes {\r\n\r\n    constructor(type_name) {\r\n        switch (type_name) {\r\n            case 'BOOL':\r\n                this.decoder = function (val, index) {\r\n                    return val.getUint8(index * Uint8Array.BYTES_PER_ELEMENT, true);\r\n                };\r\n                this.encoder = function (val) {\r\n                    for (let i = 0; i < val.length; ++i) {\r\n                        val[i] != 0 ? 1 : 0\r\n                    }\r\n                    console.log(val)\r\n                    return new Uint8Array(new Uint8Array(val).buffer);\r\n                };\r\n                this.toNumber = function (val) {\r\n                    return val.split(',').map(function (item) {\r\n                        return parseInt(item, 10);\r\n                    });\r\n                };\r\n                break;\r\n            case 'DOUBLE':\r\n                this.decoder = function (val, index) {\r\n                    return val.getFloat64(index * Float64Array.BYTES_PER_ELEMENT, true);\r\n                };\r\n                this.encoder = function (val) {\r\n                    return new Uint8Array((new Float64Array(val).buffer));\r\n                };\r\n                this.rounding = function (val, precision) {\r\n                    let rounded_val = [];\r\n                    for (let i = 0; i < val.length; ++i) {\r\n                        rounded_val.push(val[i] ? val[i].toFixed(precision) : 0);\r\n                    }\r\n                    return rounded_val;\r\n                };\r\n                this.toNumber = function (val) {\r\n                    return val.split(',').map(function (item) {\r\n                        return parseFloat(item);\r\n                    });\r\n                };\r\n                break;\r\n            case 'FLOAT':\r\n                this.decoder = function (val, index) {\r\n                    return val.getFloat32(index * Float32Array.BYTES_PER_ELEMENT, true);\r\n                };\r\n                this.encoder = function (val) {\r\n                    return new Uint8Array(new Float32Array(val).buffer);\r\n                };\r\n                this.rounding = function (val, precision) {\r\n                    let rounded_val = [];\r\n                    for (let i = 0; i < val.length; ++i) {\r\n                        rounded_val.push(val[i] ? val[i].toFixed(precision) : 0);\r\n                    }\r\n                    return rounded_val;\r\n                };\r\n                this.toNumber = function (val) {\r\n                    val.split(',').map(function (item) {\r\n                        return parseFloat(item);\r\n                    });\r\n                };\r\n                break;\r\n            case 'INT8':\r\n                this.decoder = function (val, index) {\r\n                    return val.getInt8(index * Int8Array.BYTES_PER_ELEMENT, true);\r\n                };\r\n                this.encoder = function (val) {\r\n                    return new Uint8Array(new Int8Array(val).buffer);\r\n                };\r\n                this.toNumber = function (val) {\r\n                    return val.split(',').map(function (item) {\r\n                        return parseInt(item, 10);\r\n                    });\r\n                };\r\n                break;\r\n            case 'UINT8':\r\n                this.decoder = function (val, index) {\r\n                    return val.getUint8(index * Uint8Array.BYTES_PER_ELEMENT, true);\r\n                };\r\n                this.encoder = function (val) {\r\n                    return new Uint8Array(new Uint8Array(val).buffer);\r\n                };\r\n                this.toNumber = function (val) {\r\n                    return val.split(',').map(function (item) {\r\n                        return parseInt(item, 10);\r\n                    });\r\n                };\r\n                break;\r\n            case 'INT16':\r\n                this.decoder = function (val, index) {\r\n                    return val.getInt16(index * Int16Array.BYTES_PER_ELEMENT, true);\r\n                };\r\n                this.encoder = function (val) {\r\n                    return new Uint8Array(new Int16Array(val).buffer);\r\n                };\r\n                this.toNumber = function (val) {\r\n                    return val.split(',').map(function (item) {\r\n                        return parseInt(item, 10);\r\n                    });\r\n                };\r\n                break;\r\n            case 'UINT16':\r\n                this.decoder = function (val, index) {\r\n                    return val.getUint16(index * Uint16Array.BYTES_PER_ELEMENT, true);\r\n                };\r\n                this.encoder = function (val) {\r\n                    return new Uint8Array(new Uint16Array(val).buffer);\r\n                };\r\n                this.toNumber = function (val) {\r\n                    return val.split(',').map(function (item) {\r\n                        return parseInt(item, 10);\r\n                    });\r\n                };\r\n                break;\r\n            case 'INT32':\r\n                this.decoder = function (val, index) {\r\n                    return val.getInt32(index * Int32Array.BYTES_PER_ELEMENT, true);\r\n                };\r\n                this.encoder = function (val) {\r\n                    return new Uint8Array(new Int32Array(val).buffer);\r\n                };\r\n                this.toNumber = function (val) {\r\n                    return val.split(',').map(function (item) {\r\n                        return parseInt(item, 10);\r\n                    });\r\n                };\r\n                break;\r\n            case 'UINT32':\r\n                this.decoder = function (val, index) {\r\n                    return val.getUint32(index * Uint32Array.BYTES_PER_ELEMENT, true);\r\n                };\r\n                this.encoder = function (val) {\r\n                    return new Uint8Array(new Uint32Array(val).buffer);\r\n                };\r\n                this.toNumber = function (val) {\r\n                    return val.split(',').map(function (item) {\r\n                        return parseInt(item, 10);\r\n                    });\r\n                };\r\n                break;\r\n            case 'INT64':\r\n                this.decoder = function (val, index) {\r\n                    let offset = index * Int32Array.BYTES_PER_ELEMENT * 2;\r\n                    let lv = new long(val.getInt32(offset, true), val.getInt32(offset + Int32Array.BYTES_PER_ELEMENT, true));\r\n                    return lv.toNumber();\r\n                };\r\n                this.encoder = function (val) {\r\n                    let buf = new Uint8Array(val.length * Int32Array.BYTES_PER_ELEMENT * 2);\r\n                    let data_view = new DataView(buf.buffer);\r\n\r\n                    for (let i = 0; i < val.length; i++) {\r\n                        let vl = long.fromNumber(val[i], false);\r\n                        let offset = i * Int32Array.BYTES_PER_ELEMENT * 2;\r\n                        data_view.setInt32(offset, vl.low, true);\r\n                        data_view.setInt32(offset + Int32Array.BYTES_PER_ELEMENT, vl.high, true);\r\n\r\n                    }\r\n                    return buf;\r\n                };\r\n                this.toNumber = function (val) {\r\n                    return val.split(',').map(function (item) {\r\n                        return parseInt(item, 10);\r\n                    });\r\n                };\r\n                break;\r\n            case 'UINT64':\r\n                this.decoder = function (val, index) {\r\n                    let offset = index * Uint32Array.BYTES_PER_ELEMENT * 2;\r\n                    let lv = new long(val.getUint32(offset, true), val.getUint32(offset + Uint32Array.BYTES_PER_ELEMENT, true), true);\r\n                    return lv.toNumber();\r\n                };\r\n                this.encoder = function (val) {\r\n                    let buf = new Uint8Array(val.length * Uint32Array.BYTES_PER_ELEMENT * 2);\r\n                    let data_view = new DataView(buf.buffer);\r\n\r\n                    for (let i = 0; i < val.length; i++) {\r\n                        let vl = long.fromNumber(val[i], true);\r\n                        let offset = i * Uint32Array.BYTES_PER_ELEMENT * 2;\r\n                        data_view.setUint32(offset, vl.low, true);\r\n                        data_view.setUint32(offset + Uint32Array.BYTES_PER_ELEMENT, vl.high, true);\r\n\r\n                    }\r\n                    return buf;\r\n                };\r\n                this.toNumber = function (val) {\r\n                    return val.split(',').map(function (item) {\r\n                        return parseInt(item, 10);\r\n                    });\r\n                };\r\n                break;\r\n            case 'STRING':\r\n                this.decoder = function (val, index) {\r\n                    return new TextDecoder('utf-8').decode(val);\r\n                };\r\n                this.encode = function (val) {\r\n                    return new Uint8Array(val);\r\n                };\r\n                break;\r\n            case 'USER_TYPE':\r\n                this.decoder = function (val, index) {\r\n                    return new Uint8Array(val);\r\n                };\r\n                this.encode = function (val) {\r\n                    return new Uint8Array(val);\r\n                };\r\n                break;\r\n            default:\r\n                this.decoder = function () {\r\n                    return 'undefined';\r\n                };\r\n        }\r\n    }\r\n\r\n    decode(data_view, number_of_elements) {\r\n        if (number_of_elements == 1) {\r\n            return this.decoder(data_view, 0);\r\n        } else {\r\n            let values = [];\r\n            for (let i = 0; i < number_of_elements; i++) {\r\n                values.push(this.decoder(data_view, i));\r\n            }\r\n            return values;\r\n        }\r\n    }\r\n\r\n    encode(value) {\r\n        if ((typeof(value) === 'string' || value instanceof String) && this.toNumber) {\r\n            value = this.toNumber(value);\r\n        }\r\n        // if value is not an array, convert to the array\r\n        return this.encoder(value.length ? value : [value]);\r\n    }\r\n\r\n    round(value, precision) {\r\n        return this.rounding ? this.rounding(value.length ? value : [value], precision) : value;\r\n    }\r\n}\r\n\r\n/**\r\n * Class for handling motorcortex data types: load proto and hash files,\r\n * creates a dictionary with all available data types, resolves data types by\r\n * name or by hash, performs encoding and decoding of the messages.\r\n */\r\nexport class MessageTypes {\r\n    /**\r\n     * Creates message types object\r\n     * @constructor\r\n     * @example\r\n     * let motorcortex_types = new motorcortex.MessageTypes();\r\n     */\r\n    constructor() {\r\n        this.types_by_hash = {};\r\n        this.types_by_name = {};\r\n        this.root = new protobuf.Root();\r\n    }\r\n\r\n    loadedFiles() {\r\n        return this.proto_hash_pair_list;\r\n    }\r\n\r\n    /**\r\n     * Loads an array of .proto and .json file pairs.\r\n     * @param {object[]} proto_hash_pair_list a list of corresponding proto message files and hash files.\r\n     * @return {Promise<string>} Returns a Promise, which is resolved when loading is complete.\r\n     * @example\r\n     * let motorcortex_types = new motorcortex.MessageTypes();\r\n     * let type_load_done = motorcortex_types.load([{\r\n     *      proto: 'msg/motorcortex.proto',\r\n     *      hash: 'msg/motorcortex_hash.json'}, {\r\n     *      proto: 'msg/motionJS.proto',\r\n     *      hash: 'msg/motionJS_hash.json'}, {\r\n     *      proto: 'msg/motionSL.proto',\r\n     *      hash: 'msg/motionSL_hash.json'\r\n     * }]);\r\n     *\r\n     * type_load_done.then(function () {\r\n     *      console.log('Loaded all data types');}).catch(function (reason) {\r\n     *      console.error('Failed to load data types: ' + reason);\r\n     * });\r\n     */\r\n    load(proto_hash_pair_list) {\r\n\r\n        this.proto_hash_pair_list = proto_hash_pair_list;\r\n\r\n        let all_loaded_resolve;\r\n        let all_loaded_reject;\r\n        let all_loaded = new Promise(function (resolve, reject) {\r\n            all_loaded_resolve = resolve;\r\n            all_loaded_reject = reject;\r\n        });\r\n\r\n        let hash_loaded_resolve;\r\n        let hash_loaded_reject;\r\n        let hash_loaded = new Promise(function (resolve, reject) {\r\n            hash_loaded_resolve = resolve;\r\n            hash_loaded_reject = reject;\r\n        });\r\n\r\n        let _this = this;\r\n        let proto_loaded = Promise.all(this._loadProto(proto_hash_pair_list));\r\n        proto_loaded.then(function () {\r\n            // loading hashes from json files\r\n            let hash_load_array = [];\r\n            for (let i = 0; i < proto_hash_pair_list.length; i++) {\r\n                let proto_hash_pair = proto_hash_pair_list[i];\r\n                let hash_file = proto_hash_pair['hash'];\r\n                if (!hash_file) {\r\n                    return new Promise(function (resolve, reject) {\r\n                        reject(Error('Hash file is not specified'));\r\n                    });\r\n                }\r\n                hash_load_array.push(_this._loadHash(hash_file, _this.root));\r\n            }\r\n\r\n            Promise.all(hash_load_array).then(function () {\r\n                hash_loaded_resolve();\r\n            }).catch(function (msg) {\r\n                hash_loaded_reject(msg);\r\n            })\r\n        }).catch(e => {\r\n                return new Promise(function (resolve, reject) {\r\n                    reject(Error(e));\r\n                });\r\n            }\r\n            // Error('Failed to load proto: ' + e))\r\n        );\r\n\r\n\r\n        hash_loaded.then(function () {\r\n            // save basic types\r\n            let primitive_types = _this._loadEnum(_this.types_by_name['motorcortex.DataType']);\r\n            for (let hash in primitive_types) {\r\n                if (hash > 0) {\r\n                    let type_name = primitive_types[hash];\r\n                    // add decoders/encoders to the common array\r\n                    if (_this.types_by_hash[hash]) {\r\n                        // if hash already exists, reject\r\n                        all_loaded_reject(Error('Type with hash ' + hash.toString(16) +\r\n                            ' already exists, type name: ', _this.types_by_hash[hash].toString()));\r\n                    } else {\r\n                        let type_primitive = new PrimitiveTypes(type_name);\r\n                        _this.types_by_hash[hash] = type_primitive;\r\n                        _this.types_by_name[type_name] = type_primitive;\r\n                    }\r\n                }\r\n            }\r\n            let parameter_flags = _this.getTypeByName('motorcortex.ParameterFlag');\r\n            if (parameter_flags) {\r\n                motorcortex.ParameterFlag = parameter_flags.values;\r\n            }\r\n            let parameter_types = _this.getTypeByName('motorcortex.ParameterType');\r\n            if (parameter_types) {\r\n                motorcortex.ParameterType = parameter_types.values;\r\n            }\r\n            let permissions = _this.getTypeByName('motorcortex.Permission');\r\n            if (permissions) {\r\n                motorcortex.Permission = permissions.values;\r\n            }\r\n            let status_codes = _this.getTypeByName('motorcortex.StatusCode');\r\n            if (status_codes) {\r\n                motorcortex.StatusCode = status_codes.values;\r\n            }\r\n            let user_groups = _this.getTypeByName('motorcortex.UserGroup');\r\n            if (user_groups) {\r\n                motorcortex.UserGroup = user_groups.values;\r\n            }\r\n            let data_types = _this.getTypeByName('motorcortex.DataType');\r\n            if (data_types) {\r\n                motorcortex.DataType = data_types.values;\r\n            }\r\n            let uints = _this.getTypeByName('motorcortex.Unit');\r\n            if (uints) {\r\n                motorcortex.Unit = uints.values;\r\n            }\r\n            // if everything is fine Ok, resolve\r\n            all_loaded_resolve();\r\n        }).catch(function (msg) {\r\n            all_loaded_reject(msg);\r\n        })\r\n\r\n\r\n        return all_loaded;\r\n    }\r\n\r\n    verifyPayload(type_name, payload) {\r\n        let type = this.types_by_name[type_name];\r\n        if (!type) {\r\n            console.error('Could not find type: ' + type_name);\r\n        }\r\n\r\n        return type.verify(payload);\r\n    }\r\n\r\n    /**\r\n     * Returns an instance of the loaded data type and fills it with payload.\r\n     * @param {string} type_name Type name from the proto files.\r\n     * @param {object} [payload] Payload data to fill.\r\n     * @return {object} Instance of the requested type, filled with payload.\r\n     * @example\r\n     * let load_msg = motorcortex_types.createType('motorcortex.LoadMsg', { path: '', fileName: 'control.xml' });\r\n     * let encoded_msg = this.encode(load_msg);\r\n     */\r\n    createType(type_name, payload) {\r\n        let type = this.types_by_name[type_name];\r\n        if (!type) {\r\n            console.error('Could not find type: ' + type_name);\r\n        }\r\n        let type_inst = type.create(payload);\r\n        type_inst.hash = type.hash;\r\n        type_inst.encode = function () {\r\n            return type.encode(type_inst).finish()\r\n        }\r\n\r\n        return type_inst\r\n    }\r\n\r\n    getTypeByHash(type_hash) {\r\n        let type = this.types_by_hash[type_hash];\r\n        if (!type) {\r\n            console.error('Could not find type with hash: ' + type_hash);\r\n        }\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Returns type with given name\r\n     * @param {string} type_name Name of the message type from the proto files.\r\n     * @return {object} Returns a Protobuf Type\r\n     * @example\r\n     * let ErrorList = motorcortex_types.getTypeByName('motorcortex.ErrorList');\r\n     * let error_list = ErrorList.decode(encoded_msg);\r\n     * console.log('Error list: ', error_list);\r\n     */\r\n    getTypeByName(type_name) {\r\n        let type = this.types_by_name[type_name];\r\n        if (!type) {\r\n            console.error('Could not find type with name: ' + type_name);\r\n        }\r\n        return type;\r\n    }\r\n\r\n    decodeValue(parameter) {\r\n        if (!(parameter.status & motorcortex.getStatusCode('FAILED'))) {\r\n            let type_id = parameter.info.dataType;\r\n            let value = parameter.value;\r\n            let decoder = this.getTypeByHash(type_id);\r\n            let number_of_elements = parameter.info.numberOfElements;\r\n\r\n            // user types\r\n            if (type_id >= motorcortex.DataType['BYTES']) {\r\n                return value;\r\n            } else if (type_id == motorcortex.DataType['STRING']) {\r\n                // c-strings\r\n                let i = 0;\r\n                let str = '';\r\n                while ((value[i] != 0) && (i < value.length)) {\r\n                    str += String.fromCharCode(value[i++]);\r\n                }\r\n                return str;\r\n            }\r\n\r\n            // all other types\r\n            return decoder.decode(new DataView(value.buffer, value.byteOffset), number_of_elements);\r\n        } else {\r\n            console.log('Failed to decode parameter, error code: ' + parameter.status);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    roundValue(data_type, value, precision) {\r\n        let decoder = this.getTypeByHash(data_type);\r\n        return decoder.round(value, precision);\r\n    }\r\n\r\n    _load_(proto_hash_pair_list) {\r\n\r\n        let _this = this;\r\n        // loading data types from proto files\r\n        let proto_builder = ProtoBuf.newBuilder();\r\n        for (let i = 0; i < proto_hash_pair_list.length; i++) {\r\n            let proto_hash_pair = proto_hash_pair_list[i];\r\n            let proto_file = proto_hash_pair['proto'];\r\n            if (!proto_file) {\r\n                return new Promise(function (resolve, reject) {\r\n                    reject(Error('Proto file is not specified'));\r\n                });\r\n            }\r\n            proto_builder = ProtoBuf.loadProtoFile(proto_file, proto_builder);\r\n            if (!proto_builder) {\r\n                return new Promise(function (resolve, reject) {\r\n                    reject(Error('Failed to save Proto file: ' + proto_file));\r\n                });\r\n            }\r\n        }\r\n\r\n        // loading hashes from json files\r\n        let hash_load_array = [];\r\n        for (let i = 0; i < proto_hash_pair_list.length; i++) {\r\n            let proto_hash_pair = proto_hash_pair_list[i];\r\n            let hash_file = proto_hash_pair['hash'];\r\n            if (!hash_file) {\r\n                return new Promise(function (resolve, reject) {\r\n                    reject(Error('Hash file is not specified'));\r\n                });\r\n            }\r\n            hash_load_array.push(_this._loadHash(hash_file, proto_builder));\r\n        }\r\n\r\n        // wait until data types structures are build,\r\n        // add decoders/encoders for basic data structures\r\n        return Promise.all(hash_load_array)\r\n            .then(function () {\r\n                new Promise(function (resolve, reject) {\r\n                    // save basic types\r\n                    let primitive_types = _this._loadEnum(_this.types_by_name['motorcortex.DataType']);\r\n                    for (let hash in primitive_types) {\r\n                        if (hash > 0) {\r\n                            let type_name = primitive_types[hash];\r\n                            // add decoders/encoders to the common array\r\n                            if (_this.types_by_hash[hash]) {\r\n                                // if hash already exists, reject\r\n                                reject(Error('Type with hash ' + hash.toString(16) + ' already exists, type name: ', _this.types_by_hash[hash].toString()));\r\n                            } else {\r\n                                let type_primitive = new PrimitiveTypes(type_name);\r\n                                _this.types_by_hash[hash] = type_primitive;\r\n                                _this.types_by_name[type_name] = type_primitive;\r\n                            }\r\n                        }\r\n                    }\r\n                    // if everything is fine Ok, resolve\r\n                    resolve();\r\n                })\r\n            });\r\n    }\r\n\r\n    _loadProto(proto_hash_pair_list) {\r\n        let clbs = [];\r\n        // loading data types from proto files\r\n        for (let i = 0; i < proto_hash_pair_list.length; i++) {\r\n            let proto_hash_pair = proto_hash_pair_list[i];\r\n            let proto_file = proto_hash_pair['proto'];\r\n            if (!proto_file) {\r\n                return new Promise(function (resolve, reject) {\r\n                    reject(Error('Proto file is not specified'));\r\n                });\r\n            }\r\n            clbs.push(this.root.load(proto_file));\r\n        }\r\n\r\n        return clbs;\r\n    }\r\n\r\n    _loadHash(url, proto_builder) {\r\n        let _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            let xmlhttp = new XMLHttpRequest();     // Used for loading json files;\r\n            // Event handler for loading json file;\r\n            xmlhttp.onreadystatechange = function () {   // when json is loaded, build hash table and make a callback\r\n                if (xmlhttp.readyState == 4) {\r\n                    if (xmlhttp.status == 200) {\r\n                        let data = JSON.parse(xmlhttp.responseText);\r\n                        for (let key in data) {\r\n                            let obj = data[key];\r\n                            let hash = parseInt(obj.hash);\r\n                            let type = proto_builder.lookupTypeOrEnum(obj.type);\r\n                            if (type) {\r\n                                type.hash = hash;\r\n                                // // checking if type is an instantiatable type (not enum)\r\n                                // if (typeof type !== 'object') {\r\n                                //     // storing hash inside the type\r\n                                //     type.hash = hash;\r\n                                //     console.log(type + ' is not an object');\r\n                                // }\r\n                                if (_this.types_by_hash[hash]) {\r\n                                    // if hash already exists, reject\r\n                                    reject(Error('Type with hash ' + hash.toString(16) + ' already exists, type name: ', _this.types_by_hash[hash].toString()));\r\n                                } else {\r\n                                    // create two dictionaries, one with hash is a key, second type name is a key\r\n                                    _this.types_by_hash[hash] = type;\r\n                                    _this.types_by_name[obj.type] = type;\r\n                                    // if message type is ParameterMsg or ParameterListMsg, set the flag,\r\n                                    // to automatically decode its value\r\n                                    if (obj.type == 'motorcortex.ParameterMsg') {\r\n                                        _this.types_by_hash[hash].decode_value = motorcortex_parameter_msg;\r\n                                    } else if (obj.type == 'motorcortex.ParameterListMsg') {\r\n                                        _this.types_by_hash[hash].decode_value = motorcortex_parameter_list_msg;\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                console.error('Failed to resolve proto builder for the type: ' + obj.type);\r\n                            }\r\n                        }\r\n                        // if all ok resolve\r\n                        resolve();\r\n                    } else {\r\n                        reject(Error(`Failed to load Hash file: ${url}`));\r\n                    }\r\n                }\r\n            };\r\n            xmlhttp.open('GET', url, true);\r\n            xmlhttp.send();\r\n        });\r\n    }\r\n\r\n    _loadEnum(enumerator) {\r\n        return enumerator.valuesById\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/message_types.js","/*\n * Developer : Alexey Zakharov (alexey.zakharov@vectioneer.com)\n * All rights reserved. Copyright (c) 2015 - 2018 VECTIONEER.\n */\n\n'use strict';\n\n/**\n * @fileOverview Motorcortex Bindings for JavaScript\n * @author Alexey Zakharov <zakharov@vectioneer.com>\n * @license Copyright (C) Vectioneer - All Rights Reserved\n * @copyright Vectioneer\n * @module motorcortex\n */\n\nimport {Motorcortex} from './core';\n\nlet motorcortex = new Motorcortex();\n\n/**\n *  Name of the module\n */\nexport const name = 'motorcortex'\n\n/**\n *  Version of the module\n */\nexport const version = motorcortex.version;\n\n/**\n * Class MessageTypes is responsible for encoding/decoding motorcortex messages.\n * @see MessageTypes\n * @example\n * let motorcortex_types = new motorcortex.MessageTypes();\n * let type_load_done = motorcortex_types.load([{\n *      proto: 'msg/motorcortex.proto',\n *      hash: 'msg/motorcortex_hash.json'}, {\n *      proto: 'msg/motionJS.proto',\n *      hash: 'msg/motionJS_hash.json'}, {\n *      proto: 'msg/motionSL.proto',\n *      hash: 'msg/motionSL_hash.json'\n * }]);\n *\n * type_load_done.then(function () {\n *      console.log('Loaded all data types');\n *      let load_msg = motorcortex_types.createType('motorcortex.LoadMsg', { path: '', fileName: 'control.xml' });\n *      let encoded_msg = this.encode(load_msg);\n * }).catch(function (reason) {\n *      console.error('Failed to load data types: ' + reason);\n * });\n */\nexport let MessageTypes = motorcortex.MessageTypes;\n\n\n/**\n * Class SesseionManager is responsible for opening/closing and reconnecting\n * session.\n *\n */\nexport let SessionManager = motorcortex.SessionManager;\nexport let SessionState = motorcortex.SessionState;\n\n/**\n * Class Subscribe is responsible for parameter and group subscriptions.\n * @see Subscribe\n * @example\n * let sub = new motorcortex.Subscribe(req);\n * let sub_conn_done = sub.connect('ws://localhost:5557');\n * sub_conn_done.then(function () {\n *      console.log('Subscribe connection is established');\n *      let data_sub = sub.subscribe(['root/Control/jointReferenceGenerator/enable',\n *          'root/Control/jointReferenceGenerator/signalGenerator01/amplitude',\n *          'root/Control/jointReferenceGenerator/signalGenerator02/amplitude'], 'group1');\n *      data_sub.notify(function(msg) {\n *          console.log('Received an update: ' + msg.toString());\n *      });\n * }).catch(function (reason) {\n *      console.error('Failed to establish connection: ' + reason);\n * });\n */\nexport let Subscribe = motorcortex.Subscribe;\n\n/**\n * Asynchronous version of the Subscribe class\n * @see Subscribe\n * @example\n * let sub = new motorcortex.SubscribeAsync(req);\n * let sub_conn_done = sub.connect('ws://localhost:5557');\n * sub_conn_done.then(function () {\n *      console.log('Subscribe connection is established');\n *      let data_sub = sub.subscribe(['root/Control/jointReferenceGenerator/enable',\n *          'root/Control/jointReferenceGenerator/signalGenerator01/amplitude',\n *          'root/Control/jointReferenceGenerator/signalGenerator02/amplitude'], 'group1');\n *      data_sub.notify(function(msg) {\n *          console.log('Received an update: ' + msg.toString());\n *      });\n * }).catch(function (reason) {\n *      console.error('Failed to establish connection: ' + reason);\n * });\n */\nexport let SubscribeAsync = motorcortex.SubscribeAsync;\n\n/**\n * Class Request is responsible for sending commands to motorcortex core:\n * for example set/get parameter value commands.\n * @see Request\n * @example\n * let req = new motorcortex.Request(motorcortex_types);\n * let req_conn_done = req.connect(`ws://localhost:5558`, 10000, 100);\n * req_conn_done.then(function () {\n *      console.log('Request connection is established');\n *      req.setParameter('root/Control/dummyBoolArray6', [1, 2, 3, 4]).then(function (reply) {\n *          if (reply.status === motorcortex.getStatusCode('OK')) {\n *              console.log('Parameter set to a new value.);\n *          }\n *      });\n * }\n */\nexport let Request = motorcortex.Request;\n\n/**\n * Asynchronous version of the Request class:\n * for example set/get parameter value commands.\n * @see Request\n * @example\n * let req = new motorcortex.RequestAsync(motorcortex_types);\n * let req_conn_done = req.connect(`ws://localhost:5558`, 10000, 100);\n * req_conn_done.then(function () {\n *      console.log('Request connection is established');\n *      req.setParameter('root/Control/dummyBoolArray6', [1, 2, 3, 4]).then(function (reply) {\n *          if (reply.status === motorcortex.getStatusCode('OK')) {\n *              console.log('Parameter set to a new value.);\n *          }\n *      });\n * }\n */\nexport let RequestAsync = motorcortex.RequestAsync;\n\n/**\n * Returns properties of the parameter in tree, like overwrite or linked, etc.\n * @param {string} name Name of the flag/property.\n * @return {number} Id of the flags. Multiple flags could be encoded in the return value.\n * @see ./msg/motorcortex.proto\n * @example\n * let flags = parameter.info.flags\n * if (flags & motorcortex.getParameterFlag('OVERWRITE_IS_ACTIVE')) {\n *      console.log('Parameter overwrite is active');\n * }\n * if (flag & motorcortex.getParameterFlag('LINK_IS_ACTIVE')) {\n *      console.log('Parameter is linked');\n * }\n */\nexport let getParameterFlag = name => motorcortex.ParameterFlag[name];\n\n/**\n * Returns type of the parameter in tree: input, output or parameter.\n * @param {string} name Name of the type.\n * @return {number} Id of the type\n * @see ./msg/motorcortex.proto\n * @example\n * let type = parameter.info.param_type\n * switch (type) {\n *      case motorcortex.getParameterType('INPUT'):\n *          console.log('Parameter type is an input');\n *      case motorcortex.getParameterType('OUTPUT'):\n *          console.log('Parameter type is an output');\n *      case motorcortex.getParameterType('PARAMETER'):\n *          console.log('Parameter type is a parameter');\n * }\n */\nexport let getParameterType = name => motorcortex.ParameterType[name];\n\n/**\n * Returns type of the parameter permission. Different users/groups may require\n * access to different and/or protected parts of the parameter tree.\n * Permission flags allow fine-tuning access levels of the groups.\n * The Motorcortex permissions structure is similar to that of Unix file permissions.\n * Permissions are represented either in symbolic notation or in octal notation.\n * (Note: User rights are not yet implemented, instead use Group rights)\n *\n * For example:\n *\n * ---------- (0000): no permission\n *\n * -rwx------ (0700): read, write, & execute only for owner (Note: currently\n * not implemented, user group flags instead)\n *\n * -rwxrwx--- (0770): read, write, & execute for owner and group\n * (Note: execute flag is used as a permission to open folders)\n *\n * -rwxrwxr-x (0775): read, write, & execute for owner and group,\n * read & execute for all others.\n *\n * -rwxrwxrwx (0777): full access\n *\n * @param {string} name Name of the permission.\n * @return {number} Id of the permission\n * @see ./msg/motorcortex.proto\n * @example\n * let permissions = parameter.info.permissions\n * switch (type) {\n *      case motorcortex.getParameterType('USER_READ'):\n *          console.log('User has read access');\n *      case motorcortex.getParameterType('USER_WRITE'):\n *          console.log('User has write access');\n *      case motorcortex.getParameterType('USER_EXECUTE'):\n *          console.log('User can open parameter folder');\n * }\n */\nexport let getPermission = name => motorcortex.Permission[name];\n\n/**\n * Returns a status code of the requested operation.\n * @param {string} name Name of status.\n * @return {number} Id of status.\n * @see ./msg/motorcortex.proto\n * @example\n * if (msg.status === motorcortex.getStatusCode('READ_ONLY_MODE')) {\n *      console.log('User is logged-in, read only mode.');\n * }\n */\nexport let getStatusCode = name => motorcortex.StatusCode[name];\n\n/**\n * Returns a user group.\n * @param {string} name Name of the group.\n * @return {number} Id of group.\n * @see ./msg/motorcortex.proto\n * @example\n * if (parameter.info.group_id === motorcortex.getUserGroup('ADMINISTRATOR')) {\n *      console.log('Parameter belongs to administrator user group');\n * }\n */\nexport let getUserGroup = name => motorcortex.UserGroup[name];\n\n/**\n * Returns a data type of the item in the parameter tree.\n * @param {string} name Type name of the parameter (see motorcortex.proto, enum DataType).\n * @return {number} id of the data type.\n * @see ./msg/motorcortex.proto\n * @example\n * let type_id = parameter.info.dataType;\n * if (type_id === motorcortex.getDataType('STRING')) {\n *      console.log('Parameter has type string');\n * }\n */\nexport let getDataType = name => motorcortex.DataType[name];\n\n/**\n * Converts a status and error codes to a string description\n * @param {number} code An error code.\n * @return {string} Error description.\n * @see ./msg/motorcortex.proto\n * @example\n * let login_reply = req.login('operator', 'operator123');\n * login_reply.then(function (reply) { console.log('Success!') }).catch(function (reply) {\n *      console.log('Failed: ' + motorcortex.statusToStr(reply.status));\n * });\n */\nexport let statusToStr = code => motorcortex.statusToStr(code);\n\nexport default motorcortex\n\n\n\n// WEBPACK FOOTER //\n// ./src/motorcortex.js","/*\n * Developer : Alexey Zakharov (alexey.zakharov@vectioneer.com)\n * All rights reserved. Copyright (c) 2015 - 2018 VECTIONEER.\n */\n\n'use strict';\n\nimport {\n    motorcortex_parameter_msg,\n    motorcortex_parameter_list_msg\n} from './message_types';\n\nimport motorcortex from './motorcortex';\nimport {ConnectionState} from './utils'\n\nclass Storage {\n    constructor(storage) {\n        this.__storage = storage;\n    }\n\n    getItem(alias) {\n        return new Promise(function (resolve, reject) {\n            reject();\n        });\n    }\n\n    setItem(alias, value) {\n        return new Promise(function (resolve, reject) {\n            reject();\n        });\n    }\n}\n\nclass LocalStorage extends Storage {\n    constructor(storage) {\n        super(storage);\n    }\n\n    getItem(alias) {\n        let tree = this.__storage.getItem(alias);\n        return new Promise(function (resolve, reject) {\n            if (tree) {\n                resolve(tree);\n            } else {\n                reject('Failed to load a parameter tree from the Local Storage');\n            }\n        });\n    }\n\n    setItem(alias, value) {\n        console.log('setItem');\n        this.__storage.setItem(alias, value);\n        return new Promise(function (resolve, reject) {\n            resolve(value);\n        });\n    }\n}\n\nclass IndexDB extends Storage {\n    constructor(storage) {\n        super(storage);\n    }\n\n    getItem(alias) {\n        let _this = this;\n        return new Promise(function (resolve, reject) {\n            let req = _this.__storage.open(alias, 1);\n            req.onsuccess = function (event) {\n                let db = req.result;\n                let transaction = db.transaction('tree', 'readwrite');\n                let object_store_request = db.transaction('tree', 'readonly').objectStore('tree').get('0');\n                object_store_request.onsuccess = function (event) {\n                    resolve(object_store_request.result);\n                }\n            };\n            req.onupgradeneeded = function (event) {\n                event.target.transaction.abort();\n            }\n            req.onerror = function (event) {\n                reject('Failed to load a parameter tree from the IndexDB');\n            };\n        });\n    }\n\n    setItem(alias, value) {\n        let _this = this;\n        return new Promise(function (resolve, reject) {\n            let req = _this.__storage.open(alias, 1);\n            req.onupgradeneeded = function (event) {\n                let db = req.result;\n                let object_store = db.createObjectStore('tree');\n            };\n            req.onsuccess = function (event) {\n                let db = req.result;\n                let object_store_request = db.transaction('tree', 'readwrite').objectStore('tree').put(value, '0');\n                object_store_request.onsuccess = function (event) {\n                    resolve(value);\n                }\n                object_store_request.onerror = function (event) {\n                    console.log('Failed to save parameter tree in the IndexDB storage');\n                    console.log(event);\n                    // return resolve anyway\n                    resolve(value);\n                }\n            }\n            req.onerror = function (event) {\n                console.log('Failed to access IndexDB storage');\n                // return resolve anyway\n                resolve(value);\n            }\n        });\n    }\n}\n\nclass StorageFactory {\n\n    create() {\n        if (this.getIndexDB()) {\n            console.log('Motorcortex is using Index DB for the cache');\n            return new IndexDB(this.getIndexDB());\n        } else if (typeof localStorage !== 'undefined') {\n            console.log('Motorcortex is using Local Storage for the cache');\n            return new LocalStorage(localStorage);\n        }\n        console.log('Local storage in not supported, chaching disabled');\n        return new Storage('undefined');\n    }\n\n    getIndexDB() {\n        return indexedDB || mozIndexedDB || webkitIndexedDB || msIndexedDB;\n    }\n}\n\n// class represents a parameter tree,\n// parameter tree is loaded by Request.getParameterTree\n// the tree could be received either from the cache or from the server\nexport class ParameterTree {\n    constructor() {\n        this.__parameter_tree = [];\n        this.__parameter_map = {};\n        let storage_factory = new StorageFactory();\n        this.__storage = storage_factory.create();\n    }\n\n    // checks if tree is already loaded\n    hasLoaded() {\n        return !!this.__parameter_tree.length;\n    }\n\n    // saving parameter tree to the local storage\n    save(parameter_tree_msg) {\n        let _this = this;\n        let hash = this.__buildHash(parameter_tree_msg);\n        let paramter_tree_json = this.__mapToJson(parameter_tree_msg);\n        return new Promise(function (resolve, reject) {\n            _this.__storage.setItem(hash, paramter_tree_json)\n                .then(function (paramter_tree_json) {\n                    _this.__initTree(_this.__jsonToMap(paramter_tree_json));\n                    // _this.__parameter_tree = _this.__jsonToMap(paramter_tree_json);\n                    // _this.__parameter_map = {};\n                    // for (let i = 0; i < _this.__parameter_tree.length; ++i) {\n                    //     let info = _this.__parameter_tree[i];\n                    //     _this.__parameter_map[info.path] = info;\n                    // }\n                    resolve(_this.__parameter_tree);\n                })\n                .catch(function (msg) {\n                    // this sould not happen, because Storage always do resolve in the setItem\n                    reject('Failed to save parameter tree in the cache');\n                });\n        });\n    }\n\n    // load parameter tree from the local storage\n    load(hash) {\n        let _this = this;\n        let load_handle = new Promise(function (resolve, reject) {\n            let storage_handle = _this.__storage.getItem(hash)\n                .then(function (paramter_tree_json) {\n                    _this.__parameter_tree = _this.__jsonToMap(paramter_tree_json);\n                    _this.__parameter_map = {};\n                    for (let i = 0; i < _this.__parameter_tree.length; ++i) {\n                        let info = _this.__parameter_tree[i];\n                        _this.__parameter_map[info.path] = info;\n                    }\n                    resolve(_this.__parameter_tree);\n                })\n                .catch(function (msg) {\n                    reject(msg);\n                });\n        });\n        return load_handle;\n    }\n\n    getTree() {\n        return this.__parameter_tree;\n    }\n\n    // returns complete info of the parameter\n    getInfo(parameter_path) {\n        return this.__parameter_map[parameter_path];\n    }\n\n    // returns data type of the parameter\n    getDataType(parameter_path) {\n        let info = this.getInfo(parameter_path);\n        if (info)\n            return info.dataType;\n        return info;\n    }\n\n    __buildHash(parameter_tree) {\n        let hash = 0, chr;\n        for (let i = 0; i < parameter_tree.length; ++i) {\n            let param = parameter_tree[i];\n            let str = param.path;\n            hash += param.dataSize + param.dataType + param.id + param.numberOfElements + param.paramType + param.unit + param.groupId + param.permissions;\n            for (let b = 0; b < str.length; ++b) {\n                chr = str.charCodeAt(b);\n                hash = ((hash << 5) - hash) + chr;\n                hash |= 0;\n            }\n        }\n        return (new Uint32Array([hash]))[0];\n    }\n\n    //interanl\n    __mapToJson(map) {\n        return JSON.stringify(map);\n    }\n\n    __jsonToMap(jsonStr) {\n        return JSON.parse(jsonStr);\n    }\n\n    __initTree(tree) {\n        this.__parameter_tree = tree;\n        for (let i = 0; i < this.__parameter_tree.length; ++i) {\n            let info = this.__parameter_tree[i];\n            this.__parameter_map[info.path] = info;\n        }\n    }\n}\n\n// Req/Rep communication with the server,\n// used for sending commands and\n// requesting parameter values.\n\nconst REP_HEADER = 0x80000000;\n\nclass RequestData {\n    constructor(qeue_handle) {\n\n        let _this = this;\n        this.promise = new Promise(function (resolve, reject) {\n            _this.reject = reject\n            _this.resolve = resolve\n        });\n\n        this._timer_handle = undefined;\n        this._qeue_handle = qeue_handle;\n        this._id = undefined;\n    }\n\n    set(id, timeout_msec) {\n        this._id = id;\n        this._qeue_handle.set(id, this);\n        this.startTimer(timeout_msec);\n    }\n\n    startTimer(timeout_msec) {\n        let _this = this;\n        let _timeout_msec = timeout_msec;\n        _this._timer_handle = setTimeout(function () {\n            _this.error('Failed to get reply in ' + _timeout_msec + ' msec');\n        }, _timeout_msec);\n    }\n\n    reply(decoded_data) {\n        if (this._timer_handle) {\n            clearTimeout(this._timer_handle);\n        }\n        let status = decoded_data.status;\n        if (!(status & motorcortex.getStatusCode('FAILED')) || status === undefined) {\n            this.resolve(decoded_data);\n        } else {\n            this.reject(decoded_data);\n        }\n        let id = this._id;\n        if (id >= 0) {\n            this._qeue_handle.delete(id);\n        }\n    }\n\n    error(error_data) {\n        if (this._timer_handle) {\n            clearTimeout(this._timer_handle);\n        }\n        this.reject(error_data);\n        let id = this._id;\n        if (id >= 0) {\n            this._qeue_handle.delete(id);\n        }\n    }\n}\n\n/**\n * Request/Reply communication is used to send commands to a motorcortex server.\n */\nexport class Request {\n    /**\n     * Creates request object\n     * @constructor\n     * @param {MessageTypes} protobuf_types Reference to an instance of the MessageTypes class.\n     * @example\n     * // Loading messages\n     * let motorcortex_types = new motorcortex.MessageTypes();\n     * let type_load_done = motorcortex_types.load([{\n     *      'proto': 'motorcortex.proto',\n     *      'hash': 'motorcortex_hash.json'}]);\n     * // Creating Request connection\n     * let req = new motorcortex.Request(motorcortex_types);\n     * let req_conn_done = req.connect(`ws://localhost:5558`);\n     */\n    constructor(protobuf_types) {\n        this.protobuf_types = protobuf_types;\n        this.parameter_tree = new ParameterTree(protobuf_types);\n        this.websocket = null;\n        this.request_id = 0;\n        this.replies = new Map();\n        this.request_channel = null;\n    }\n\n    /**\n     * Returns loaded message types.\n     */\n    getMessageTypes() {\n        return this.protobuf_types;\n    }\n\n    onSubscribeMessage(e) {\n        let data = e.data;\n        let id = data.id;\n        let request = data.request;\n        let reply = null;\n\n        switch (request.type) {\n            case 'createGroup':\n                reply = this.createGroup(request.path_list, request.group_alias, request.frq_divider);\n                break;\n            case 'removeGroup':\n                reply = this.removeGroup(request.group_alias);\n                break;\n            default:\n                reply = new Promise(function (resolve, reject) {\n                    reject('Unknown request type:' + request.type);\n                });\n        }\n\n        reply.then(e => {\n            this.request_channel.postMessage({id: id, reply: {type: 'success', result: e}});\n        }).catch(e => {\n            this.request_channel.postMessage({id: id, reply: {type: 'error', result: e}});\n        });\n    }\n\n    registerSubscriber(port) {\n        this.request_channel = port;\n        this.request_channel.onmessage = this.onSubscribeMessage.bind(this);\n        return new Promise(function (resolve, reject) {\n            resolve();\n        });\n    }\n\n    loadedFiles() {\n        return this.protobuf_types.loadedFiles();\n    }\n\n    /**\n     * Actual Request/reply connection state.\n     * @return {number} Returns a connection state.\n     * @example\n     * CONNECTING   0    The connection is not yet open\n     * OPEN         1    The connection is open and ready to communicate\n     * CLOSING      2    The connection is in the process of closing\n     * CLOSED       3    The connection is closed or could not be opened\n     */\n    connectionState() {\n        return this.websocket ? this.websocket.readyState : 3;\n    }\n\n    /**\n     * Opens a request connection.\n     * @param {string} url Motorcortex server URL.\n     * @param {number} timeout_ms Reply timeout in milliseconds.\n     * @param {number} max_request_queue_size Maximum size of the request queue.\n     * @return {Promise<string>} A promise, which completes when connection is ready.\n     * If connection fails, a short error description is passed to the catch method.\n     *\n     * @example\n     * let req = new motorcortex.Request(motorcortex_types);\n     * let req_conn_done = req.connect(`ws://${server}:5558`, 10000, 100);\n     * req_conn_done\n     * .then(function () {\n     *       console.log('Request connection is established');\n     *   })\n     *.catch(function (reason) {\n     *       console.error('Failed to establish connection: ' + reason);\n     *   });\n     */\n    connect(url, timeout_ms, max_request_queue_size) {\n        this.timeout_ms = timeout_ms ? timeout_ms : 1000;\n        this.max_request_qeue_size = max_request_queue_size ? max_request_queue_size : 1000;\n        // initializing and connecting websocket\n        let _this = this;\n        return new Promise(function (resolve, reject) {\n            _this._emptyReplyQueue();\n            _this.websocket = new WebSocket(url, 'rep.sp.nanomsg.org');\n            _this.websocket.binaryType = 'arraybuffer';\n            _this.websocket.onopen = function (e) {\n                resolve();\n            };\n            _this.websocket.onerror = function (e) {\n                _this.websocket.close();\n                reject('Failed to connect to: ' + url);\n            };\n            _this.websocket.onmessage = function (e) {\n                _this._onMessage(e);\n            };\n            _this.websocket.onclose = function (e) {\n                _this.connectionClosed();\n            };\n        });\n    }\n\n    connectionClosed() {\n    }\n\n    /**\n     * Closes connection to the server\n     */\n    close() {\n        if ((this.connectionState() !== ConnectionState.CLOSING) &&\n            (this.connectionState() !== ConnectionState.CLOSED)) {\n            this.websocket.close();\n        }\n        this._emptyReplyQueue();\n    }\n\n    /**\n     * Encodes a data type from MessageTypes to a binary wire type.\n     * @param {Object} A message created by MotorcortexTypes.\n     * @return {Uint8Array} msg A binary array with encoded message.\n     * @example\n     * let motion_script = motorcortex_types.createType('motion_spec.MotionScript', {.id = 1, name = 'Test script'});\n     * motion_script.script = `print('Hello world');`;\n     * let encoded_msg = req.encode(motion_script);\n     * req.send(encoded_msg);\n     */\n    encode(msg) {\n        // building wire message\n\n        // getting type id\n        let type_id = msg.hash;\n        // encoding proto data\n\n        let wire_msg = msg.encode();\n        // allocating array for the wire message, request id size + type id size + data length\n        let request_data = new Uint8Array(4 + 4 + wire_msg.length);\n        // encodeing type id\n        request_data[4] = (type_id) & 0xff;\n        request_data[5] = (type_id >> 8) & 0xff;\n        request_data[6] = (type_id >> 16) & 0xff;\n        request_data[7] = (type_id >> 24) & 0xff;\n        // encoding data\n        request_data.set(wire_msg, 8);\n\n        return request_data;\n    }\n\n    /**\n     * Sends an encoded request to the server\n     * @param {Uint8Array} encoded_msg A binary array with encoded message.\n     * @param {integer} Timeout in milliseconds.\n     * @return {Promise<Object>} Returns a Promise, which completes when reply from the server is received.\n     * If request fails, catch callback is triggered.\n     * @example\n     * let joint2cart = calcJointToCart({\n     *      cartpose: [0, 0, 0, 0, 0, 0],\n     *      jointpose: [0, 0, 1.57, 0, 1.57, 0] });\n     * let reply = req.send(req.encode(joint2cart));\n     * reply.then(function (msg) {\n     *      console.log('Got reply: ' + JSON.stringify(msg));\n     * }).catch(function (msg) {\n     *      console.error('Failed: ' + JSON.stringify(msg));\n     * });\n     */\n    send(encoded_msg, timeout_ms) {\n        if (!timeout_ms) {\n            timeout_ms = this.timeout_ms;\n        }\n        let request_data = new RequestData(this.replies);\n        if (this.replies.size < this.max_request_qeue_size) {\n            let con_state = this.connectionState();\n            if (con_state == ConnectionState.OPEN) {\n                // getting request id\n                let req_id = this._incReqId();\n                // encoding request id\n                encoded_msg[0] = REP_HEADER + (req_id & 0x7f000000) >> 24;\n                // encoding request id\n                encoded_msg[1] = (req_id & 0x00ff0000) >> 16;\n                encoded_msg[2] = (req_id & 0x0000ff00) >> 8;\n                encoded_msg[3] = (req_id & 0x000000ff);\n                // adding promise with request id to the dict\n                request_data.set(req_id, timeout_ms);\n                this.websocket.send(encoded_msg);\n            } else {\n                request_data.error('Failed to send request, connection to the server is not ready');\n            }\n        } else {\n            request_data.error('Failed to send request, request queue if full');\n        }\n\n        return request_data.promise;\n    }\n\n    /**\n     * Sends a login request to the server\n     * @param {string} login User login.\n     * @param {string} password User password.\n     * @return {Promise<StatusMsg>} Returns a Promise, which resolves if login is successful and fails otherwise.\n     * Returned message has a status code, which indicates a status of the login.\n     * @see motorcortex.proto, StatusMsg, StatusCode\n     * @example\n     * let login_reply = req.login('operator', 'god123');\n     * login_reply.then(function (reply) {\n     *      console.log('Logged-in successful: ' + motorcortex.statusToStr(reply.status));\n     * }).catch( function(reply) {\n     *      console.log('Failed to login: ' + motorcortex.statusToStr(reply.status));\n     * });\n     */\n    login(login, password) {\n        return this.send(this.__encodeLogin(login, password));\n    }\n\n    __encodeLogin(login, password) {\n        return this.encode(this.protobuf_types.createType('motorcortex.LoginMsg', {\n            login: login,\n            password: password\n        }));\n    }\n\n    /**\n     *\n     *\n     *\n     *\n     *\n     */\n    getSessionTokenMsg() {\n        let get_session_token_msg = this.protobuf_types.createType('motorcortex.GetSessionTokenMsg');\n        return this.send(this.encode(get_session_token_msg));\n    }\n\n    /**\n     *\n     *\n     *\n     *\n     *\n     */\n    restoreSessionMsg(token) {\n        let restore_session_msg = this.protobuf_types.createType('motorcortex.RestoreSessionMsg', {\n            token: token\n        });\n        return this.send(this.encode(restore_session_msg));\n    }\n\n    /**\n     * Sends logout request to the server\n     * @return {Promise<StatusMsg>} Returns a Promise, which resolves if login is successful and fails otherwise.\n     * @see motorcortex.proto, StatusMsg, StatusCode\n     * @example\n     * let logout_reply = req.logout();\n     * logout_reply.then(function (reply) {\n     *      console.log('Logged-out successful: ' + motorcortex.statusToStr(reply.status));\n     * }).catch( function(reply) {\n     *      console.log('Failed to logout: ' + motorcortex.statusToStr(reply.status));\n     * });\n     */\n    logout() {\n        let logout_msg = this.protobuf_types.createType('motorcortex.LogoutMsg');\n        return this.send(this.encode(logout_msg));\n    }\n\n    /**\n     * Requests a parameter tree from the cache or from the server\n     * @param {integer} Timeout in milliseconds.\n     * @return {Promise<ParameterTreeMsg>} Returns a Promise, which resolves when parameter tree is received or fails\n     * otherwise. ParameterTreeMsg message has a status files to check the status of the operation.\n     * @see motorcortex.proto, ParameterTreeMsg, StatusCode\n     * @example\n     * let param_tree_reply = req.getParameterTree();\n     * param_tree_reply.then(function (param_tree) {\n     *      console.log('Got parameter tree msg: ' + JSON.stringify(param_tree));\n     * }).catch( function(param_tree) {\n     *      console.log('Failed to get parameter tree: ' + motorcortex.statusToStr(param_tree.status));\n     * });\n     */\n    getParameterTree(timeout_msec) {\n        let _this = this;\n        // first request the cache of the parameter tree from the server\n        return new Promise(function (resolve, reject) {\n            _this.getParameterTreeHash()\n                .then(function (msg) {\n                    // if cache from the server corresponds to the hash of the local cached version,\n                    // use local version\n                    _this.parameter_tree.load(msg.hash)\n                    // found tree in the cache\n                        .then(function (param_tree) {\n                            console.log('Loaded parameter tree from the cache');\n                            // returns an instance of the Class ParameterTree\n                            resolve(_this.parameter_tree);\n                        })\n                        // did not find tree in the cache, request new tree\n                        .catch(function (msg) {\n                            console.log('Parameter tree was not found in the cache, loading new from the server')\n                            // getting and instantiating data type from the loaded dict\n                            let param_tree_msg = _this.protobuf_types.createType('motorcortex.GetParameterTreeMsg');\n                            // send request\n                            _this.send(_this.encode(param_tree_msg), timeout_msec)\n                                .then(function (msg) {\n                                    // if reply received, save the tree the cache\n                                    _this.parameter_tree.save(msg.params, _this.protobuf_types)\n                                        .then(function (param_tree) {\n                                            // return the tree to the user\n                                            console.log('Loaded new parameter tree from the server');\n                                            // returns an instance of the Class ParameterTree\n                                            resolve(_this.parameter_tree);\n                                        })\n                                        .catch(function (msg) {\n                                            // failed to save the tree\n                                            console.log('Failed to save parameter tree to the cache');\n                                            reject(msg);\n                                        });\n                                }).catch(function (msg) {\n                                console.log('Failed to request parameter tree from the server');\n                                console.log(msg);\n                                reject(msg);\n                            });\n                        });\n                }).catch(function (msg) {\n                console.log('Failed to request parameter tree cache');\n                reject(msg);\n            });\n        });\n    }\n\n    /**\n     * Requests a parameter tree hash from the server\n     * @return {Promise<ParameterTreeHashMsg>} Returns a Promise, which resolves when tree hash message is received or\n     * fails otherwise.\n     * @see motorcortex.proto, ParameterTreeHashMsg, StatusCode\n     * @example\n     * let tree_hash_reply = req.getParameterTreeHash();\n     * tree_hash_reply.then(function (tree_hash) {\n     *      console.log('Got parameter tree hash: ' + tree_hash.hash);\n     * }).catch( function(tree_hash) {\n     *      console.log('Failed to get tree hash: ' + motorcortex.statusToStr(tree_hash.status));\n     * });\n     *\n     */\n    getParameterTreeHash() {\n        // getting and instantiating data type from the loaded dict\n        let param_tree_hash_msg = this.protobuf_types.createType('motorcortex.GetParameterTreeHashMsg');\n        // encoding and sending data\n        return this.send(this.encode(param_tree_hash_msg));\n    }\n\n    /**\n     * Requests a parameter with full information and value from the server\n     * @param {string} path Parameter path in the tree.\n     * @return {Promise<ParameterMsg>} Returns a Promise, which resolves when parameter message is successfully obtained,\n     * fails otherwise.\n     * @see motorcortex.proto, ParameterMsg, StatusCode\n     * @example\n     * let param_reply = req.getParameter('root/Control/actualActuatorPositions');\n     * param_reply.then(function (param) {\n     *      console.log('Got parameter: ' + JSON.stringify(param));\n     * }).catch( function(param) {\n     *      console.log('Failed to get parameter: ' + motorcortex.statusToStr(param.status));\n     * });\n     */\n    getParameter(path) {\n        // encoding and sending data\n        return this.send(this.encode(this._buildGetParameterMsg(path)));\n    }\n\n    /**\n     * Sets new value to a parameter with given path.\n     * @param {string} path Parameter path in the tree.\n     * @param {any} value New parameter value.\n     * @param {{offset, length}=} options Various options to parametrize Set operation. For example 'offset' and\n     * 'length' could be used to set an element offset and number of the elements to update in the destination array.\n     * @return {Promise<StatusMsg>} Returns a Promise, which resolves when parameter value is updated or fails otherwise.\n     * @see motorcortex.proto, StatusMsg, StatusCode\n     * @example\n     * // updates a value of a simple parameter\n     * let reply_handle = req.setParameter('root/Motorcontroller/actualmode', 2);\n     * reply_handle.catch( function(reply) {\n     *      console.log('Failed to set parameter: ' + motorcortex.statusToStr(reply.status));\n     * });\n     *\n     * // updates an array\n     * req.setParameter('root/Control/dummyDoubleArray6', [1.1,1.2,1.3,1.4,1.5,1.6]);\n     * // updates single element of array with the offset 2 (index 3)\n     * req.setParameter('root/Control/dummyDoubleArray6', 1.0, {offset: 2});\n     * // updates 2 elements of the arrays with the offset 4\n     * req.setParameter('root/Control/dummyDoubleArray6', [10.0, 20.0], {offset: 4, length: 2});\n     */\n    setParameter(path, value, options = {}) {\n        // encoding and sending parameter message\n        return this.send(this.encode(this._buildSetParameterMsg(path, value, options)));\n    }\n\n\n    /**\n     * Overwrites actual value of the parameter and depending on the flag forces this value to stay active.\n     * This method of setting values is useful during debug and installation process, it is not recommended to use\n     * this method during normal operation.\n     * @param {string} path Parameter path in the tree.\n     * @param {any} value New parameter value.\n     * @param {bool=} force_activate Forces new value to stay active. By default is set to 'false'.\n     * @param {{offset, length}=} options Various options to parametrize Set operation. For example 'offset' and\n     * 'length' could be used to set an element offset and number of the elements to update in the destination array.\n     * @return {Promise<StatusMsg>} Returns a Promise, which resolves when parameter value is updated or fails otherwise.\n     * @see motorcortex.proto, StatusMsg, StatusCode\n     * @example\n     * // overwrite and force to stay active a value of a simple parameter\n     * let reply_handle = req.overwriteParameter('root/Motorcontroller/actualmode', 2, true);\n     * reply_handle.catch( function(reply) {\n     *      console.log('Failed to set parameter: ' + motorcortex.statusToStr(reply.status));\n     * });\n     *\n     * // overwrite and force to stay active an array\n     * req.overwriteParameter('root/Control/dummyDoubleArray6', [1.1,1.2,1.3,1.4,1.5,1.6], true);\n     * // overwrite and release force of a single element of the array with an offset 2 (index 3)\n     * req.overwriteParameter('root/Control/dummyDoubleArray6', 1.0, {offset: 2});\n     * // overwrite and force to stay active 2 elements of the arrays with an offset 4\n     * req.overwriteParameter('root/Control/dummyDoubleArray6', [10.0, 20.0], {offset: 4, length: 2});\n     */\n    overwriteParameter(path, value, force_activate = false, options = {}) {\n        //encode and sending overwrite parameter value\n        return this.send(this.encode(this._buildOverwriteParameterMsg(path, value, force_activate, options)));\n    }\n\n    /**\n     * Deactivate overwrite operation of the parameter.\n     * @param {string} path Path to a parameter in the tree.\n     * @return {Promise<StatusMsg>} Returns a Promise, which resolves when parameter overwrite is deactivated or fails\n     * otherwise.\n     * @see motorcortex.proto, StatusMsg, StatusCode\n     * @example\n     * let reply_handle = releaseParameter('root/Motorcontroller/actualmode');\n     * reply_handle.catch( function(reply) {\n     *      console.log('Failed to release overwrite of the parameter: ' + motorcortex.statusToStr(reply.status));\n     * });\n     */\n    releaseParameter(path) {\n        let release_param_msg = this.protobuf_types.createType('motorcortex.ReleaseParameterMsg');\n        release_param_msg.path = path;\n\n        return this.send(this.encode(release_param_msg));\n    }\n\n    /**\n     * Sets new values to a parameter list.\n     * @param {Array<{path,value,options}>} param_list A list of the parameters to update values.\n     * @return {Promise<StatusMsg>} Returns a Promise, which resolves when parameters from the list are updated,\n     * otherwise fails.\n     * @see setParameter, motorcortex.proto, StatusMsg, StatusCode\n     * @example\n     * let reply_handle = req.setParameterList([{path: 'root/Motorcontroller/actualmode', value: 2},\n     *      {path: 'root/Control/dummyDoubleArray6', value: [1.1,1.2,1.3,1.4,1.5,1.6]},\n     *      {path: 'root/Control/dummyDoubleArray6', value: [10.0, 20.0], options:  {offset: 4, length: 2}}]);\n     * reply_handle.catch( function(reply) {\n     *      console.log('Failed to set list of parameter: ' + motorcortex.statusToStr(reply.status));\n     * });\n     */\n    setParameterList(param_list) {\n        // instantiating message type\n        let set_param_list_msg = this.protobuf_types.createType('motorcortex.SetParameterListMsg');\n        // filling with sub messages\n        for (let i = 0; i < param_list.length; ++i) {\n            let param = param_list[i];\n            set_param_list_msg.params.push(this._buildSetParameterMsg(param['path'], param['value'], param['options']));\n        }\n\n        // encoding and sending data\n        return this.send(this.encode(set_param_list_msg));\n    }\n\n    /**\n     * Get info and values of requested parameters.\n     * @param {Array<string>} path_list List of parameter paths.\n     * @param {number} timeout_ms Reply timeout in milliseconds.\n     * @return {Promise<StatusMsg>} Returns a Promise, which resolves when list of the parameter values is received,\n     * otherwise fails.\n     * @see getParameter, motorcortex.proto, StatusMsg, StatusCode\n     * @example\n     * let reply_handle = req.getParameterList(['root/Motorcontroller/actualmode, 'root/Control/dummyDoubleArray6']);\n     * reply_handle.then( function(param_list) {\n     *      console.log('Got parameter list: ' + JSON.stringify(param_list));\n     * }).catch( function(param_list) {\n     *      console.log('Failed to get parameter list: ' + motorcortex.statusToStr(param_list.status));\n     * });\n     */\n    getParameterList(path_list, timeout_ms) {\n        // instantiating message type\n        let get_param_list_msg = this.protobuf_types.createType('motorcortex.GetParameterListMsg');\n        // filling with sub messages\n        for (let i = 0; i < path_list.length; ++i) {\n            let path = path_list[i];\n            get_param_list_msg.params.push(this._buildGetParameterMsg(path));\n        }\n        // encoding and sending data\n        return this.send(this.encode(get_param_list_msg), timeout_ms);\n    }\n\n    /**\n     * Create a subscription group for a list of the parameters. This method is used inside Subscription class, use\n     * subscription class instead.\n     * @param {Array<string>} path_list List of the parameters to subscribe to.\n     * @param {string} group_alias Name of the group.\n     * @param {number=} frq_divider Frequency divider is downscaling factor of the group publish rate.\n     * Default value is 1, every cycle of the publisher.\n     * @return {Promise<GroupStatusMsg>} Returns a Promise, which resolves when subscription is complete, fails\n     * otherwise.\n     * @see Subscription, motorcortex.proto, GroupStatusMsg, StatusCode\n     * @example\n     * // creates a group with two signals, which is published every 10th cycle.\n     * let group_handle = req.createGroup(['root/Motorcontroller/actualmode, 'root/Control/dummyDoubleArray6'],\n     *      'myGroup1', 10);\n     * reply_handle.then( function(group) {\n     *      console.log('Group layout: ' + JSON.stringify(group));\n     * }).catch( function(group) {\n     *      console.log('Failed to create group: ' + motorcortex.statusToStr(group.status));\n     * });\n     */\n    createGroup(path_list, group_alias, frq_divider) {\n        // instantiating message type\n        let create_group_msg = this.protobuf_types.createType('motorcortex.CreateGroupMsg');\n        create_group_msg.alias = group_alias ? group_alias : 'undefined';\n        create_group_msg.paths = [].concat(path_list);\n        create_group_msg.frqDivider = frq_divider > 1 ? frq_divider : 1;\n\n        // encoding and sending data\n        let handle = this.send(this.encode(create_group_msg));\n        handle.group_alias = create_group_msg.alias;\n\n        return handle;\n    }\n\n    /**\n     * Unsubscribes from the group. This method is used inside Subscription class, use\n     * subscription class instead.\n     * @param {string} group_alias Name of the group to unsubscribe from.\n     * @return {Promise<StatusMsg>} Returns a Promise, which resolves when the unsubscribe operation is complete,\n     * fails otherwise.\n     * @see motorcortex.proto, StatusMsg, StatusCode\n     * @example\n     * let group_handle = req.removeGroup('myGroup1');\n     * group_handle.catch( function(group) {\n     *      console.log('Failed to remove group: ' + motorcortex.statusToStr(group.status));\n     * });\n     */\n    removeGroup(group_alias) {\n        // instantiating message type\n        let remove_group_msg = this.protobuf_types.createType('motorcortex.RemoveGroupMsg', {alias: group_alias});\n\n        // encoding and sending data\n        return this.send(this.encode(remove_group_msg));\n    }\n\n    /**\n     * Request a server to save a parameter tree in the file.\n     * @param {string} file_name A file name where to save actual state of the parameter tree\n     * @return {Promise<StatusMsg>} Returns a Promise, which resolves when save operation is completed,\n     * fails otherwise.\n     * @see motorcortex.proto, StatusMsg, StatusCode\n     * @example\n     * let reply = req.save('controls.xml');\n     * reply.catch( function(save) {\n     *      console.log('Failed to save parameters:' + motorcortex.statusToStr(save.status));\n     * });\n     */\n    save(file_name) {\n        // instantiating message type\n        let save_msg = this.protobuf_types.createType('motorcortex.SaveMsg', {\n            path: '',\n            fileName: file_name\n        });\n\n        // encoding and sending data\n        return this.send(this.encode(save_msg));\n    }\n\n    /**\n     * Request a server to load value from the file to the parameter tree.\n     * @param {string} file_name A file name from which to load values to the parameter tree.\n     * @return {Promise<StatusMsg>} Returns a Promise, which resolves when load operation is complete,\n     * fails otherwise.\n     * @see motorcortex.proto, StatusMsg, StatusCode\n     * @example\n     * let reply = req.load('controls.xml');\n     * reply.catch( function(load) {\n     *      console.log('Failed to load parameters:' + motorcortex.statusToStr(load.status));\n     * });\n     */\n    load(file_name) {\n        // instantiating message type\n        let load_msg = this.protobuf_types.createType('motorcortex.LoadMsg', {\n            path: '',\n            fileName: file_name\n        });\n\n        // encoding and sending data\n        return this.send(this.encode(load_msg));\n    }\n\n    /**********internal methods**************/\n\n    _onMessage(e) {\n        let data = e.data;\n        // receiving reply message, first four bytes is reply id and protocol id\n        let msg = new DataView(data);\n        let reply_id = msg.getUint32(0);\n        // checking if protocol id is correct\n        if (reply_id & REP_HEADER) {\n            reply_id = reply_id - REP_HEADER;\n            // requesting resolve method from replies dict\n            let reply = this.replies.get(reply_id);\n            if (reply) {\n                // decoding type id, offset is 4 bytes, size is 4 bytes (1 - uint32)\n                let type_id = msg.getUint32(4, true);\n                // getting instance of the message type by hash\n                let message_type = this.protobuf_types.getTypeByHash(type_id);\n                if (message_type) {\n                    let decoded_msg = message_type.decode(new Uint8Array(data, 8));\n                    // starus code is requered to decide what to call: resolve or reject.\n                    // few messges still don't have this field, adding a dummy field to prevent an error\n                    // depending on message type, perform additional operation to decode fo the value\n                    switch (message_type.decode_value) {\n                        case motorcortex_parameter_msg:\n                            decoded_msg.value = this.protobuf_types.decodeValue(decoded_msg);\n                            break;\n                        case motorcortex_parameter_list_msg:\n                            for (let i = 0; i < decoded_msg.params.length; i++) {\n                                let msg = decoded_msg.params[i];\n                                msg.value = this.protobuf_types.decodeValue(msg);\n                            }\n                            break;\n                        default:\n                            break;\n                    }\n                    // decode wire message into data type instance, with offset 8 bytes\n                    // calling resovle method\n                    reply.reply(decoded_msg);\n                } else {\n                    console.log('Failed to decode hash: ', type_id.toString(16));\n                }\n            } else {\n                console.log('Got message with unknown reply id');\n            }\n        } else {\n            console.log('Req/Rep got message with unknown control info format');\n        }\n    }\n\n    _incReqId() {\n        return this.request_id++;\n    }\n\n    _buildSetPayload(path, value, options) {\n        // encoding parameter value\n        let payload = {};\n        let error = null;\n        payload.path = path;\n        const offset = options.offset ? options.offset : 0;\n        const length = options.length ? options.length : 0;\n        if ((offset + length) > 0) {\n            payload.offset = {type: 1, offset: offset, length: length};\n        }\n\n        if (value.encode) {\n            payload.value = value.encode();\n        } else {\n            // if typename is not set, checking cached ParameterTree for the type\n            let param_value = null;\n            const type_name = options.type_name;\n            if (!type_name) {\n                let type_id = this.parameter_tree.getDataType(path);\n                if (type_id) {\n                    param_value = this.protobuf_types.getTypeByHash(type_id);\n                } else {\n                    error = 'Failed to resolve path:' + path;\n                }\n            } else {\n                param_value = this.protobuf_types.createType(type_name);\n            }\n            if (param_value) {\n                payload.value = param_value.encode(value);\n            }\n        }\n\n        return [payload, error];\n    }\n\n    _buildOverwriteParameterMsg(path, value, activate, options) {\n        // prepare payload\n        let [payload, error] = this._buildSetPayload(path, value, options);\n        if (error) {\n            return new Promise(function (resolve, reject) {\n                reject(error);\n            })\n        }\n\n        payload.activate = activate;\n        // creating and fill type instance\n        return this.protobuf_types.createType('motorcortex.OverwriteParameterMsg', payload);\n    }\n\n    _buildSetParameterMsg(path, value, options) {\n        // prepare payload\n        let [payload, error] = this._buildSetPayload(path, value, options);\n        if (error) {\n            return new Promise(function (resolve, reject) {\n                reject(error);\n            })\n        }\n\n        // creating and fill type instance\n        return this.protobuf_types.createType('motorcortex.SetParameterMsg', payload);\n    }\n\n    _buildGetParameterMsg(path) {\n        // getting and instantiating data type from the loaded dict\n        let get_param_msg = this.protobuf_types.createType('motorcortex.GetParameterMsg');\n        get_param_msg.path = path;\n\n        return get_param_msg;\n    }\n\n    _emptyReplyQueue() {\n        for (let key of this.replies.keys()) {\n            this.replies.get(key).error('Failed to get request, connection closed');\n        }\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/request.js","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\r\n\r\nvar Field = require(\"./field\"),\r\n    util  = require(\"./util\");\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\r\nfunction OneOf(name, fieldNames, options, comment) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore if */\r\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof as an array for iteration.\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\r\n\r\n    /**\r\n     * Comment for this field.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n}\r\n\r\n/**\r\n * Oneof descriptor.\r\n * @interface IOneOf\r\n * @property {Array.<string>} oneof Oneof field names\r\n * @property {Object.<string,*>} [options] Oneof options\r\n */\r\n\r\n/**\r\n * Constructs a oneof from a oneof descriptor.\r\n * @param {string} name Oneof name\r\n * @param {IOneOf} json Oneof descriptor\r\n * @returns {OneOf} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Converts this oneof to a oneof descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IOneOf} Oneof descriptor\r\n */\r\nOneOf.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\" , this.options,\r\n        \"oneof\"   , this.oneof,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\r\n            if (!oneof.fieldsArray[i].parent)\r\n                oneof.parent.add(oneof.fieldsArray[i]);\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.add = function add(field) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    if (field.parent && field.parent !== this.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this.fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this.fieldsArray.indexOf(field);\r\n\r\n    /* istanbul ignore if */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this.fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n\r\n    /* istanbul ignore else */\r\n    if (index > -1) // theoretical\r\n        this.oneof.splice(index, 1);\r\n\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    for (var i = 0; i < this.oneof.length; ++i) {\r\n        var field = parent.get(this.oneof[i]);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self.fieldsArray.push(field);\r\n        }\r\n    }\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onRemove = function onRemove(parent) {\r\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\r\n        if ((field = this.fieldsArray[i]).parent)\r\n            field.parent.remove(field);\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\r\n * @typedef OneOfDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} oneofName OneOf name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * OneOf decorator (TypeScript).\r\n * @function\r\n * @param {...string} fieldNames Field names\r\n * @returns {OneOfDecorator} Decorator function\r\n * @template T extends string\r\n */\r\nOneOf.d = function decorateOneOf() {\r\n    var fieldNames = new Array(arguments.length),\r\n        index = 0;\r\n    while (index < arguments.length)\r\n        fieldNames[index] = arguments[index++];\r\n    return function oneOfDecorator(prototype, oneofName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new OneOf(oneofName, fieldNames));\r\n        Object.defineProperty(prototype, oneofName, {\r\n            get: util.oneOfGetter(fieldNames),\r\n            set: util.oneOfSetter(fieldNames)\r\n        });\r\n    };\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/oneof.js\n// module id = 11\n// module chunks = 0","/*\n * Developer : Alexey Zakharov (alexey.zakharov@vectioneer.com)\n * All rights reserved. Copyright (c) 2015 - 2018 VECTIONEER.\n */\n\n'use strict';\n\nimport {Request} from './request';\nimport motorcortex from './motorcortex';\nimport {ConnectionState} from './utils'\nimport long from 'long';\n\n\nconst NSEC_IN_SEC = 1000000000;\n\n/**\n * Parameter value with a timestamp\n */\nexport class Parameter {\n\n    constructor(timestamp, value) {\n        this.timestamp = timestamp;\n        this.value = value;\n    }\n\n    /**\n     * Gets a parameter timestamp and a value\n     * @returns {{Timestamp, DataType}} Returns an object with parameter timestamp and value.\n     * @see motorcortex.proto DataType\n     * @example\n     * // Reads latest update from the subscription\n     * let parameters = subscription.read();\n     * // Iterates through all the parameters\n     * for (let parameter of parameters) {\n     *      // Gets time and value\n     *      let time_value_pair = parameter.get();\n     *      console.log('Parameter timestamp: ' + time_value_pair.timestamp + ' value: ', time_value_pair.value);\n     * }\n     */\n    get() {\n        return {timestamp: this.timestamp, value: this.value};\n    }\n\n    /**\n     * Gets parameter timestamp\n     * @returns {Timestamp} Returns parameter timestamp.\n     * @example\n     * // Reads latest update from the subscription\n     * let parameters = subscription.read();\n     * // Iterates through all the parameters\n     * for (let parameter of parameters) {\n     *      // Gets time\n     *      console.log('Parameter timestamp: ' + parameter.getTimestamp());\n     * }\n     */\n    getTimestamp() {\n        return this.timestamp;\n    }\n\n    /**\n     * Gets parameter value\n     * @returns {DataType} Returns parameter value.\n     * @see motorcortex.proto DataType\n     * @example\n     * Reads latest update from the subscription\n     * let parameters = subscription.read();\n     * // Iterates through all the parameters\n     * for (let parameter of parameters) {\n     *      // Gets value\n     *      console.log('Parameter value: ', parameter.getValue());\n     * }\n     */\n    getValue() {\n        return this.value;\n    }\n\n    /**\n     * Gets parameter as a string\n     * @returns {string} String formatted as 'timestamp: parameter'.\n     * @example\n     * Reads latest update from the subscription\n     * let parameters = subscription.read();\n     * // Iterates through all the parameters\n     * for (let parameter of parameters) {\n     *      // Gets value\n     *      console.log('Parameter value: ', parameter.toString());\n     * }\n     */\n    toString() {\n        return this.timestamp.toString() + ': ' + this.value.toString();\n    }\n}\n\n/**\n * Subscription class represents an active subscription group. It returns latest values and timestamps of the\n * group parameters. Subscription class could be used as an observer, which notifies on every update or could be\n * used as polling.\n */\nexport class Subscription {\n\n    constructor(group_alias, protobuf_types) {\n        let _this = this;\n        _this.__info = null;\n        _this.__values = null;\n        _this.__layout = null;\n        _this.__decoder = null;\n        _this.__group_alias = group_alias;\n        _this.__protobuf_types = protobuf_types;\n        _this.__protobuf_datatypes = _this.__protobuf_types.types_by_name['motorcortex.DataType'].values;\n        _this.__observer = null;\n        _this.__is_complete = false;\n        _this.__promise = new Promise(function (resolve, reject) {\n            _this.__resolve = resolve;\n            _this.__reject = reject;\n        });\n    }\n\n    /**\n     * Returns subscription identifier\n     * @return {number}\n     */\n    id() {\n        return this.__info.id\n    }\n\n    /**\n     * Return group alias\n     * @return {string}\n     */\n    alias() {\n        return this.__group_alias\n    }\n\n    /**\n     * This callback is resolved when subscription is ready or failed.\n     * @callback SubscriptionClb\n     * @param {GroupStatusMsg} status A status and layout of the subscribe request.\n     */\n\n    /**\n     * Returns a Promise which is resolved when subscription request is complete.\n     * @param {SubscriptionClb} subscription_complete A callback which is resolved when subscription is complete.\n     * @return {Promise<GroupStatusMsg>}\n     * @see motorcortex.proto GroupStatusMsg\n     * @example\n     * let data_sub = sub.subscribe([\"root/Control/jointReferenceGenerator/enable\",\n     *      \"root/Control/jointReferenceGenerator/signalGenerator01/amplitude\",\n     *      \"root/Control/jointReferenceGenerator/signalGenerator02/amplitude\"], \"group1\");\n     *\n     * data_sub.then(function (subscription) {\n     *      console.log(\"Subscribed: \" + subscription);\n     * }).catch(function (subscription) {\n     *      console.log(\"Subscription failed: \" + + motorcortex.statusToStr(subscription.status));\n     * });\n     */\n    then(subscription_complete) {\n        this.__promise.then(subscription_complete);\n        return this;\n    }\n\n    /**\n     * Returns a Promise which is resolved when subscription request fails.\n     * @param {SubscriptionClb} subscription_failed A callback which is resolved when subscription fails.\n     * @return {Promise<GroupStatusMsg>}\n     * @see motorcortex.proto GroupStatusMsg\n     * @example\n     * let data_sub = sub.subscribe([\"root/Control/jointReferenceGenerator/enable\",\n     *      \"root/Control/jointReferenceGenerator/signalGenerator01/amplitude\",\n     *      \"root/Control/jointReferenceGenerator/signalGenerator02/amplitude\"], \"group1\");\n     *\n     * data_sub.then(function (subscription) {\n     *      console.log(\"Subscribed: \" + subscription);\n     * }).catch(function (subscription) {\n     *      console.log(\"Subscription failed: \" + + motorcortex.statusToStr(subscription.status));\n     * });\n     */\n    catch(subscription_failed) {\n        this.__promise.catch(subscription_failed);\n        return this;\n    }\n\n    /**\n     * Reads the latest values of the parameters in the group\n     * @return {Array<Parameter>} Returns a list of parameters.\n     */\n    read() {\n        return this.__is_complete ? this.__values.slice() : null;\n    }\n\n    /**\n     * Gets a layout of the group.\n     * @return {Array<string>} Returns ordered list of the parameters in the group.\n     * @example\n     * let data_sub = sub.subscribe([\"root/Control/jointReferenceGenerator/enable\",\n     *      \"root/Control/jointReferenceGenerator/signalGenerator01/amplitude\",\n     *      \"root/Control/jointReferenceGenerator/signalGenerator02/amplitude\"], \"group1\");\n     *\n     * data_sub.then(function (subscription) {\n     *      let group_layout = data_sub.layout();\n     *      console.log(\"Subscribed for: \" + group_layout.toString());\n     * });\n     */\n    layout() {\n        return this.__is_complete ? this.__layout : null\n    }\n\n    /**\n     * This callback notifies when subscription is updated with new values.\n     * @callback SubscriptionUpdateClb\n     * @param {Array<Parameter>} parameters A list of values and timestamps, ordered according to the group layout.\n     */\n\n    /**\n     * Sets an observer, which is notified on every group update.\n     * @param {SubscriptionUpdateClb} observer A callback to notify when new values are available.\n     * @example\n     * let data_sub = sub.subscribe([\"root/Control/jointReferenceGenerator/enable\",\n     *      \"root/Control/jointReferenceGenerator/signalGenerator01/amplitude\",\n     *      \"root/Control/jointReferenceGenerator/signalGenerator02/amplitude\"], \"group1\");\n     *\n     * data_sub.then(function (subscription) {\n     *      data_sub.notify(function (parameters) {\n     *          console.log('Received group update');\n     *          let layout = data_sub.layout();\n     *          for(let i = 0; i < layout.length; i++) {\n     *              console.log(\"Parameter: \" + layout[i] + \" value: \" + parameters[i].toString());\n     *          }\n     *      }\n     * });\n     */\n    notify(observer) {\n        this.__observer = observer;\n    }\n\n    /**********internal methods**************/\n\n    _complete(msg, param_list) {\n        this.__values = [];\n        this.__layout = [];\n        this.__decoder = [];\n        if (msg.status == motorcortex.getStatusCode('OK')) {\n            this.__info = msg;\n            let params = this.__info.params;\n            for (let i = 0; i < params.length; i++) {\n                this.__values.push(new Parameter(0, new Array(params[i].info.numberOfElements)));\n                this.__layout.push(params[i].info.path);\n                let data_type = params[i].info.dataType;\n                this.__decoder.push(this.__protobuf_types.getTypeByHash(data_type));\n            }\n            this.__is_complete = true;\n            this.__resolve(msg);\n        } else {\n            this.__reject('Failed to subscribe to the group name: ' + this.__group_alias + ', parameter path is wrong: ' + param_list.toString());\n        }\n    }\n\n    _update(msg, header_offset) {\n        let _this = this;\n        //  setTimeout(function() {\n        for (let i = 0; i < _this.__info.params.length; i++) {\n            // ref to the parameter info\n            let param = _this.__info.params[i];\n            // need to know parameter offset and size in the message\n            let offset = param.offset + header_offset;\n            let size = param.size;\n\n            if ((offset + size) <= msg.byteLength) {\n\n                // first decode timestamp, which is 16 bytes\n                // first 8 bytes is sec\n                let msg_data_view = new DataView(msg, offset);\n                let sec_val = new long(msg_data_view.getUint32(0, true), msg_data_view.getUint32(4, true), true);\n                // next 8 bytes is nsec\n                let nsec_val = new long(msg_data_view.getUint32(8, true), msg_data_view.getUint32(12, true), true);\n                // create time data structure\n                let time = sec_val.toNumber() + nsec_val.toNumber() / NSEC_IN_SEC;\n                let number_of_elements = param.info.numberOfElements;\n                let type_id = param.info.dataType;\n                let value;\n                const TIMESTAMP_HEADER = 16;\n                switch (type_id) {\n                    // user types\n                    case _this.__protobuf_datatypes['USER_TYPE']:\n                        value = new Uint8Array(msg, offset + 16);\n                        break;\n                    // c-strings\n                    case _this.__protobuf_datatypes['STRING']:\n                        let byte_view = new Uint8Array(msg, offset + 16);\n                        value = '';\n                        let o = 0;\n                        while ((byte_view[o] != 0) && (o < byte_view.byteLength)) {\n                            value += String.fromCharCode(byte_view[o++]);\n                        }\n                        break;\n                    default:\n                        let decoder = _this.__decoder[i];\n                        value = decoder.decode(new DataView(msg, offset + TIMESTAMP_HEADER), number_of_elements);\n                }\n\n                _this.__values[i] = new Parameter(time, value);\n            }\n        }\n\n        // updating observers\n        if (_this.__observer) {\n            _this.__observer(_this.__values.slice());\n        }\n    }\n\n    _failed(msg) {\n        this.__reject(msg);\n    }\n\n    _getObserver() {\n        return this.__observer;\n    }\n}\n\n/**\n * Subscribe class is used to receive continuous parameter updates from motorcortex server.\n * Subscribe class simplifies creating and removing subscription groups.\n */\nexport class Subscribe {\n    /**\n     * Creates subscribe\n     * @constructor\n     * @param {Request} request A reference to the request object.\n     */\n    constructor(request) {\n        this.websocket = null;\n        this.request = request;\n        this.subscriptions = new Map();\n    }\n\n    /**\n     * Actual Publish/Subscribe connection state.\n     * @return {number} Returns a connection state.\n     * @example\n     * CONNECTING   0    The connection is not yet open\n     * OPEN         1    The connection is open and ready to communicate\n     * CLOSING      2    The connection is in the process of closing\n     * CLOSED       3    The connection is closed or could not be opened\n     */\n    connectionState() {\n        const SOCKET_CLOSED = 3;\n        return this.websocket ? this.websocket.readyState : SOCKET_CLOSED;\n    }\n\n    /**\n     * Opens a subscribe connection.\n     * @param {string} url Motorcortex server URL.\n     * @return {Promise<string>} A promise, which completes when connection is ready.\n     * If connection is failed, short error description is passed to the cathe method.\n     * @example\n     * let sub = new motorcortex.Subscribe(req);\n     * let sub_conn_done = sub.connect(`ws://${server}:5557`);\n     * sub_conn_done.then(function () {\n     *      console.log('Subscribe connection is established');\n     * })\n     * .catch(function (reason) {\n     *      console.error('Failed to establish connection: ' + reason);\n     * });\n     */\n    connect(url) {\n        // initializing and connecting websocket\n        let _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.websocket = new WebSocket(url, 'pub.sp.nanomsg.org');\n            _this.websocket.binaryType = 'arraybuffer';\n            _this.websocket.onopen = function (e) {\n                resolve();\n            };\n            _this.websocket.onerror = function (e) {\n                _this.websocket.close();\n                reject('Failed to connect to: ' + url);\n            };\n            _this.websocket.onmessage = function (e) {\n                _this._onMessage(e);\n            };\n            _this.websocket.onclose = function (e) {\n                _this.connectionClosed();\n            };\n        });\n    }\n\n    connectionClosed() {\n        return this.request.connectionClosed();\n    }\n\n    /**\n     * Closes connection to the server\n     */\n    close() {\n        if ((this.connectionState() !== ConnectionState.CLOSING) &&\n            (this.connectionState() !== ConnectionState.CLOSED)) {\n            this.websocket.close();\n        }\n    }\n\n    /**\n     * Create a subscription group for a list of the parameters.\n     * @param {Array<string>} path_list List of the parameters to subscribe to.\n     * @param {string} group_alias Name of the group.\n     * @param {number=} frq_divider Frequency divider is a downscaling factor of the group publish rate.\n     * Default value is 1, every cycle of the publisher.\n     * @return {Subscription<GroupStatusMsg>} Returns a subscription handle, which acts as a JavaScript Promise,\n     * it is resolved when subscription is ready or failed. After the subscription\n     * is ready the handle is used to retrieve latest data.\n     * @see Subscription, motorcortex.proto, GroupStatusMsg, StatusCode\n     * @example\n     * let data_sub = sub.subscribe([\"root/Control/jointReferenceGenerator/enable\",\n     *      \"root/Control/jointReferenceGenerator/signalGenerator01/amplitude\",\n     *      \"root/Control/jointReferenceGenerator/signalGenerator02/amplitude\"], \"group1\");\n     *\n     * data_sub.then(function (subscription) {\n     *      console.log('Subscription is ready');\n     *      // when subscription is ready, setting an update callback\n     *      data_sub.notify(function (parameters) {\n     *          console.log('Received group update');\n     *          let layout = data_sub.layout();\n     *          for(let i = 0; i < layout.length; i++) {\n     *              console.log(\"Parameter: \" + layout[i] + \" value: \" + parameters[i].toString());\n     *          }\n     *      }\n     * }).catch(function (subscription) {\n     *      console.log('Failed to subscribe: ' + motorcortex.statusToStr(group.status));\n     * });\n     */\n    subscribe(path_list, group_alias, frq_divider) {\n        // create a group subscription\n        let subscription = new Subscription(group_alias, this.request.getMessageTypes());\n        let _this = this;\n        // send subscribe request to the server\n        this.request.createGroup(path_list, group_alias, frq_divider)\n            .then(function (msg) {\n                // add subscription to the active sub. list and call subscription complete routine\n                _this.subscriptions.set(msg.id, subscription);\n                subscription._complete(msg, path_list);\n            })\n            .catch(function (e) {\n                // if subscription failed, call failed routine\n                subscription._failed(e);\n            });\n        return subscription;\n    }\n\n    /**\n     * Unsubscribes from the group.\n     * @param {string} group_alias Name of the group to unsubscribe from.\n     * @return {Promise<StatusMsg>} Returns a Promise, which resolves when the unsubscribe operation is complete,\n     * fails otherwise.\n     * @see motorcortex.proto, StatusMsg, StatusCode\n     * @example\n     * let unsub_handle = req.unsubscribe('myGroup1');\n     * unsub_handle.catch( function(unsubscribe) {\n     *      console.log('Failed to remove group: ' + motorcortex.statusToStr(unsubscribe.status));\n     * });\n     */\n    unsubscribe(group_alias) {\n        for (let key of this.subscriptions.keys()) {\n            if (this.subscriptions.get(key).alias() === group_alias) {\n                this.subscriptions.delete(key);\n                break;\n            }\n        }\n        // send remove group request to the server\n        return this.request.removeGroup(group_alias);\n    }\n\n    // Interanl methods\n\n    _onMessage(e) {\n        // get group id, it is 4 bytes\n        let msg = new DataView(e.data);\n        let hash = msg.getUint32(0, true);\n        // find subscription by the id\n        let sub = this.subscriptions.get(hash);\n        if (sub) {\n            // if it exists, update its value\n            const HEADER_OFFSET = 4;\n            sub._update(e.data, HEADER_OFFSET);\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/subscribe.js","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(\"./field\");\r\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\r\n\r\nvar types   = require(\"./types\"),\r\n    util    = require(\"./util\");\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\r\nfunction MapField(name, id, keyType, type, options, comment) {\r\n    Field.call(this, name, id, type, undefined, undefined, options, comment);\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {ReflectionObject|null}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Map field descriptor.\r\n * @interface IMapField\r\n * @extends {IField}\r\n * @property {string} keyType Key type\r\n */\r\n\r\n/**\r\n * Extension map field descriptor.\r\n * @interface IExtensionMapField\r\n * @extends IMapField\r\n * @property {string} extend Extended type\r\n */\r\n\r\n/**\r\n * Constructs a map field from a map field descriptor.\r\n * @param {string} name Field name\r\n * @param {IMapField} json Map field descriptor\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Converts this map field to a map field descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IMapField} Map field descriptor\r\n */\r\nMapField.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"keyType\" , this.keyType,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return Field.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Map field decorator (TypeScript).\r\n * @name MapField.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\r\n */\r\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\r\n\r\n    // submessage value: decorate the submessage and use its name as the type\r\n    if (typeof fieldValueType === \"function\")\r\n        fieldValueType = util.decorateType(fieldValueType).name;\r\n\r\n    // enum reference value: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldValueType && typeof fieldValueType === \"object\")\r\n        fieldValueType = util.decorateEnum(fieldValueType).name;\r\n\r\n    return function mapFieldDecorator(prototype, fieldName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\r\n    };\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/mapfield.js\n// module id = 13\n// module chunks = 0","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\n/**\r\n * Constructs a new message instance.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Properties<T>} [properties] Properties to set\r\n * @template T extends object\r\n */\r\nfunction Message(properties) {\r\n    // not used internally\r\n    if (properties)\r\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/*eslint-disable valid-jsdoc*/\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message<T>} Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.create = function create(properties) {\r\n    return this.$type.create(properties);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {T|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {T|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {T} Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {T} Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {T} Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {T} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n\r\n/*eslint-enable valid-jsdoc*/\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/message.js\n// module id = 14\n// module chunks = 0","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\r\n\r\nvar util = require(\"./util\");\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] The comment for this method\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options, comment) {\r\n\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore if */\r\n    if (!(type === undefined || util.isString(type)))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {Type|null}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {Type|null}\r\n     */\r\n    this.resolvedResponseType = null;\r\n\r\n    /**\r\n     * Comment for this method\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n}\r\n\r\n/**\r\n * Method descriptor.\r\n * @interface IMethod\r\n * @property {string} [type=\"rpc\"] Method type\r\n * @property {string} requestType Request type\r\n * @property {string} responseType Response type\r\n * @property {boolean} [requestStream=false] Whether requests are streamed\r\n * @property {boolean} [responseStream=false] Whether responses are streamed\r\n * @property {Object.<string,*>} [options] Method options\r\n */\r\n\r\n/**\r\n * Constructs a method from a method descriptor.\r\n * @param {string} name Method name\r\n * @param {IMethod} json Method descriptor\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Converts this method to a method descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IMethod} Method descriptor\r\n */\r\nMethod.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"type\"           , this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\r\n        \"requestType\"    , this.requestType,\r\n        \"requestStream\"  , this.requestStream,\r\n        \"responseType\"   , this.responseType,\r\n        \"responseStream\" , this.responseStream,\r\n        \"options\"        , this.options,\r\n        \"comment\"        , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.resolve = function resolve() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\r\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/method.js\n// module id = 15\n// module chunks = 0","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                /* istanbul ignore next */\r\n                : create_array(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : create_array;\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore if */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readFloatLE(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readDoubleLE(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore if */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    if (Array.isArray(this.buf)) // plain array\r\n        return this.buf.slice(start, end);\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore if */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/reader.js\n// module id = 16\n// module chunks = 0","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(\"./namespace\");\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(\"./field\"),\r\n    Enum    = require(\"./enum\"),\r\n    OneOf   = require(\"./oneof\"),\r\n    util    = require(\"./util\");\r\n\r\nvar Type,   // cyclic\r\n    parse,  // might be excluded\r\n    common; // \"\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a namespace descriptor into a root namespace.\r\n * @param {INamespace} json Nameespace descriptor\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename, options);\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore if */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    resolved,\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.imports[i]))\r\n                            fetch(resolved);\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))\r\n                            fetch(resolved, true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore if */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    /* istanbul ignore else */\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else if (!queued) // can't be covered reliably\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0, resolved; i < filename.length; ++i)\r\n        if (resolved = self.resolvePath(\"\", filename[i]))\r\n            fetch(resolved);\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @function Root#loadSync\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    }\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field */ object.extend !== undefined) {\r\n            if (/* already handled */ object.extensionField) { // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            } else { // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    } else if (object instanceof Namespace) {\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    }\r\n};\r\n\r\nRoot._configure = function(Type_, parse_, common_) {\r\n    Type = Type_;\r\n    parse = parse_;\r\n    common = common_;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/root.js\n// module id = 17\n// module chunks = 0","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(\"./namespace\");\r\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\r\n\r\nvar Method = require(\"./method\"),\r\n    util   = require(\"./util\"),\r\n    rpc    = require(\"./rpc\");\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {Method[]|null}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Service descriptor.\r\n * @interface IService\r\n * @extends INamespace\r\n * @property {Object.<string,IMethod>} methods Method descriptors\r\n */\r\n\r\n/**\r\n * Constructs a service from a service descriptor.\r\n * @param {string} name Service name\r\n * @param {IService} json Service descriptor\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    /* istanbul ignore else */\r\n    if (json.methods)\r\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\r\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\r\n    if (json.nested)\r\n        service.addJSON(json.nested);\r\n    service.comment = json.comment;\r\n    return service;\r\n};\r\n\r\n/**\r\n * Converts this service to a service descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IService} Service descriptor\r\n */\r\nService.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\" , inherited && inherited.options || undefined,\r\n        \"methods\" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},\r\n        \"nested\"  , inherited && inherited.nested || undefined,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Service.prototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.get = function get(name) {\r\n    return this.methods[name]\r\n        || Namespace.prototype.get.call(this, name);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.add = function add(object) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore if */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\r\n    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {\r\n        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\r\n        rpcService[methodName] = util.codegen([\"r\",\"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\r\n            m: method,\r\n            q: method.resolvedRequestType.ctor,\r\n            s: method.resolvedResponseType.ctor\r\n        });\r\n    }\r\n    return rpcService;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/service.js\n// module id = 18\n// module chunks = 0","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(\"./namespace\");\r\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\r\n\r\nvar Enum      = require(\"./enum\"),\r\n    OneOf     = require(\"./oneof\"),\r\n    Field     = require(\"./field\"),\r\n    MapField  = require(\"./mapfield\"),\r\n    Service   = require(\"./service\"),\r\n    Message   = require(\"./message\"),\r\n    Reader    = require(\"./reader\"),\r\n    Writer    = require(\"./writer\"),\r\n    util      = require(\"./util\"),\r\n    encoder   = require(\"./encoder\"),\r\n    decoder   = require(\"./decoder\"),\r\n    verifier  = require(\"./verifier\"),\r\n    converter = require(\"./converter\"),\r\n    wrappers  = require(\"./wrappers\");\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {Object.<number,Field>|null}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {Field[]|null}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {OneOf[]|null}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {Constructor<{}>}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(Type.prototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n\r\n            /* istanbul ignore if */\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n\r\n            this._fieldsById = {};\r\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore if */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\r\n     * @name Type#ctor\r\n     * @type {Constructor<{}>}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this.ctor = Type.generateConstructor(this)());\r\n        },\r\n        set: function(ctor) {\r\n\r\n            // Ensure proper prototype\r\n            var prototype = ctor.prototype;\r\n            if (!(prototype instanceof Message)) {\r\n                (ctor.prototype = new Message()).constructor = ctor;\r\n                util.merge(ctor.prototype, prototype);\r\n            }\r\n\r\n            // Classes and messages reference their reflected type\r\n            ctor.$type = ctor.prototype.$type = this;\r\n\r\n            // Mix in static methods\r\n            util.merge(ctor, Message, true);\r\n\r\n            this._ctor = ctor;\r\n\r\n            // Messages have non-enumerable default values on their prototype\r\n            var i = 0;\r\n            for (; i < /* initializes */ this.fieldsArray.length; ++i)\r\n                this._fieldsArray[i].resolve(); // ensures a proper value\r\n\r\n            // Messages have non-enumerable getters and setters for each virtual oneof field\r\n            var ctorProperties = {};\r\n            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)\r\n                ctorProperties[this._oneofsArray[i].resolve().name] = {\r\n                    get: util.oneOfGetter(this._oneofsArray[i].oneof),\r\n                    set: util.oneOfSetter(this._oneofsArray[i].oneof)\r\n                };\r\n            if (i)\r\n                Object.defineProperties(ctor.prototype, ctorProperties);\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Generates a constructor function for the specified type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nType.generateConstructor = function generateConstructor(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen([\"p\"], mtype.name);\r\n    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\r\n    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)\r\n        if ((field = mtype._fieldsArray[i]).map) gen\r\n            (\"this%s={}\", util.safeProp(field.name));\r\n        else if (field.repeated) gen\r\n            (\"this%s=[]\", util.safeProp(field.name));\r\n    return gen\r\n    (\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\r\n        (\"this[ks[i]]=p[ks[i]]\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Message type descriptor.\r\n * @interface IType\r\n * @extends INamespace\r\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\r\n * @property {Object.<string,IField>} fields Field descriptors\r\n * @property {number[][]} [extensions] Extension ranges\r\n * @property {number[][]} [reserved] Reserved ranges\r\n * @property {boolean} [group=false] Whether a legacy group or not\r\n */\r\n\r\n/**\r\n * Creates a message type from a message type descriptor.\r\n * @param {string} name Message name\r\n * @param {IType} json Message type descriptor\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    var names = Object.keys(json.fields),\r\n        i = 0;\r\n    for (; i < names.length; ++i)\r\n        type.add(\r\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\r\n            ? MapField.fromJSON\r\n            : Field.fromJSON )(names[i], json.fields[names[i]])\r\n        );\r\n    if (json.oneofs)\r\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\r\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\r\n    if (json.nested)\r\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\r\n            var nested = json.nested[names[i]];\r\n            type.add( // most to least likely\r\n                ( nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    if (json.comment)\r\n        type.comment = json.comment;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Converts this message type to a message type descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IType} Message type descriptor\r\n */\r\nType.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\"    , inherited && inherited.options || undefined,\r\n        \"oneofs\"     , Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),\r\n        \"fields\"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; }), toJSONOptions) || {},\r\n        \"extensions\" , this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        \"reserved\"   , this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        \"group\"      , this.group || undefined,\r\n        \"nested\"     , inherited && inherited.nested || undefined,\r\n        \"comment\"    , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.get = function get(name) {\r\n    return this.fields[name]\r\n        || this.oneofs && this.oneofs[name]\r\n        || this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nType.prototype.add = function add(object) {\r\n\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n\r\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\r\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (this.isReservedId(object.id))\r\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\r\n        if (this.isReservedName(object.name))\r\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\r\n\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nType.prototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.fields || this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.fields[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.oneofs || this.oneofs[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.oneofs[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedId = function isReservedId(id) {\r\n    return Namespace.isReservedId(this.reserved, id);\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedName = function isReservedName(name) {\r\n    return Namespace.isReservedName(this.reserved, name);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message<{}>} Message instance\r\n */\r\nType.prototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nType.prototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n\r\n    var fullName = this.fullName,\r\n        types    = [];\r\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\r\n        types.push(this._fieldsArray[i].resolve().resolvedType);\r\n\r\n    // Replace setup methods with type-specific generated functions\r\n    this.encode = encoder(this)({\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this)({\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = converter.fromObject(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n\r\n    // Inject custom wrappers for common types\r\n    var wrapper = wrappers[fullName];\r\n    if (wrapper) {\r\n        var originalThis = Object.create(this);\r\n        // if (wrapper.fromObject) {\r\n            originalThis.fromObject = this.fromObject;\r\n            this.fromObject = wrapper.fromObject.bind(originalThis);\r\n        // }\r\n        // if (wrapper.toObject) {\r\n            originalThis.toObject = this.toObject;\r\n            this.toObject = wrapper.toObject.bind(originalThis);\r\n        // }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message<{}>} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError<{}>} If required fields are missing\r\n */\r\nType.prototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message<{}>} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError} If required fields are missing\r\n */\r\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\r\n */\r\nType.prototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object to convert\r\n * @returns {Message<{}>} Message instance\r\n */\r\nType.prototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @interface IConversionOptions\r\n * @property {Function} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {Function} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {Function} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\r\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message<{}>} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nType.prototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link Type.d} (TypeScript).\r\n * @typedef TypeDecorator\r\n * @type {function}\r\n * @param {Constructor<T>} target Target constructor\r\n * @returns {undefined}\r\n * @template T extends Message<T>\r\n */\r\n\r\n/**\r\n * Type decorator (TypeScript).\r\n * @param {string} [typeName] Type name, defaults to the constructor's name\r\n * @returns {TypeDecorator<T>} Decorator function\r\n * @template T extends Message<T>\r\n */\r\nType.d = function decorateType(typeName) {\r\n    return function typeDecorator(target) {\r\n        util.decorateType(target, typeName);\r\n    };\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/type.js\n// module id = 19\n// module chunks = 0","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {State|null}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {Object|null}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n * @private\r\n */\r\nWriter.prototype._push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this._push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos    ] =  val         & 255;\r\n    buf[pos + 1] =  val >>> 8   & 255;\r\n    buf[pos + 2] =  val >>> 16  & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this._push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this._push(util.float.writeFloatLE, 4, value);\r\n};\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this._push(util.float.writeDoubleLE, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this._push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len)._push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len)._push(utf8.write, len, value)\r\n        : this._push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/writer.js\n// module id = 20\n// module chunks = 0","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@protobufjs/aspromise/index.js\n// module id = 21\n// module chunks = 0","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@protobufjs/inquire/index.js\n// module id = 22\n// module chunks = 0","/*\r\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\r\n Copyright 2009 The Closure Library Authors. All Rights Reserved.\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\r\n\r\n/**\r\n * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\r\n * Released under the Apache License, Version 2.0\r\n * see: https://github.com/dcodeIO/long.js for details\r\n */\r\n(function(global, factory) {\r\n\r\n    /* AMD */ if (typeof define === 'function' && define[\"amd\"])\r\n        define([], factory);\r\n    /* CommonJS */ else if (typeof require === 'function' && typeof module === \"object\" && module && module[\"exports\"])\r\n        module[\"exports\"] = factory();\r\n    /* Global */ else\r\n        (global[\"dcodeIO\"] = global[\"dcodeIO\"] || {})[\"Long\"] = factory();\r\n\r\n})(this, function() {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n     *  See the from* functions below for more convenient ways of constructing Longs.\r\n     * @exports Long\r\n     * @class A Long class for representing a 64 bit two's-complement integer value.\r\n     * @param {number} low The low (signed) 32 bits of the long\r\n     * @param {number} high The high (signed) 32 bits of the long\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @constructor\r\n     */\r\n    function Long(low, high, unsigned) {\r\n\r\n        /**\r\n         * The low 32 bits as a signed value.\r\n         * @type {number}\r\n         */\r\n        this.low = low | 0;\r\n\r\n        /**\r\n         * The high 32 bits as a signed value.\r\n         * @type {number}\r\n         */\r\n        this.high = high | 0;\r\n\r\n        /**\r\n         * Whether unsigned or not.\r\n         * @type {boolean}\r\n         */\r\n        this.unsigned = !!unsigned;\r\n    }\r\n\r\n    // The internal representation of a long is the two given signed, 32-bit values.\r\n    // We use 32-bit pieces because these are the size of integers on which\r\n    // Javascript performs bit-operations.  For operations like addition and\r\n    // multiplication, we split each number into 16 bit pieces, which can easily be\r\n    // multiplied within Javascript's floating-point representation without overflow\r\n    // or change in sign.\r\n    //\r\n    // In the algorithms below, we frequently reduce the negative case to the\r\n    // positive case by negating the input(s) and then post-processing the result.\r\n    // Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n    // a positive number, it overflows back into a negative).  Not handling this\r\n    // case would often result in infinite recursion.\r\n    //\r\n    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n    // methods on which they depend.\r\n\r\n    /**\r\n     * An indicator used to reliably determine if an object is a Long or not.\r\n     * @type {boolean}\r\n     * @const\r\n     * @private\r\n     */\r\n    Long.prototype.__isLong__;\r\n\r\n    Object.defineProperty(Long.prototype, \"__isLong__\", {\r\n        value: true,\r\n        enumerable: false,\r\n        configurable: false\r\n    });\r\n\r\n    /**\r\n     * @function\r\n     * @param {*} obj Object\r\n     * @returns {boolean}\r\n     * @inner\r\n     */\r\n    function isLong(obj) {\r\n        return (obj && obj[\"__isLong__\"]) === true;\r\n    }\r\n\r\n    /**\r\n     * Tests if the specified object is a Long.\r\n     * @function\r\n     * @param {*} obj Object\r\n     * @returns {boolean}\r\n     */\r\n    Long.isLong = isLong;\r\n\r\n    /**\r\n     * A cache of the Long representations of small integer values.\r\n     * @type {!Object}\r\n     * @inner\r\n     */\r\n    var INT_CACHE = {};\r\n\r\n    /**\r\n     * A cache of the Long representations of small unsigned integer values.\r\n     * @type {!Object}\r\n     * @inner\r\n     */\r\n    var UINT_CACHE = {};\r\n\r\n    /**\r\n     * @param {number} value\r\n     * @param {boolean=} unsigned\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromInt(value, unsigned) {\r\n        var obj, cachedObj, cache;\r\n        if (unsigned) {\r\n            value >>>= 0;\r\n            if (cache = (0 <= value && value < 256)) {\r\n                cachedObj = UINT_CACHE[value];\r\n                if (cachedObj)\r\n                    return cachedObj;\r\n            }\r\n            obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n            if (cache)\r\n                UINT_CACHE[value] = obj;\r\n            return obj;\r\n        } else {\r\n            value |= 0;\r\n            if (cache = (-128 <= value && value < 128)) {\r\n                cachedObj = INT_CACHE[value];\r\n                if (cachedObj)\r\n                    return cachedObj;\r\n            }\r\n            obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n            if (cache)\r\n                INT_CACHE[value] = obj;\r\n            return obj;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a Long representing the given 32 bit integer value.\r\n     * @function\r\n     * @param {number} value The 32 bit integer in question\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @returns {!Long} The corresponding Long value\r\n     */\r\n    Long.fromInt = fromInt;\r\n\r\n    /**\r\n     * @param {number} value\r\n     * @param {boolean=} unsigned\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromNumber(value, unsigned) {\r\n        if (isNaN(value) || !isFinite(value))\r\n            return unsigned ? UZERO : ZERO;\r\n        if (unsigned) {\r\n            if (value < 0)\r\n                return UZERO;\r\n            if (value >= TWO_PWR_64_DBL)\r\n                return MAX_UNSIGNED_VALUE;\r\n        } else {\r\n            if (value <= -TWO_PWR_63_DBL)\r\n                return MIN_VALUE;\r\n            if (value + 1 >= TWO_PWR_63_DBL)\r\n                return MAX_VALUE;\r\n        }\r\n        if (value < 0)\r\n            return fromNumber(-value, unsigned).neg();\r\n        return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n    }\r\n\r\n    /**\r\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n     * @function\r\n     * @param {number} value The number in question\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @returns {!Long} The corresponding Long value\r\n     */\r\n    Long.fromNumber = fromNumber;\r\n\r\n    /**\r\n     * @param {number} lowBits\r\n     * @param {number} highBits\r\n     * @param {boolean=} unsigned\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromBits(lowBits, highBits, unsigned) {\r\n        return new Long(lowBits, highBits, unsigned);\r\n    }\r\n\r\n    /**\r\n     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n     *  assumed to use 32 bits.\r\n     * @function\r\n     * @param {number} lowBits The low 32 bits\r\n     * @param {number} highBits The high 32 bits\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @returns {!Long} The corresponding Long value\r\n     */\r\n    Long.fromBits = fromBits;\r\n\r\n    /**\r\n     * @function\r\n     * @param {number} base\r\n     * @param {number} exponent\r\n     * @returns {number}\r\n     * @inner\r\n     */\r\n    var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n    /**\r\n     * @param {string} str\r\n     * @param {(boolean|number)=} unsigned\r\n     * @param {number=} radix\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromString(str, unsigned, radix) {\r\n        if (str.length === 0)\r\n            throw Error('empty string');\r\n        if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n            return ZERO;\r\n        if (typeof unsigned === 'number') {\r\n            // For goog.math.long compatibility\r\n            radix = unsigned,\r\n            unsigned = false;\r\n        } else {\r\n            unsigned = !! unsigned;\r\n        }\r\n        radix = radix || 10;\r\n        if (radix < 2 || 36 < radix)\r\n            throw RangeError('radix');\r\n\r\n        var p;\r\n        if ((p = str.indexOf('-')) > 0)\r\n            throw Error('interior hyphen');\r\n        else if (p === 0) {\r\n            return fromString(str.substring(1), unsigned, radix).neg();\r\n        }\r\n\r\n        // Do several (8) digits each time through the loop, so as to\r\n        // minimize the calls to the very expensive emulated div.\r\n        var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n        var result = ZERO;\r\n        for (var i = 0; i < str.length; i += 8) {\r\n            var size = Math.min(8, str.length - i),\r\n                value = parseInt(str.substring(i, i + size), radix);\r\n            if (size < 8) {\r\n                var power = fromNumber(pow_dbl(radix, size));\r\n                result = result.mul(power).add(fromNumber(value));\r\n            } else {\r\n                result = result.mul(radixToPower);\r\n                result = result.add(fromNumber(value));\r\n            }\r\n        }\r\n        result.unsigned = unsigned;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns a Long representation of the given string, written using the specified radix.\r\n     * @function\r\n     * @param {string} str The textual representation of the Long\r\n     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n     * @returns {!Long} The corresponding Long value\r\n     */\r\n    Long.fromString = fromString;\r\n\r\n    /**\r\n     * @function\r\n     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromValue(val) {\r\n        if (val /* is compatible */ instanceof Long)\r\n            return val;\r\n        if (typeof val === 'number')\r\n            return fromNumber(val);\r\n        if (typeof val === 'string')\r\n            return fromString(val);\r\n        // Throws for non-objects, converts non-instanceof Long:\r\n        return fromBits(val.low, val.high, val.unsigned);\r\n    }\r\n\r\n    /**\r\n     * Converts the specified value to a Long.\r\n     * @function\r\n     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n     * @returns {!Long}\r\n     */\r\n    Long.fromValue = fromValue;\r\n\r\n    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n    // no runtime penalty for these.\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_16_DBL = 1 << 16;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_24_DBL = 1 << 24;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var ZERO = fromInt(0);\r\n\r\n    /**\r\n     * Signed zero.\r\n     * @type {!Long}\r\n     */\r\n    Long.ZERO = ZERO;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var UZERO = fromInt(0, true);\r\n\r\n    /**\r\n     * Unsigned zero.\r\n     * @type {!Long}\r\n     */\r\n    Long.UZERO = UZERO;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var ONE = fromInt(1);\r\n\r\n    /**\r\n     * Signed one.\r\n     * @type {!Long}\r\n     */\r\n    Long.ONE = ONE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var UONE = fromInt(1, true);\r\n\r\n    /**\r\n     * Unsigned one.\r\n     * @type {!Long}\r\n     */\r\n    Long.UONE = UONE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var NEG_ONE = fromInt(-1);\r\n\r\n    /**\r\n     * Signed negative one.\r\n     * @type {!Long}\r\n     */\r\n    Long.NEG_ONE = NEG_ONE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n    /**\r\n     * Maximum signed value.\r\n     * @type {!Long}\r\n     */\r\n    Long.MAX_VALUE = MAX_VALUE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n    /**\r\n     * Maximum unsigned value.\r\n     * @type {!Long}\r\n     */\r\n    Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n    /**\r\n     * Minimum signed value.\r\n     * @type {!Long}\r\n     */\r\n    Long.MIN_VALUE = MIN_VALUE;\r\n\r\n    /**\r\n     * @alias Long.prototype\r\n     * @inner\r\n     */\r\n    var LongPrototype = Long.prototype;\r\n\r\n    /**\r\n     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n     * @returns {number}\r\n     */\r\n    LongPrototype.toInt = function toInt() {\r\n        return this.unsigned ? this.low >>> 0 : this.low;\r\n    };\r\n\r\n    /**\r\n     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n     * @returns {number}\r\n     */\r\n    LongPrototype.toNumber = function toNumber() {\r\n        if (this.unsigned)\r\n            return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n    };\r\n\r\n    /**\r\n     * Converts the Long to a string written in the specified radix.\r\n     * @param {number=} radix Radix (2-36), defaults to 10\r\n     * @returns {string}\r\n     * @override\r\n     * @throws {RangeError} If `radix` is out of range\r\n     */\r\n    LongPrototype.toString = function toString(radix) {\r\n        radix = radix || 10;\r\n        if (radix < 2 || 36 < radix)\r\n            throw RangeError('radix');\r\n        if (this.isZero())\r\n            return '0';\r\n        if (this.isNegative()) { // Unsigned Longs are never negative\r\n            if (this.eq(MIN_VALUE)) {\r\n                // We need to change the Long value before it can be negated, so we remove\r\n                // the bottom-most digit in this base and then recurse to do the rest.\r\n                var radixLong = fromNumber(radix),\r\n                    div = this.div(radixLong),\r\n                    rem1 = div.mul(radixLong).sub(this);\r\n                return div.toString(radix) + rem1.toInt().toString(radix);\r\n            } else\r\n                return '-' + this.neg().toString(radix);\r\n        }\r\n\r\n        // Do several (6) digits each time through the loop, so as to\r\n        // minimize the calls to the very expensive emulated div.\r\n        var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n            rem = this;\r\n        var result = '';\r\n        while (true) {\r\n            var remDiv = rem.div(radixToPower),\r\n                intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n                digits = intval.toString(radix);\r\n            rem = remDiv;\r\n            if (rem.isZero())\r\n                return digits + result;\r\n            else {\r\n                while (digits.length < 6)\r\n                    digits = '0' + digits;\r\n                result = '' + digits + result;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the high 32 bits as a signed integer.\r\n     * @returns {number} Signed high bits\r\n     */\r\n    LongPrototype.getHighBits = function getHighBits() {\r\n        return this.high;\r\n    };\r\n\r\n    /**\r\n     * Gets the high 32 bits as an unsigned integer.\r\n     * @returns {number} Unsigned high bits\r\n     */\r\n    LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n        return this.high >>> 0;\r\n    };\r\n\r\n    /**\r\n     * Gets the low 32 bits as a signed integer.\r\n     * @returns {number} Signed low bits\r\n     */\r\n    LongPrototype.getLowBits = function getLowBits() {\r\n        return this.low;\r\n    };\r\n\r\n    /**\r\n     * Gets the low 32 bits as an unsigned integer.\r\n     * @returns {number} Unsigned low bits\r\n     */\r\n    LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n        return this.low >>> 0;\r\n    };\r\n\r\n    /**\r\n     * Gets the number of bits needed to represent the absolute value of this Long.\r\n     * @returns {number}\r\n     */\r\n    LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n        if (this.isNegative()) // Unsigned Longs are never negative\r\n            return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n        var val = this.high != 0 ? this.high : this.low;\r\n        for (var bit = 31; bit > 0; bit--)\r\n            if ((val & (1 << bit)) != 0)\r\n                break;\r\n        return this.high != 0 ? bit + 33 : bit + 1;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals zero.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isZero = function isZero() {\r\n        return this.high === 0 && this.low === 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is negative.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isNegative = function isNegative() {\r\n        return !this.unsigned && this.high < 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is positive.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isPositive = function isPositive() {\r\n        return this.unsigned || this.high >= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is odd.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isOdd = function isOdd() {\r\n        return (this.low & 1) === 1;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is even.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isEven = function isEven() {\r\n        return (this.low & 1) === 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.equals = function equals(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n            return false;\r\n        return this.high === other.high && this.low === other.low;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.eq = LongPrototype.equals;\r\n\r\n    /**\r\n     * Tests if this Long's value differs from the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.notEquals = function notEquals(other) {\r\n        return !this.eq(/* validates */ other);\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.neq = LongPrototype.notEquals;\r\n\r\n    /**\r\n     * Tests if this Long's value is less than the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.lessThan = function lessThan(other) {\r\n        return this.comp(/* validates */ other) < 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.lt = LongPrototype.lessThan;\r\n\r\n    /**\r\n     * Tests if this Long's value is less than or equal the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n        return this.comp(/* validates */ other) <= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.greaterThan = function greaterThan(other) {\r\n        return this.comp(/* validates */ other) > 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than or equal the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n        return this.comp(/* validates */ other) >= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n    /**\r\n     * Compares this Long's value with the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n     *  if the given one is greater\r\n     */\r\n    LongPrototype.compare = function compare(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        if (this.eq(other))\r\n            return 0;\r\n        var thisNeg = this.isNegative(),\r\n            otherNeg = other.isNegative();\r\n        if (thisNeg && !otherNeg)\r\n            return -1;\r\n        if (!thisNeg && otherNeg)\r\n            return 1;\r\n        // At this point the sign bits are the same\r\n        if (!this.unsigned)\r\n            return this.sub(other).isNegative() ? -1 : 1;\r\n        // Both are positive if at least one is unsigned\r\n        return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n    };\r\n\r\n    /**\r\n     * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n     *  if the given one is greater\r\n     */\r\n    LongPrototype.comp = LongPrototype.compare;\r\n\r\n    /**\r\n     * Negates this Long's value.\r\n     * @returns {!Long} Negated Long\r\n     */\r\n    LongPrototype.negate = function negate() {\r\n        if (!this.unsigned && this.eq(MIN_VALUE))\r\n            return MIN_VALUE;\r\n        return this.not().add(ONE);\r\n    };\r\n\r\n    /**\r\n     * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n     * @function\r\n     * @returns {!Long} Negated Long\r\n     */\r\n    LongPrototype.neg = LongPrototype.negate;\r\n\r\n    /**\r\n     * Returns the sum of this and the specified Long.\r\n     * @param {!Long|number|string} addend Addend\r\n     * @returns {!Long} Sum\r\n     */\r\n    LongPrototype.add = function add(addend) {\r\n        if (!isLong(addend))\r\n            addend = fromValue(addend);\r\n\r\n        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n        var a48 = this.high >>> 16;\r\n        var a32 = this.high & 0xFFFF;\r\n        var a16 = this.low >>> 16;\r\n        var a00 = this.low & 0xFFFF;\r\n\r\n        var b48 = addend.high >>> 16;\r\n        var b32 = addend.high & 0xFFFF;\r\n        var b16 = addend.low >>> 16;\r\n        var b00 = addend.low & 0xFFFF;\r\n\r\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n        c00 += a00 + b00;\r\n        c16 += c00 >>> 16;\r\n        c00 &= 0xFFFF;\r\n        c16 += a16 + b16;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c32 += a32 + b32;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c48 += a48 + b48;\r\n        c48 &= 0xFFFF;\r\n        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the difference of this and the specified Long.\r\n     * @param {!Long|number|string} subtrahend Subtrahend\r\n     * @returns {!Long} Difference\r\n     */\r\n    LongPrototype.subtract = function subtract(subtrahend) {\r\n        if (!isLong(subtrahend))\r\n            subtrahend = fromValue(subtrahend);\r\n        return this.add(subtrahend.neg());\r\n    };\r\n\r\n    /**\r\n     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n     * @function\r\n     * @param {!Long|number|string} subtrahend Subtrahend\r\n     * @returns {!Long} Difference\r\n     */\r\n    LongPrototype.sub = LongPrototype.subtract;\r\n\r\n    /**\r\n     * Returns the product of this and the specified Long.\r\n     * @param {!Long|number|string} multiplier Multiplier\r\n     * @returns {!Long} Product\r\n     */\r\n    LongPrototype.multiply = function multiply(multiplier) {\r\n        if (this.isZero())\r\n            return ZERO;\r\n        if (!isLong(multiplier))\r\n            multiplier = fromValue(multiplier);\r\n        if (multiplier.isZero())\r\n            return ZERO;\r\n        if (this.eq(MIN_VALUE))\r\n            return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n        if (multiplier.eq(MIN_VALUE))\r\n            return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n        if (this.isNegative()) {\r\n            if (multiplier.isNegative())\r\n                return this.neg().mul(multiplier.neg());\r\n            else\r\n                return this.neg().mul(multiplier).neg();\r\n        } else if (multiplier.isNegative())\r\n            return this.mul(multiplier.neg()).neg();\r\n\r\n        // If both longs are small, use float multiplication\r\n        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n            return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n        // We can skip products that would overflow.\r\n\r\n        var a48 = this.high >>> 16;\r\n        var a32 = this.high & 0xFFFF;\r\n        var a16 = this.low >>> 16;\r\n        var a00 = this.low & 0xFFFF;\r\n\r\n        var b48 = multiplier.high >>> 16;\r\n        var b32 = multiplier.high & 0xFFFF;\r\n        var b16 = multiplier.low >>> 16;\r\n        var b00 = multiplier.low & 0xFFFF;\r\n\r\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n        c00 += a00 * b00;\r\n        c16 += c00 >>> 16;\r\n        c00 &= 0xFFFF;\r\n        c16 += a16 * b00;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c16 += a00 * b16;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c32 += a32 * b00;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c32 += a16 * b16;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c32 += a00 * b32;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n        c48 &= 0xFFFF;\r\n        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n     * @function\r\n     * @param {!Long|number|string} multiplier Multiplier\r\n     * @returns {!Long} Product\r\n     */\r\n    LongPrototype.mul = LongPrototype.multiply;\r\n\r\n    /**\r\n     * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n     *  unsigned if this Long is unsigned.\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Quotient\r\n     */\r\n    LongPrototype.divide = function divide(divisor) {\r\n        if (!isLong(divisor))\r\n            divisor = fromValue(divisor);\r\n        if (divisor.isZero())\r\n            throw Error('division by zero');\r\n        if (this.isZero())\r\n            return this.unsigned ? UZERO : ZERO;\r\n        var approx, rem, res;\r\n        if (!this.unsigned) {\r\n            // This section is only relevant for signed longs and is derived from the\r\n            // closure library as a whole.\r\n            if (this.eq(MIN_VALUE)) {\r\n                if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                    return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n                else if (divisor.eq(MIN_VALUE))\r\n                    return ONE;\r\n                else {\r\n                    // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                    var halfThis = this.shr(1);\r\n                    approx = halfThis.div(divisor).shl(1);\r\n                    if (approx.eq(ZERO)) {\r\n                        return divisor.isNegative() ? ONE : NEG_ONE;\r\n                    } else {\r\n                        rem = this.sub(divisor.mul(approx));\r\n                        res = approx.add(rem.div(divisor));\r\n                        return res;\r\n                    }\r\n                }\r\n            } else if (divisor.eq(MIN_VALUE))\r\n                return this.unsigned ? UZERO : ZERO;\r\n            if (this.isNegative()) {\r\n                if (divisor.isNegative())\r\n                    return this.neg().div(divisor.neg());\r\n                return this.neg().div(divisor).neg();\r\n            } else if (divisor.isNegative())\r\n                return this.div(divisor.neg()).neg();\r\n            res = ZERO;\r\n        } else {\r\n            // The algorithm below has not been made for unsigned longs. It's therefore\r\n            // required to take special care of the MSB prior to running it.\r\n            if (!divisor.unsigned)\r\n                divisor = divisor.toUnsigned();\r\n            if (divisor.gt(this))\r\n                return UZERO;\r\n            if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n                return UONE;\r\n            res = UZERO;\r\n        }\r\n\r\n        // Repeat the following until the remainder is less than other:  find a\r\n        // floating-point that approximates remainder / other *from below*, add this\r\n        // into the result, and subtract it from the remainder.  It is critical that\r\n        // the approximate value is less than or equal to the real value so that the\r\n        // remainder never becomes negative.\r\n        rem = this;\r\n        while (rem.gte(divisor)) {\r\n            // Approximate the result of division. This may be a little greater or\r\n            // smaller than the actual value.\r\n            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n            // We will tweak the approximate result by changing it in the 48-th digit or\r\n            // the smallest non-fractional digit, whichever is larger.\r\n            var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n                delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n            // Decrease the approximation until it is smaller than the remainder.  Note\r\n            // that if it is too large, the product overflows and is negative.\r\n                approxRes = fromNumber(approx),\r\n                approxRem = approxRes.mul(divisor);\r\n            while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n                approx -= delta;\r\n                approxRes = fromNumber(approx, this.unsigned);\r\n                approxRem = approxRes.mul(divisor);\r\n            }\r\n\r\n            // We know the answer can't be zero... and actually, zero would cause\r\n            // infinite recursion since we would make no progress.\r\n            if (approxRes.isZero())\r\n                approxRes = ONE;\r\n\r\n            res = res.add(approxRes);\r\n            rem = rem.sub(approxRem);\r\n        }\r\n        return res;\r\n    };\r\n\r\n    /**\r\n     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n     * @function\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Quotient\r\n     */\r\n    LongPrototype.div = LongPrototype.divide;\r\n\r\n    /**\r\n     * Returns this Long modulo the specified.\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Remainder\r\n     */\r\n    LongPrototype.modulo = function modulo(divisor) {\r\n        if (!isLong(divisor))\r\n            divisor = fromValue(divisor);\r\n        return this.sub(this.div(divisor).mul(divisor));\r\n    };\r\n\r\n    /**\r\n     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n     * @function\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Remainder\r\n     */\r\n    LongPrototype.mod = LongPrototype.modulo;\r\n\r\n    /**\r\n     * Returns the bitwise NOT of this Long.\r\n     * @returns {!Long}\r\n     */\r\n    LongPrototype.not = function not() {\r\n        return fromBits(~this.low, ~this.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise AND of this Long and the specified.\r\n     * @param {!Long|number|string} other Other Long\r\n     * @returns {!Long}\r\n     */\r\n    LongPrototype.and = function and(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise OR of this Long and the specified.\r\n     * @param {!Long|number|string} other Other Long\r\n     * @returns {!Long}\r\n     */\r\n    LongPrototype.or = function or(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise XOR of this Long and the given one.\r\n     * @param {!Long|number|string} other Other Long\r\n     * @returns {!Long}\r\n     */\r\n    LongPrototype.xor = function xor(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits shifted to the left by the given amount.\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n        if (isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        if ((numBits &= 63) === 0)\r\n            return this;\r\n        else if (numBits < 32)\r\n            return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n        else\r\n            return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n    /**\r\n     * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shiftRight = function shiftRight(numBits) {\r\n        if (isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        if ((numBits &= 63) === 0)\r\n            return this;\r\n        else if (numBits < 32)\r\n            return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n        else\r\n            return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n    /**\r\n     * Returns this Long with bits logically shifted to the right by the given amount.\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n        if (isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        numBits &= 63;\r\n        if (numBits === 0)\r\n            return this;\r\n        else {\r\n            var high = this.high;\r\n            if (numBits < 32) {\r\n                var low = this.low;\r\n                return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n            } else if (numBits === 32)\r\n                return fromBits(high, 0, this.unsigned);\r\n            else\r\n                return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n    /**\r\n     * Converts this Long to signed.\r\n     * @returns {!Long} Signed long\r\n     */\r\n    LongPrototype.toSigned = function toSigned() {\r\n        if (!this.unsigned)\r\n            return this;\r\n        return fromBits(this.low, this.high, false);\r\n    };\r\n\r\n    /**\r\n     * Converts this Long to unsigned.\r\n     * @returns {!Long} Unsigned long\r\n     */\r\n    LongPrototype.toUnsigned = function toUnsigned() {\r\n        if (this.unsigned)\r\n            return this;\r\n        return fromBits(this.low, this.high, true);\r\n    };\r\n\r\n    /**\r\n     * Converts this Long to its byte representation.\r\n     * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n     * @returns {!Array.<number>} Byte representation\r\n     */\r\n    LongPrototype.toBytes = function(le) {\r\n        return le ? this.toBytesLE() : this.toBytesBE();\r\n    }\r\n\r\n    /**\r\n     * Converts this Long to its little endian byte representation.\r\n     * @returns {!Array.<number>} Little endian byte representation\r\n     */\r\n    LongPrototype.toBytesLE = function() {\r\n        var hi = this.high,\r\n            lo = this.low;\r\n        return [\r\n             lo         & 0xff,\r\n            (lo >>>  8) & 0xff,\r\n            (lo >>> 16) & 0xff,\r\n            (lo >>> 24) & 0xff,\r\n             hi         & 0xff,\r\n            (hi >>>  8) & 0xff,\r\n            (hi >>> 16) & 0xff,\r\n            (hi >>> 24) & 0xff\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Converts this Long to its big endian byte representation.\r\n     * @returns {!Array.<number>} Big endian byte representation\r\n     */\r\n    LongPrototype.toBytesBE = function() {\r\n        var hi = this.high,\r\n            lo = this.low;\r\n        return [\r\n            (hi >>> 24) & 0xff,\r\n            (hi >>> 16) & 0xff,\r\n            (hi >>>  8) & 0xff,\r\n             hi         & 0xff,\r\n            (lo >>> 24) & 0xff,\r\n            (lo >>> 16) & 0xff,\r\n            (lo >>>  8) & 0xff,\r\n             lo         & 0xff\r\n        ];\r\n    }\r\n\r\n    return Long;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/long/dist/long.js\n// module id = 23\n// module chunks = 0","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(\"./enum\"),\r\n    util = require(\"./util\");\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(d%s){\", prop);\r\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\r\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", keys[i])\r\n                (\"case %i:\", values[keys[i]])\r\n                    (\"m%s=%j\", prop, values[keys[i]])\r\n                    (\"break\");\r\n            } gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n            (\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\": gen\r\n                (\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s.length)\", prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            /* default: gen\r\n                (\"m%s=d%s\", prop, prop);\r\n                break; */\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen([\"d\"], mtype.name + \"$fromObject\")\r\n    (\"if(d instanceof this.ctor)\")\r\n        (\"return d\");\r\n    if (!fields.length) return gen\r\n    (\"return new this.ctor\");\r\n    gen\r\n    (\"var m=new this.ctor\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(!Array.isArray(d%s))\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!=null){\", prop); // !== undefined && !== null\r\n        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%i].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\": gen\r\n            (\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n    if (!fields.length)\r\n        return util.codegen()(\"return {}\");\r\n    var gen = util.codegen([\"m\", \"o\"], mtype.name + \"$toObject\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n\r\n    var repeatedFields = [],\r\n        mapFields = [],\r\n        normalFields = [],\r\n        i = 0;\r\n    for (; i < fields.length; ++i)\r\n        if (!fields[i].partOf)\r\n            ( fields[i].resolve().repeated ? repeatedFields\r\n            : fields[i].map ? mapFields\r\n            : normalFields).push(fields[i]);\r\n\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        for (i = 0; i < repeatedFields.length; ++i) gen\r\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        for (i = 0; i < mapFields.length; ++i) gen\r\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (normalFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        for (i = 0; i < normalFields.length; ++i) {\r\n            var field = normalFields[i],\r\n                prop  = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%i\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) gen\r\n        (\"d%s=o.bytes===String?%j:%s\", prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\r\n            else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        } gen\r\n    (\"}\");\r\n    }\r\n    var hasKs2 = false;\r\n    for (i = 0; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            index = mtype._fieldsArray.indexOf(field),\r\n            prop  = util.safeProp(field.name);\r\n        if (field.map) {\r\n            if (!hasKs2) { hasKs2 = true; gen\r\n    (\"var ks2\");\r\n            } gen\r\n    (\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)\r\n        (\"d%s={}\", prop)\r\n        (\"for(var j=0;j<ks2.length;++j){\");\r\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[ks2[j]]\")\r\n        (\"}\");\r\n        } else if (field.repeated) { gen\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[j]\")\r\n        (\"}\");\r\n        } else { gen\r\n    (\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\r\n        genValuePartial_toObject(gen, field, /* sorted */ index, prop);\r\n        if (field.partOf) gen\r\n        (\"if(o.oneofs)\")\r\n            (\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\r\n        }\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/converter.js\n// module id = 24\n// module chunks = 0","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(\"./enum\"),\r\n    types   = require(\"./types\"),\r\n    util    = require(\"./util\");\r\n\r\nfunction missing(field) {\r\n    return \"missing required '\" + field.name + \"'\";\r\n}\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen([\"r\", \"l\"], mtype.name + \"$decode\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? \",k\" : \"\"))\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    var i = 0;\r\n    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"int32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %i:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.long[field.keyType] !== undefined) {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n            } else {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[k]=r.%s()\", ref, type);\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if (types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%i].decode(r))\"\r\n                    : \"%s.push(types[%i].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%i].decode(r)\"\r\n                : \"%s=types[%i].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n    // Unknown fields\r\n    } gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n    // Field presence\r\n    for (i = 0; i < mtype._fieldsArray.length; ++i) {\r\n        var rfield = mtype._fieldsArray[i];\r\n        if (rfield.required) gen\r\n    (\"if(!m.hasOwnProperty(%j))\", rfield.name)\r\n        (\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\r\n    }\r\n\r\n    return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/decoder.js\n// module id = 25\n// module chunks = 0","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(\"./enum\"),\r\n    types    = require(\"./types\"),\r\n    util     = require(\"./util\");\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%i].encode(%s,w.uint32(%i)).uint32(%i)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%i].encode(%s,w.uint32(%i).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var gen = util.codegen([\"m\", \"w\"], mtype.name + \"$encode\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n\r\n    // \"when a message is serialized its known fields should be written sequentially by field number\"\r\n    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            index    = mtype._fieldsArray.indexOf(field),\r\n            type     = field.resolvedType instanceof Enum ? \"int32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            gen\r\n    (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name) // !== undefined && !== null\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%i).fork().uint32(%i).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%i).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n            // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(%s!=null&&%s.length){\", ref, ref); // !== undefined && !== null\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n        (\"w.uint32(%i).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, index, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%i).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n            } gen\r\n    (\"}\");\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (field.optional) gen\r\n    (\"if(%s!=null&&m.hasOwnProperty(%j))\", ref, field.name); // !== undefined && !== null\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, index, ref);\r\n            else gen\r\n        (\"w.uint32(%i).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/encoder.js\n// module id = 26\n// module chunks = 0","\"use strict\";\r\nmodule.exports = {};\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/roots.js\n// module id = 27\n// module chunks = 0","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(\"./rpc/service\");\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/rpc.js\n// module id = 28\n// module chunks = 0","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\nvar setCommentRe = /^ *[*/]+ */,\r\n    setCommentAltRe = /^\\s*\\*?\\/*/,\r\n    setCommentSplitRe = /\\n/g,\r\n    whitespaceRe = /\\s/,\r\n    unescapeRe = /\\\\(.?)/g;\r\n\r\nvar unescapeMap = {\r\n    \"0\": \"\\0\",\r\n    \"r\": \"\\r\",\r\n    \"n\": \"\\n\",\r\n    \"t\": \"\\t\"\r\n};\r\n\r\n/**\r\n * Unescapes a string.\r\n * @param {string} str String to unescape\r\n * @returns {string} Unescaped string\r\n * @property {Object.<string,string>} map Special characters map\r\n * @memberof tokenize\r\n */\r\nfunction unescape(str) {\r\n    return str.replace(unescapeRe, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            default:\r\n                return unescapeMap[$1] || \"\";\r\n        }\r\n    });\r\n}\r\n\r\ntokenize.unescape = unescape;\r\n\r\n/**\r\n * Gets the next token and advances.\r\n * @typedef TokenizerHandleNext\r\n * @type {function}\r\n * @returns {string|null} Next token or `null` on eof\r\n */\r\n\r\n/**\r\n * Peeks for the next token.\r\n * @typedef TokenizerHandlePeek\r\n * @type {function}\r\n * @returns {string|null} Next token or `null` on eof\r\n */\r\n\r\n/**\r\n * Pushes a token back to the stack.\r\n * @typedef TokenizerHandlePush\r\n * @type {function}\r\n * @param {string} token Token\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Skips the next token.\r\n * @typedef TokenizerHandleSkip\r\n * @type {function}\r\n * @param {string} expected Expected token\r\n * @param {boolean} [optional=false] If optional\r\n * @returns {boolean} Whether the token matched\r\n * @throws {Error} If the token didn't match and is not optional\r\n */\r\n\r\n/**\r\n * Gets the comment on the previous line or, alternatively, the line comment on the specified line.\r\n * @typedef TokenizerHandleCmnt\r\n * @type {function}\r\n * @param {number} [line] Line number\r\n * @returns {string|null} Comment text or `null` if none\r\n */\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @interface ITokenizerHandle\r\n * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)\r\n * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)\r\n * @property {TokenizerHandlePush} push Pushes a token back to the stack\r\n * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\r\n * @property {number} line Current line number\r\n */\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.\r\n * @returns {ITokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source, alternateCommentMode) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n\r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1,\r\n        commentType = null,\r\n        commentText = null,\r\n        commentLine = 0,\r\n        commentLineEmpty = false;\r\n\r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /* istanbul ignore next */\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Sets the current comment text.\r\n     * @param {number} start Start offset\r\n     * @param {number} end End offset\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function setComment(start, end) {\r\n        commentType = source.charAt(start++);\r\n        commentLine = line;\r\n        commentLineEmpty = false;\r\n        var lookback;\r\n        if (alternateCommentMode) {\r\n            lookback = 2;  // alternate comment parsing: \"//\" or \"/*\"\r\n        } else {\r\n            lookback = 3;  // \"///\" or \"/**\"\r\n        }\r\n        var commentOffset = start - lookback,\r\n            c;\r\n        do {\r\n            if (--commentOffset < 0 ||\r\n                    (c = source.charAt(commentOffset)) === \"\\n\") {\r\n                commentLineEmpty = true;\r\n                break;\r\n            }\r\n        } while (c === \" \" || c === \"\\t\");\r\n        var lines = source\r\n            .substring(start, end)\r\n            .split(setCommentSplitRe);\r\n        for (var i = 0; i < lines.length; ++i)\r\n            lines[i] = lines[i]\r\n                .replace(alternateCommentMode ? setCommentAltRe : setCommentRe, \"\")\r\n                .trim();\r\n        commentText = lines\r\n            .join(\"\\n\")\r\n            .trim();\r\n    }\r\n\r\n    function isDoubleSlashCommentLine(startOffset) {\r\n        var endOffset = findEndOfLine(startOffset);\r\n\r\n        // see if remaining line matches comment pattern\r\n        var lineText = source.substring(startOffset, endOffset);\r\n        // look for 1 or 2 slashes since startOffset would already point past\r\n        // the first slash that started the comment.\r\n        var isComment = /^\\s*\\/{1,2}/.test(lineText);\r\n        return isComment;\r\n    }\r\n\r\n    function findEndOfLine(cursor) {\r\n        // find end of cursor's line\r\n        var endOffset = cursor;\r\n        while (endOffset < length && charAt(endOffset) !== \"\\n\") {\r\n            endOffset++;\r\n        }\r\n        return endOffset;\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {string|null} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr,\r\n            start,\r\n            isDoc;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (whitespaceRe.test(curr = charAt(offset))) {\r\n                if (curr === \"\\n\")\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n\r\n            if (charAt(offset) === \"/\") {\r\n                if (++offset === length) {\r\n                    throw illegal(\"comment\");\r\n                }\r\n                if (charAt(offset) === \"/\") { // Line\r\n                    if (!alternateCommentMode) {\r\n                        // check for triple-slash comment\r\n                        isDoc = charAt(start = offset + 1) === \"/\";\r\n\r\n                        while (charAt(++offset) !== \"\\n\") {\r\n                            if (offset === length) {\r\n                                return null;\r\n                            }\r\n                        }\r\n                        ++offset;\r\n                        if (isDoc) {\r\n                            setComment(start, offset - 1);\r\n                        }\r\n                        ++line;\r\n                        repeat = true;\r\n                    } else {\r\n                        // check for double-slash comments, consolidating consecutive lines\r\n                        start = offset;\r\n                        isDoc = false;\r\n                        if (isDoubleSlashCommentLine(offset)) {\r\n                            isDoc = true;\r\n                            do {\r\n                                offset = findEndOfLine(offset);\r\n                                if (offset === length) {\r\n                                    break;\r\n                                }\r\n                                offset++;\r\n                            } while (isDoubleSlashCommentLine(offset));\r\n                        } else {\r\n                            offset = Math.min(length, findEndOfLine(offset) + 1);\r\n                        }\r\n                        if (isDoc) {\r\n                            setComment(start, offset);\r\n                        }\r\n                        line++;\r\n                        repeat = true;\r\n                    }\r\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\r\n                    // check for /** (regular comment mode) or /* (alternate comment mode)\r\n                    start = offset + 1;\r\n                    isDoc = alternateCommentMode || charAt(start) === \"*\";\r\n                    do {\r\n                        if (curr === \"\\n\") {\r\n                            ++line;\r\n                        }\r\n                        if (++offset === length) {\r\n                            throw illegal(\"comment\");\r\n                        }\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== \"*\" || curr !== \"/\");\r\n                    ++offset;\r\n                    if (isDoc) {\r\n                        setComment(start, offset - 2);\r\n                    }\r\n                    repeat = true;\r\n                } else {\r\n                    return \"/\";\r\n                }\r\n            }\r\n        } while (repeat);\r\n\r\n        // offset !== length if we got here\r\n\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === \"\\\"\" || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {string|null} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a comment.\r\n     * @param {number} [trailingLine] Line number if looking for a trailing comment\r\n     * @returns {string|null} Comment text\r\n     * @inner\r\n     */\r\n    function cmnt(trailingLine) {\r\n        var ret = null;\r\n        if (trailingLine === undefined) {\r\n            if (commentLine === line - 1 && (alternateCommentMode || commentType === \"*\" || commentLineEmpty)) {\r\n                ret = commentText;\r\n            }\r\n        } else {\r\n            /* istanbul ignore else */\r\n            if (commentLine < trailingLine) {\r\n                peek();\r\n            }\r\n            if (commentLine === trailingLine && !commentLineEmpty && (alternateCommentMode || commentType === \"/\")) {\r\n                ret = commentText;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    return Object.defineProperty({\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip,\r\n        cmnt: cmnt\r\n    }, \"line\", {\r\n        get: function() { return line; }\r\n    });\r\n    /* eslint-enable callback-return */\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/tokenize.js\n// module id = 29\n// module chunks = 0","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(\"./enum\"),\r\n    util      = require(\"./util\");\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\r\n                (\"case %i:\", field.resolvedType.values[keys[j]]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else {\r\n            gen\r\n            (\"{\")\r\n                (\"var e=types[%i].verify(%s);\", fieldIndex, ref)\r\n                (\"if(e)\")\r\n                    (\"return%j+e\", field.name + \".\")\r\n            (\"}\");\r\n        }\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!util.key32Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!util.key2Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n\r\n    var gen = util.codegen([\"m\"], mtype.name + \"$verify\")\r\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\r\n        (\"return%j\", \"object expected\");\r\n    var oneofs = mtype.oneofsArray,\r\n        seenFirstField = {};\r\n    if (oneofs.length) gen\r\n    (\"var p={}\");\r\n\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        if (field.optional) gen\r\n        (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(!util.isObject(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"object\"))\r\n            (\"var k=Object.keys(%s)\", ref)\r\n            (\"for(var i=0;i<k.length;++i){\");\r\n                genVerifyKey(gen, field, \"k[i]\");\r\n                genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(!Array.isArray(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"array\"))\r\n            (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                genVerifyValue(gen, field, i, ref + \"[i]\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (field.partOf) {\r\n                var oneofProp = util.safeProp(field.partOf.name);\r\n                if (seenFirstField[field.partOf.name] === 1) gen\r\n            (\"if(p%s===1)\", oneofProp)\r\n                (\"return%j\", field.partOf.name + \": multiple values\");\r\n                seenFirstField[field.partOf.name] = 1;\r\n                gen\r\n            (\"p%s=1\", oneofProp);\r\n            }\r\n            genVerifyValue(gen, field, i, ref);\r\n        }\r\n        if (field.optional) gen\r\n        (\"}\");\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/verifier.js\n// module id = 30\n// module chunks = 0","\"use strict\";\r\n\r\n/**\r\n * Wrappers for common types.\r\n * @type {Object.<string,IWrapper>}\r\n * @const\r\n */\r\nvar wrappers = exports;\r\n\r\nvar Message = require(\"./message\");\r\n\r\n/**\r\n * From object converter part of an {@link IWrapper}.\r\n * @typedef WrapperFromObjectConverter\r\n * @type {function}\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message<{}>} Message instance\r\n * @this Type\r\n */\r\n\r\n/**\r\n * To object converter part of an {@link IWrapper}.\r\n * @typedef WrapperToObjectConverter\r\n * @type {function}\r\n * @param {Message<{}>} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n * @this Type\r\n */\r\n\r\n/**\r\n * Common type wrapper part of {@link wrappers}.\r\n * @interface IWrapper\r\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\r\n * @property {WrapperToObjectConverter} [toObject] To object converter\r\n */\r\n\r\n// Custom wrapper for Any\r\nwrappers[\".google.protobuf.Any\"] = {\r\n\r\n    fromObject: function(object) {\r\n\r\n        // unwrap value type if mapped\r\n        if (object && object[\"@type\"]) {\r\n            var type = this.lookup(object[\"@type\"]);\r\n            /* istanbul ignore else */\r\n            if (type) {\r\n                // type_url does not accept leading \".\"\r\n                var type_url = object[\"@type\"].charAt(0) === \".\" ?\r\n                    object[\"@type\"].substr(1) : object[\"@type\"];\r\n                // type_url prefix is optional, but path seperator is required\r\n                return this.create({\r\n                    type_url: \"/\" + type_url,\r\n                    value: type.encode(type.fromObject(object)).finish()\r\n                });\r\n            }\r\n        }\r\n\r\n        return this.fromObject(object);\r\n    },\r\n\r\n    toObject: function(message, options) {\r\n\r\n        // decode value if requested and unmapped\r\n        if (options && options.json && message.type_url && message.value) {\r\n            // Only use fully qualified type name after the last '/'\r\n            var name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\r\n            var type = this.lookup(name);\r\n            /* istanbul ignore else */\r\n            if (type)\r\n                message = type.decode(message.value);\r\n        }\r\n\r\n        // wrap value if unmapped\r\n        if (!(message instanceof this.ctor) && message instanceof Message) {\r\n            var object = message.$type.toObject(message, options);\r\n            object[\"@type\"] = message.$type.fullName;\r\n            return object;\r\n        }\r\n\r\n        return this.toObject(message, options);\r\n    }\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/wrappers.js\n// module id = 31\n// module chunks = 0","function webpackBootstrapFunc (modules) {\n/******/  // The module cache\n/******/  var installedModules = {};\n\n/******/  // The require function\n/******/  function __webpack_require__(moduleId) {\n\n/******/    // Check if module is in cache\n/******/    if(installedModules[moduleId])\n/******/      return installedModules[moduleId].exports;\n\n/******/    // Create a new module (and put it into the cache)\n/******/    var module = installedModules[moduleId] = {\n/******/      i: moduleId,\n/******/      l: false,\n/******/      exports: {}\n/******/    };\n\n/******/    // Execute the module function\n/******/    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/    // Flag the module as loaded\n/******/    module.l = true;\n\n/******/    // Return the exports of the module\n/******/    return module.exports;\n/******/  }\n\n/******/  // expose the modules object (__webpack_modules__)\n/******/  __webpack_require__.m = modules;\n\n/******/  // expose the module cache\n/******/  __webpack_require__.c = installedModules;\n\n/******/  // identity function for calling harmony imports with the correct context\n/******/  __webpack_require__.i = function(value) { return value; };\n\n/******/  // define getter function for harmony exports\n/******/  __webpack_require__.d = function(exports, name, getter) {\n/******/    if(!__webpack_require__.o(exports, name)) {\n/******/      Object.defineProperty(exports, name, {\n/******/        configurable: false,\n/******/        enumerable: true,\n/******/        get: getter\n/******/      });\n/******/    }\n/******/  };\n\n/******/  // define __esModule on exports\n/******/  __webpack_require__.r = function(exports) {\n/******/    Object.defineProperty(exports, '__esModule', { value: true });\n/******/  };\n\n/******/  // getDefaultExport function for compatibility with non-harmony modules\n/******/  __webpack_require__.n = function(module) {\n/******/    var getter = module && module.__esModule ?\n/******/      function getDefault() { return module['default']; } :\n/******/      function getModuleExports() { return module; };\n/******/    __webpack_require__.d(getter, 'a', getter);\n/******/    return getter;\n/******/  };\n\n/******/  // Object.prototype.hasOwnProperty.call\n/******/  __webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/  // __webpack_public_path__\n/******/  __webpack_require__.p = \"/\";\n\n/******/  // on error function for async loading\n/******/  __webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n  var f = __webpack_require__(__webpack_require__.s = ENTRY_MODULE)\n  return f.default || f // try to call default if defined to also support babel esmodule exports\n}\n\nvar moduleNameReqExp = '[\\\\.|\\\\-|\\\\+|\\\\w|\\/|@]+'\nvar dependencyRegExp = '\\\\((\\/\\\\*.*?\\\\*\\/)?\\s?.*?(' + moduleNameReqExp + ').*?\\\\)' // additional chars when output.pathinfo is true\n\n// http://stackoverflow.com/a/2593661/130442\nfunction quoteRegExp (str) {\n  return (str + '').replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&')\n}\n\nfunction isNumeric(n) {\n  return !isNaN(1 * n); // 1 * n converts integers, integers as string (\"123\"), 1e3 and \"1e3\" to integers and strings to NaN\n}\n\nfunction getModuleDependencies (sources, module, queueName) {\n  var retval = {}\n  retval[queueName] = []\n\n  var fnString = module.toString()\n  var wrapperSignature = fnString.match(/^function\\s?\\(\\w+,\\s*\\w+,\\s*(\\w+)\\)/)\n  if (!wrapperSignature) return retval\n  var webpackRequireName = wrapperSignature[1]\n\n  // main bundle deps\n  var re = new RegExp('(\\\\\\\\n|\\\\W)' + quoteRegExp(webpackRequireName) + dependencyRegExp, 'g')\n  var match\n  while ((match = re.exec(fnString))) {\n    if (match[3] === 'dll-reference') continue\n    retval[queueName].push(match[3])\n  }\n\n  // dll deps\n  re = new RegExp('\\\\(' + quoteRegExp(webpackRequireName) + '\\\\(\"(dll-reference\\\\s(' + moduleNameReqExp + '))\"\\\\)\\\\)' + dependencyRegExp, 'g')\n  while ((match = re.exec(fnString))) {\n    if (!sources[match[2]]) {\n      retval[queueName].push(match[1])\n      sources[match[2]] = __webpack_require__(match[1]).m\n    }\n    retval[match[2]] = retval[match[2]] || []\n    retval[match[2]].push(match[4])\n  }\n\n  // convert 1e3 back to 1000 - this can be important after uglify-js converted 1000 to 1e3\n  var keys = Object.keys(retval);\n  for (var i = 0; i < keys.length; i++) {\n    for (var j = 0; j < retval[keys[i]].length; j++) {\n      if (isNumeric(retval[keys[i]][j])) {\n        retval[keys[i]][j] = 1 * retval[keys[i]][j];\n      }\n    }\n  }\n\n  return retval\n}\n\nfunction hasValuesInQueues (queues) {\n  var keys = Object.keys(queues)\n  return keys.reduce(function (hasValues, key) {\n    return hasValues || queues[key].length > 0\n  }, false)\n}\n\nfunction getRequiredModules (sources, moduleId) {\n  var modulesQueue = {\n    main: [moduleId]\n  }\n  var requiredModules = {\n    main: []\n  }\n  var seenModules = {\n    main: {}\n  }\n\n  while (hasValuesInQueues(modulesQueue)) {\n    var queues = Object.keys(modulesQueue)\n    for (var i = 0; i < queues.length; i++) {\n      var queueName = queues[i]\n      var queue = modulesQueue[queueName]\n      var moduleToCheck = queue.pop()\n      seenModules[queueName] = seenModules[queueName] || {}\n      if (seenModules[queueName][moduleToCheck] || !sources[queueName][moduleToCheck]) continue\n      seenModules[queueName][moduleToCheck] = true\n      requiredModules[queueName] = requiredModules[queueName] || []\n      requiredModules[queueName].push(moduleToCheck)\n      var newModules = getModuleDependencies(sources, sources[queueName][moduleToCheck], queueName)\n      var newModulesKeys = Object.keys(newModules)\n      for (var j = 0; j < newModulesKeys.length; j++) {\n        modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]] || []\n        modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]].concat(newModules[newModulesKeys[j]])\n      }\n    }\n  }\n\n  return requiredModules\n}\n\nmodule.exports = function (moduleId, options) {\n  options = options || {}\n  var sources = {\n    main: __webpack_modules__\n  }\n\n  var requiredModules = options.all ? { main: Object.keys(sources.main) } : getRequiredModules(sources, moduleId)\n\n  var src = ''\n\n  Object.keys(requiredModules).filter(function (m) { return m !== 'main' }).forEach(function (module) {\n    var entryModule = 0\n    while (requiredModules[module][entryModule]) {\n      entryModule++\n    }\n    requiredModules[module].push(entryModule)\n    sources[module][entryModule] = '(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })'\n    src = src + 'var ' + module + ' = (' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(entryModule)) + ')({' + requiredModules[module].map(function (id) { return '' + JSON.stringify(id) + ': ' + sources[module][id].toString() }).join(',') + '});\\n'\n  })\n\n  src = src + 'new ((' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(moduleId)) + ')({' + requiredModules.main.map(function (id) { return '' + JSON.stringify(id) + ': ' + sources.main[id].toString() }).join(',') + '}))(self);'\n\n  var blob = new window.Blob([src], { type: 'text/javascript' })\n  if (options.bare) { return blob }\n\n  var URL = window.URL || window.webkitURL || window.mozURL || window.msURL\n\n  var workerUrl = URL.createObjectURL(blob)\n  var worker = new window.Worker(workerUrl)\n  worker.objectURL = workerUrl\n\n  return worker\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/webworkify-webpack/index.js\n// module id = 32\n// module chunks = 0","/*\n * Developer : Alexey Zakharov (alexey.zakharov@vectioneer.com)\n * All rights reserved. Copyright (c) 2015 - 2018 VECTIONEER.\n */\n\n'use strict';\n\nimport {Request} from './request';\nimport {RequestAsync} from './request_async';\nimport {MessageTypes} from './message_types';\nimport {Subscribe} from './subscribe';\nimport {SubscribeAsync} from './subscribe_async';\nimport {SessionManager, SessionState} from './session_manager';\n\nimport {version} from '../package.json';\n\nexport class Motorcortex {\n    constructor() {\n        this.version = version;\n        this.MessageTypes = MessageTypes;\n        this.Request = Request;\n        this.RequestAsync = RequestAsync;\n        this.Subscribe = Subscribe;\n        this.SubscribeAsync = SubscribeAsync;\n        this.SessionManager = SessionManager;\n        this.SessionState = SessionState;\n        this.ParameterFlag = {};\n        this.ParameterType = {};\n        this.Permission = {};\n        this.StatusCode = {};\n        this.UserGroup = {};\n        this.DataType = {};\n        this.Unit = {};\n    }\n\n    getParameterFlag(name) {\n        return this.ParameterFlag[name];\n    }\n\n    getParameterType(name) {\n        return this.ParameterType[name];\n    }\n\n    getPermission(name) {\n        return this.Permission[name];\n    }\n\n    getStatusCode(name) {\n        return this.StatusCode[name];\n    }\n\n    getUserGroup(name) {\n        return this.UserGroup[name];\n    }\n\n    getDataType(name) {\n        return this.DataType[name];\n    }\n\n    statusToStr(code) {\n        if (typeof code === 'undefined') {\n            return 'Status code undefined';\n        }\n        switch (code) {\n            case this.StatusCode['OK']:\n                return `Success`;\n            case this.StatusCode['FAILED']:\n                return `Failed (0x${(this.StatusCode['FAILED']).toString(16)})`;\n            case this.StatusCode['FAILED_TO_DECODE']:\n                return `Failed to decode request (0x${(this.StatusCode['FAILED_TO_DECODE']).toString(16)})`;\n            case this.StatusCode['SUB_LIST_IS_FULL']:\n                return `Failed to subscribe, subscription list is full (0x${(this.StatusCode['SUB_LIST_IS_FULL']).toString(16)})`;\n            case this.StatusCode['WRONG_PARAMETER_PATH']:\n                return `Failed to find parameter (0x${(this.StatusCode['WRONG_PARAMETER_PATH']).toString(16)})`;\n            case this.StatusCode['FAILED_TO_SET_REQUESTED_FRQ']:\n                return `Failed to set requested frequency (0x${(this.StatusCode['FAILED_TO_SET_REQUESTED_FRQ']).toString(16)})`;\n            case this.StatusCode['FAILED_TO_OPEN_FILE']:\n                return `Failed to open file (0x${(this.StatusCode['FAILED_TO_OPEN_FILE']).toString(16)})`;\n            case this.StatusCode['READ_ONLY_MODE']:\n                return `Logged in, read-only mode (0x${(this.StatusCode['USER_LOGGED_IN_NO_CONTROL']).toString(16)})`;\n            case this.StatusCode['WRONG_PASSWORD']:\n                return `Wrong login or password (0x${(this.StatusCode['WRONG_PASSWORD']).toString(16)})`;\n            case this.StatusCode['USER_NOT_LOGGED_IN']:\n                return `Operation is not permitted, user is not logged in (0x${(this.StatusCode['USER_NOT_LOGGED_IN']).toString(16)})`;\n            case this.StatusCode['PERMISSION_DENIED']:\n                return `Operation is not permitted, user has no rights (0x${(this.StatusCode['PERMISSION_DENIED']).toString(16)})`;\n            default:\n                // return 'Unknown error. Code: ' + code.toString(16);\n                return code.toString(16);\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core.js","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@protobufjs/base64/index.js\n// module id = 34\n// module chunks = 0","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @param {string[]} functionParams Function parameter names\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n */\r\nfunction codegen(functionParams, functionName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (typeof functionParams === \"string\") {\r\n        functionName = functionParams;\r\n        functionParams = undefined;\r\n    }\r\n\r\n    var body = [];\r\n\r\n    /**\r\n     * Appends code to the function's body or finishes generation.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any\r\n     * @param {...*} [formatParams] Format parameters\r\n     * @returns {Codegen|Function} Itself or the generated function if finished\r\n     * @throws {Error} If format parameter counts do not match\r\n     */\r\n\r\n    function Codegen(formatStringOrScope) {\r\n        // note that explicit array handling below makes this ~50% faster\r\n\r\n        // finish the function\r\n        if (typeof formatStringOrScope !== \"string\") {\r\n            var source = toString();\r\n            if (codegen.verbose)\r\n                console.log(\"codegen: \" + source); // eslint-disable-line no-console\r\n            source = \"return \" + source;\r\n            if (formatStringOrScope) {\r\n                var scopeKeys   = Object.keys(formatStringOrScope),\r\n                    scopeParams = new Array(scopeKeys.length + 1),\r\n                    scopeValues = new Array(scopeKeys.length),\r\n                    scopeOffset = 0;\r\n                while (scopeOffset < scopeKeys.length) {\r\n                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];\r\n                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];\r\n                }\r\n                scopeParams[scopeOffset] = source;\r\n                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func\r\n            }\r\n            return Function(source)(); // eslint-disable-line no-new-func\r\n        }\r\n\r\n        // otherwise append to body\r\n        var formatParams = new Array(arguments.length - 1),\r\n            formatOffset = 0;\r\n        while (formatOffset < formatParams.length)\r\n            formatParams[formatOffset] = arguments[++formatOffset];\r\n        formatOffset = 0;\r\n        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {\r\n            var value = formatParams[formatOffset++];\r\n            switch ($1) {\r\n                case \"d\": case \"f\": return String(Number(value));\r\n                case \"i\": return String(Math.floor(value));\r\n                case \"j\": return JSON.stringify(value);\r\n                case \"s\": return String(value);\r\n            }\r\n            return \"%\";\r\n        });\r\n        if (formatOffset !== formatParams.length)\r\n            throw Error(\"parameter count mismatch\");\r\n        body.push(formatStringOrScope);\r\n        return Codegen;\r\n    }\r\n\r\n    function toString(functionNameOverride) {\r\n        return \"function \" + (functionNameOverride || functionName || \"\") + \"(\" + (functionParams && functionParams.join(\",\") || \"\") + \"){\\n  \" + body.join(\"\\n  \") + \"\\n}\";\r\n    }\r\n\r\n    Codegen.toString = toString;\r\n    return Codegen;\r\n}\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @function codegen\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * When set to `true`, codegen will log generated code to console. Useful for debugging.\r\n * @name util.codegen.verbose\r\n * @type {boolean}\r\n */\r\ncodegen.verbose = false;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@protobufjs/codegen/index.js\n// module id = 35\n// module chunks = 0","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@protobufjs/eventemitter/index.js\n// module id = 36\n// module chunks = 0","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(\"@protobufjs/aspromise\"),\r\n    inquire   = require(\"@protobufjs/inquire\");\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction fetch(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    if (!callback)\r\n        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n    if (!options.xhr && fs && fs.readFile)\r\n        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch.xhr(filename, options, callback)\r\n                : err\r\n                ? callback(err)\r\n                : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n        });\r\n\r\n    // use the XHR version otherwise.\r\n    return fetch.xhr(filename, options, callback);\r\n}\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\r\n\r\n/**/\r\nfetch.xhr = function fetch_xhr(filename, options, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n\r\n        if (xhr.readyState !== 4)\r\n            return undefined;\r\n\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n\r\n        // if binary data is expected, make sure that some sort of array is returned, even if\r\n        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n        if (options.binary) {\r\n            var buffer = xhr.response;\r\n            if (!buffer) {\r\n                buffer = [];\r\n                for (var i = 0; i < xhr.responseText.length; ++i)\r\n                    buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n            }\r\n            return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n        }\r\n        return callback(null, xhr.responseText);\r\n    };\r\n\r\n    if (options.binary) {\r\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n        if (\"overrideMimeType\" in xhr)\r\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        xhr.responseType = \"arraybuffer\";\r\n    }\r\n\r\n    xhr.open(\"GET\", filename);\r\n    xhr.send();\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@protobufjs/fetch/index.js\n// module id = 37\n// module chunks = 0","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@protobufjs/float/index.js\n// module id = 38\n// module chunks = 0","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@protobufjs/path/index.js\n// module id = 39\n// module chunks = 0","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@protobufjs/pool/index.js\n// module id = 40\n// module chunks = 0","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@protobufjs/utf8/index.js\n// module id = 41\n// module chunks = 0","/*\n * Developer : Alexey Zakharov (alexey.zakharov@vectioneer.com)\n * All rights reserved. Copyright (c) 2015 - 2018 VECTIONEER.\n */\n\n'use strict';\n\nimport {ParameterTree} from './request';\nimport {Deferred, ConnectionState} from './utils';\nimport work from 'webworkify-webpack';\n/**\n * Request/Reply communication is used to send commands to a motorcortex server.\n */\n\nexport class RequestAsync {\n\n    /**\n     * Creates request object\n     * @constructor\n     * @param {MessageTypes} protobuf_types Reference to an instance of the MessageTypes class.\n     * @example\n     * // Loading messages\n     * let motorcortex_types = new motorcortex.MessageTypes();\n     * let type_load_done = motorcortex_types.load([{\n     *      'proto': 'motorcortex.proto',\n     *      'hash': 'motorcortex_hash.json'}]);\n     * // Creating Request connection\n     * let req = new motorcortex.Request(motorcortex_types);\n     * let req_conn_done = req.connect(`ws://localhost:5558`);\n     */\n    constructor(protobuf_types) {\n\n        this.worker = work(require.resolve('@workers/request.worker.js'));\n        this.worker_queue = {};\n        this.worker_task_id = 0;\n        this.protobuf_types = protobuf_types;\n        this.connection_state = ConnectionState.CLOSED;\n\n        let _this = this;\n        this.worker.addEventListener('message', function (e) {\n            let data = e.data;\n            let id = data.id;\n            let reply = data.reply;\n\n            // if id >= this is a reply to the request\n            if (id >= 0) {\n                if (reply.type == 'success') {\n                    _this.worker_queue[id].resolve(reply.result);\n                } else {\n                    _this.worker_queue[id].reject(reply.result);\n                }\n                delete _this.worker_queue[id];\n\n            }\n            // if id < 0 this not a reply, but event from the worker\n            else {\n                if (reply.type == 'connection_closed') {\n                    _this.connection_state = ConnectionState.CLOSED;\n                    _this.connectionClosed();\n                }\n            }\n        }, false);\n    }\n\n    /**\n     * Returns loaded message types.\n     */\n    getMessageTypes() {\n        return this.protobuf_types;\n    }\n\n    post(arg, port = undefined) {\n        let clb = new Deferred();\n        this.worker_queue[this.worker_task_id] = clb;\n        this.worker.postMessage({id: this.worker_task_id++, request: arg}, port);\n        return clb.promise;\n    }\n\n    registerSubscriber(port) {\n        return this.post({type: 'registerSubscribe'}, [port]);\n    }\n\n    loadedFiles() {\n        return this.protobuf_types.loadedFiles();\n    }\n\n    loadProto(protobuf_files) {\n        let index = document.URL.lastIndexOf('/');\n        const url = document.URL.substring(0, index + 1);\n\n        let full_address = [];\n        for (let proto_pair of protobuf_files) {\n            full_address.push({\n                proto: url + proto_pair.proto,\n                hash: url + proto_pair.hash\n            });\n        }\n\n        return this.post({type: 'loadProto', files: full_address});\n    }\n\n    connect(url, timeout_ms, max_request_queue_size) {\n        this.connection_state = ConnectionState.CONNECTING;\n        let loaded_files = this.protobuf_types.loadedFiles();\n        if (!loaded_files) {\n            throw \"No files are loaded, call load first.\";\n        }\n        let types_loaded = this.loadProto(loaded_files);\n        let connected = this.post({\n            type: 'connect',\n            url: url,\n            timeout_ms: timeout_ms,\n            max_request_queue_size: max_request_queue_size\n        });\n        let ret = new Deferred();\n        let _this = this;\n        Promise.all([types_loaded, connected])\n            .then(e => {\n                _this.connection_state = ConnectionState.OPEN;\n                ret.resolve(e);\n            })\n            .catch(e => {\n                _this.connection_state = ConnectionState.CLOSED;\n                ret.reject(e);\n            });\n        return ret.promise;\n    }\n\n    /**\n     * Actual Request/reply connection state.\n     * @return {number} Returns a connection state.\n     * @example\n     * CONNECTING   0    The connection is not yet open\n     * OPEN         1    The connection is open and ready to communicate\n     * CLOSING      2    The connection is in the process of closing\n     * CLOSED       3    The connection is closed or could not be opened\n     */\n    connectionState() {\n        return this.connection_state;\n    }\n\n    connectionClosed() {\n    }\n\n    /**\n     * Closes connection to the server\n     */\n    close() {\n        if ((this.connectionState() !== ConnectionState.CLOSING) &&\n            (this.connectionState() !== ConnectionState.CLOSED)) {\n            this.connection_state = ConnectionState.CLOSING;\n            this.post({type: 'close'});\n        }\n    }\n\n    ///////////\n    /**\n     * Sends a login request to the server\n     * @param {string} login User login.\n     * @param {string} password User password.\n     * @return {Promise<StatusMsg>} Returns a Promise, which resolves if login is successful and fails otherwise.\n     * Returned message has a status code, which indicates a status of the login.\n     * @see motorcortex.proto, StatusMsg, StatusCode\n     * @example\n     * let login_reply = req.login('operator', 'god123');\n     * login_reply.then(function (reply) {\n     *      console.log('Logged-in successful: ' + motorcortex.statusToStr(reply.status));\n     * }).catch( function(reply) {\n     *      console.log('Failed to login: ' + motorcortex.statusToStr(reply.status));\n     * });\n     */\n    login(login, password) {\n        return this.post({type: 'login', login: login, password: password});\n    }\n\n    /**\n     * Sends logout request to the server\n     * @return {Promise<StatusMsg>} Returns a Promise, which resolves if login is successful and fails otherwise.\n     * @see motorcortex.proto, StatusMsg, StatusCode\n     * @example\n     * let logout_reply = req.logout();\n     * logout_reply.then(function (reply) {\n     *      console.log('Logged-out successful: ' + motorcortex.statusToStr(reply.status));\n     * }).catch( function(reply) {\n     *      console.log('Failed to logout: ' + motorcortex.statusToStr(reply.status));\n     * });\n     */\n    logout() {\n        return this.post({type: 'logout'});\n    }\n\n    /**\n     *\n     *\n     *\n     *\n     *\n     */\n    getSessionTokenMsg() {\n        return this.post({type: 'getSessionTokenMsg'});\n    }\n\n    /**\n     *\n     *\n     *\n     *\n     *\n     */\n    restoreSessionMsg(token) {\n        return this.post({type: 'restoreSessionMsg', token: token});\n    }\n\n    /**\n     * Requests a parameter tree from the cache or from the server\n     * @param {integer} Timeout in milliseconds.\n     * @return {Promise<ParameterTreeMsg>} Returns a Promise, which resolves when parameter tree is received or fails\n     * otherwise. ParameterTreeMsg message has a status files to check the status of the operation.\n     * @see motorcortex.proto, ParameterTreeMsg, StatusCode\n     * @example\n     * let param_tree_reply = req.getParameterTree();\n     * param_tree_reply.then(function (param_tree) {\n     *      console.log('Got parameter tree msg: ' + JSON.stringify(param_tree));\n     * }).catch( function(param_tree) {\n     *      console.log('Failed to get parameter tree: ' + motorcortex.statusToStr(param_tree.status));\n     * });\n     */\n    getParameterTree(timeout_msec) {\n        let reply = this.post({type: 'getParameterTree', timeout_msec: timeout_msec});\n        return new Promise(function (resolve, reject) {\n            reply.then(tree => {\n                let param_tree = new ParameterTree();\n                param_tree.__initTree(tree);\n                resolve(param_tree);\n            }).catch(e => {\n                reject(e);\n            });\n        });\n    }\n\n    /**\n     * Requests a parameter tree hash from the server\n     * @return {Promise<ParameterTreeHashMsg>} Returns a Promise, which resolves when tree hash message is received or\n     * fails otherwise.\n     * @see motorcortex.proto, ParameterTreeHashMsg, StatusCode\n     * @example\n     * let tree_hash_reply = req.getParameterTreeHash();\n     * tree_hash_reply.then(function (tree_hash) {\n     *      console.log('Got parameter tree hash: ' + tree_hash.hash);\n     * }).catch( function(tree_hash) {\n     *      console.log('Failed to get tree hash: ' + motorcortex.statusToStr(tree_hash.status));\n     * });\n     *\n     */\n    getParameterTreeHash() {\n        return this.post({type: 'getParameterTreeHash'});\n    }\n\n    /**\n     * Requests a parameter with full information and value from the server\n     * @param {string} path Parameter path in the tree.\n     * @return {Promise<ParameterMsg>} Returns a Promise, which resolves when parameter message is successfully obtained,\n     * fails otherwise.\n     * @see motorcortex.proto, ParameterMsg, StatusCode\n     * @example\n     * let param_reply = req.getParameter('root/Control/actualActuatorPositions');\n     * param_reply.then(function (param) {\n     *      console.log('Got parameter: ' + JSON.stringify(param));\n     * }).catch( function(param) {\n     *      console.log('Failed to get parameter: ' + motorcortex.statusToStr(param.status));\n     * });\n     */\n    getParameter(path) {\n        return this.post({type: 'getParameter', path: path});\n    }\n\n    /**\n     * Sets new value to a parameter with given path.\n     * @param {string} path Parameter path in the tree.\n     * @param {any} value New parameter value.\n     * @param {{offset, length}=} options Various options to parametrize Set operation. For example 'offset' and\n     * 'length' could be used to set an element offset and number of the elements to update in the destination array.\n     * @return {Promise<StatusMsg>} Returns a Promise, which resolves when parameter value is updated or fails otherwise.\n     * @see motorcortex.proto, StatusMsg, StatusCode\n     * @example\n     * // updates a value of a simple parameter\n     * let reply_handle = req.setParameter('root/Motorcontroller/actualmode', 2);\n     * reply_handle.catch( function(reply) {\n     *      console.log('Failed to set parameter: ' + motorcortex.statusToStr(reply.status));\n     * });\n     *\n     * // updates an array\n     * req.setParameter('root/Control/dummyDoubleArray6', [1.1,1.2,1.3,1.4,1.5,1.6]);\n     * // updates single element of array with the offset 2 (index 3)\n     * req.setParameter('root/Control/dummyDoubleArray6', 1.0, {offset: 2});\n     * // updates 2 elements of the arrays with the offset 4\n     * req.setParameter('root/Control/dummyDoubleArray6', [10.0, 20.0], {offset: 4, length: 2});\n     */\n    setParameter(path, value, options = {}) {\n        return this.post({type: 'setParameter', path: path, value: value, options: options});\n    }\n\n\n    /**\n     * Overwrites actual value of the parameter and depending on the flag forces this value to stay active.\n     * This method of setting values is useful during debug and installation process, it is not recommended to use\n     * this method during normal operation.\n     * @param {string} path Parameter path in the tree.\n     * @param {any} value New parameter value.\n     * @param {bool=} force_activate Forces new value to stay active. By default is set to 'false'.\n     * @param {{offset, length}=} options Various options to parametrize Set operation. For example 'offset' and\n     * 'length' could be used to set an element offset and number of the elements to update in the destination array.\n     * @return {Promise<StatusMsg>} Returns a Promise, which resolves when parameter value is updated or fails otherwise.\n     * @see motorcortex.proto, StatusMsg, StatusCode\n     * @example\n     * // overwrite and force to stay active a value of a simple parameter\n     * let reply_handle = req.overwriteParameter('root/Motorcontroller/actualmode', 2, true);\n     * reply_handle.catch( function(reply) {\n     *      console.log('Failed to set parameter: ' + motorcortex.statusToStr(reply.status));\n     * });\n     *\n     * // overwrite and force to stay active an array\n     * req.overwriteParameter('root/Control/dummyDoubleArray6', [1.1,1.2,1.3,1.4,1.5,1.6], true);\n     * // overwrite and release force of a single element of the array with an offset 2 (index 3)\n     * req.overwriteParameter('root/Control/dummyDoubleArray6', 1.0, {offset: 2});\n     * // overwrite and force to stay active 2 elements of the arrays with an offset 4\n     * req.overwriteParameter('root/Control/dummyDoubleArray6', [10.0, 20.0], {offset: 4, length: 2});\n     */\n    overwriteParameter(path, value, force_activate = false, options = {}) {\n        return this.post({\n            type: 'overwriteParameter', path: path, value: value,\n            force_activate: force_activate, options: options\n        });\n    }\n\n    /**\n     * Deactivate overwrite operation of the parameter.\n     * @param {string} path Path to a parameter in the tree.\n     * @return {Promise<StatusMsg>} Returns a Promise, which resolves when parameter overwrite is deactivated or fails\n     * otherwise.\n     * @see motorcortex.proto, StatusMsg, StatusCode\n     * @example\n     * let reply_handle = releaseParameter('root/Motorcontroller/actualmode');\n     * reply_handle.catch( function(reply) {\n     *      console.log('Failed to release overwrite of the parameter: ' + motorcortex.statusToStr(reply.status));\n     * });\n     */\n    releaseParameter(path) {\n        return this.post({type: 'releaseParameter', path: path});\n    }\n\n    /**\n     * Sets new values to a parameter list.\n     * @param {Array<{path,value,options}>} param_list A list of the parameters to update values.\n     * @return {Promise<StatusMsg>} Returns a Promise, which resolves when parameters from the list are updated,\n     * otherwise fails.\n     * @see setParameter, motorcortex.proto, StatusMsg, StatusCode\n     * @example\n     * let reply_handle = req.setParameterList([{path: 'root/Motorcontroller/actualmode', value: 2},\n     *      {path: 'root/Control/dummyDoubleArray6', value: [1.1,1.2,1.3,1.4,1.5,1.6]},\n     *      {path: 'root/Control/dummyDoubleArray6', value: [10.0, 20.0], options:  {offset: 4, length: 2}}]);\n     * reply_handle.catch( function(reply) {\n     *      console.log('Failed to set list of parameter: ' + motorcortex.statusToStr(reply.status));\n     * });\n     */\n    setParameterList(param_list) {\n        return this.post({type: 'setParameterList', param_list: param_list});\n    }\n\n    /**\n     * Get info and values of requested parameters.\n     * @param {Array<string>} path_list List of parameter paths.\n     * @param {number} timeout_ms Reply timeout in milliseconds.\n     * @return {Promise<StatusMsg>} Returns a Promise, which resolves when list of the parameter values is received,\n     * otherwise fails.\n     * @see getParameter, motorcortex.proto, StatusMsg, StatusCode\n     * @example\n     * let reply_handle = req.getParameterList(['root/Motorcontroller/actualmode, 'root/Control/dummyDoubleArray6']);\n     * reply_handle.then( function(param_list) {\n     *      console.log('Got parameter list: ' + JSON.stringify(param_list));\n     * }).catch( function(param_list) {\n     *      console.log('Failed to get parameter list: ' + motorcortex.statusToStr(param_list.status));\n     * });\n     */\n    getParameterList(path_list, timeout_ms) {\n        return this.post({type: 'getParameterList', path_list: path_list, timeout_ms: timeout_ms});\n    }\n\n\n    createGroup(path_list, group_alias, frq_divider) {\n        return this.post({\n            type: 'createGroup', path_list: path_list, group_alias: group_alias,\n            frq_divider: frq_divider\n        });\n    }\n\n    removeGroup(group_alias) {\n        return this.post({type: 'removeGroup', group_alias: group_alias});\n    }\n\n    /**\n     * Request a server to save a parameter tree in the file.\n     * @param {string} file_name A file name where to save actual state of the parameter tree\n     * @return {Promise<StatusMsg>} Returns a Promise, which resolves when save operation is completed,\n     * fails otherwise.\n     * @see motorcortex.proto, StatusMsg, StatusCode\n     * @example\n     * let reply = req.save('controls.xml');\n     * reply.catch( function(save) {\n     *      console.log('Failed to save parameters:' + motorcortex.statusToStr(save.status));\n     * });\n     */\n    save(file_name) {\n        return this.post({type: 'save', file_name: file_name});\n    }\n\n    /**\n     * Request a server to load value from the file to the parameter tree.\n     * @param {string} file_name A file name from which to load values to the parameter tree.\n     * @return {Promise<StatusMsg>} Returns a Promise, which resolves when load operation is complete,\n     * fails otherwise.\n     * @see motorcortex.proto, StatusMsg, StatusCode\n     * @example\n     * let reply = req.load('controls.xml');\n     * reply.catch( function(load) {\n     *      console.log('Failed to load parameters:' + motorcortex.statusToStr(load.status));\n     * });\n     */\n    load(file_name) {\n        return this.post({type: 'load', file_name: file_name});\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/request_async.js","/*\n * Developer : Alexey Zakharov (alexey.zakharov@vectioneer.com)\n * All rights reserved. Copyright (c) 2015 - 2018 VECTIONEER.\n */\n\nimport {Deferred, ConnectionState} from './utils'\n\nexport const SessionState = {\n    CONNECTING: 0,\n    CONNECTION_OK: 1,\n    CONNECTION_LOST: 2,\n    CONNECTION_FAILED: 3,\n\n    DISCONNECTING: 4,\n    DISCONNECTED: 5,\n\n    getInfo(state) {\n        let state_info = '';\n        switch (state) {\n            case SessionState.CONNECTING:\n                state_info = 'connecting';\n                break;\n\n            case SessionState.CONNECTION_OK:\n                state_info = 'connected';\n                break;\n\n            case SessionState.CONNECTION_LOST:\n                state_info = 'connection lost';\n                break;\n\n            case SessionState.CONNECTION_FAILED:\n                state_info = 'failed to connect';\n                break;\n\n            case SessionState.DISCONNECTING:\n                state_info = 'disconnecting';\n                break;\n\n            case SessionState.DISCONNECTED:\n                state_info = 'disconnected';\n                break;\n\n            default:\n                state_info = 'unknown state';\n                break;\n        }\n\n        return state_info;\n    }\n};\n\n\nclass ConnectionData {\n    constructor(host, req_port, sub_port, request_timeout_ms, tree_timeout_ms, queue_length) {\n        this.host = host;\n        this.uri = `ws://${host}`\n        this.req_port = req_port;\n        this.sub_port = sub_port;\n        this.request_timeout_ms = request_timeout_ms ? request_timeout_ms : 1000;\n        this.tree_timeout_ms = tree_timeout_ms ? tree_timeout_ms : 15000;\n        this.max_request_queue_length = queue_length;\n    }\n\n    getRequestUri() {\n        return `ws://${this.host}:${this.req_port}`;\n    }\n\n    getSubscribeUri() {\n        return `ws://${this.host}:${this.sub_port}`;\n    }\n\n    getRequestTimeoutMs() {\n        return this.request_timeout_ms;\n    }\n\n    getTreeTimeoutMs() {\n        return this.tree_timeout_ms;\n    }\n\n    getQueueLength() {\n        return this.max_request_queue_length;\n    }\n}\n\nexport class SessionManager {\n    constructor(request, subscribe) {\n\n        this.request = request;\n        this.subscribe = subscribe;\n        this.connection_data = null;\n        this.token = null;\n        this.state = SessionState.DISCONNECTED;\n        this.observers = [];\n        this.check_connection_interval_ms = 1000;\n        this.check_token_interval_ms = 60000;\n        this.check_connection_timer = null;\n        this.update_token_timer = null;\n\n    }\n\n    close() {\n        this.clearTimers();\n        return this.closing(false);\n    }\n\n    closing(reconnection) {\n\n        let req_closed = new Deferred();\n        let sub_closed = new Deferred();\n        let req = this.request;\n        let sub = this.subscribe;\n\n        if (req.connectionState() === ConnectionState.CLOSED) {\n            req_closed.resolve();\n        } else if (req.connectionState() !== ConnectionState.CLOSING) {\n            this.request.close();\n            if (!reconnection) {\n                this.stateChange(SessionState.DISCONNECTING);\n            }\n        }\n\n        if (sub.connectionState() === ConnectionState.CLOSED) {\n            sub_closed.resolve();\n        } else if (sub.connectionState() !== ConnectionState.CLOSING) {\n            this.subscribe.close();\n            if (!reconnection) {\n                this.stateChange(SessionState.DISCONNECTING);\n            }\n        }\n\n        let connection_closed = new Deferred;\n        Promise.all([req_closed, sub_closed]).then(msg => {\n            if (!reconnection) {\n                this.stateChange(SessionState.DISCONNECTED);\n            }\n            connection_closed.resolve(msg[0]);\n        }).catch(e => {\n            connection_closed.reject(e);\n        })\n        return connection_closed.promise;\n\n    }\n\n    updateToken() {\n        this.request.getSessionTokenMsg().then(msg => {\n            if (this.getState() == SessionState.CONNECTION_OK) {\n                this.token = msg.token;\n            }\n        }).catch(e => {\n            if (this.getState() == SessionState.CONNECTION_OK) {\n                console.warn('Server does not support session token.');\n                this.token = null;\n            }\n        })\n    }\n\n    clearTimers() {\n        clearInterval(this.check_connection_timer);\n        clearInterval(this.update_token_timer);\n    }\n\n    initTimers() {\n        this.clearTimers();\n        this.check_connection_timer = setInterval(this.checkSessionState.bind(this),\n            this.check_connection_interval_ms);\n\n        this.update_token_timer = setInterval(function () {\n            this.request.getSessionTokenMsg().then(msg => {\n                this.token = msg.token;\n            }).catch(e => {\n                // do nothing\n            })\n        }, this.check_token_interval_ms);\n    }\n\n    // restores active session\n    restore() {\n        let session_ready = new Deferred();\n        let _this = this;\n\n        if (this.token) {\n            this.closing(true).then(msg => {\n                this.stateChange(SessionState.CONNECTING);\n                let req_ready = new Deferred();\n                let req_handle = this.request.connect(this.connection_data.getRequestUri(),\n                    this.connection_data.getRequestTimeoutMs(),\n                    this.connection_data.getQueueLength());\n                let sub_handle = this.subscribe.connect(this.connection_data.getSubscribeUri());\n\n                // establishing request connection, opening new session, loading parameter tree;\n                req_handle.then(msg => {\n                    return _this.request.restoreSessionMsg(this.token);\n                }).then(msg => {\n                    return this.request.getParameterTree(_this.connection_data.getTreeTimeoutMs());\n                }).then(msg => {\n                    // _this.token = msg.token;\n                    req_ready.resolve(msg);\n                }).catch(e => {\n                    req_ready.reject(e);\n                });\n\n                Promise.all([req_ready.promise, sub_handle]).then(msg => {\n                    _this.updateToken();\n                    _this.initTimers();\n                    _this.stateChange(SessionState.CONNECTION_OK);\n                    session_ready.resolve(msg);\n                }).catch(e => {\n                    _this.stateChange(SessionState.CONNECTION_LOST);\n                    _this.request.close();\n                    _this.subscribe.close();\n                    session_ready.reject(e);\n                });\n            });\n        } else {\n            this.stateChange(SessionState.CONNECTION_FAILED);\n            session_ready.reject('Token is empty');\n        }\n\n        return session_ready.promise;\n    }\n\n    checkSessionState() {\n\n        switch (this.state) {\n            case SessionState.CONNECTION_FAILED:\n                // if connection failed, stop trying to reconnect\n                this.clearTimers();\n                break;\n            case SessionState.CONNECTION_LOST:\n                // if connection is lost try to reconnect\n                this.restore().then(msg => {\n                }).catch(e => {\n\n                });\n                break;\n            case SessionState.CONNECTION_OK:\n                this.request.getParameterTreeHash().then(msg => {\n                    // if connection was lost but the client was able to reconnect\n                    if (this.getState() == SessionState.CONNECTION_LOST) {\n                        this.stateChange(SessionState.CONNECTION_OK);\n                    }\n                }).catch(e => {\n                    // if there are no errors, switch to connection lost, otherwise keep the error\n                    if (!this.hasError() && this.isConnecting()) {\n                        this.stateChange(SessionState.CONNECTION_LOST);\n                    }\n                });\n            default:\n                break;\n        }\n\n    }\n\n    // opens new session\n    open(connection_data, login_data, options) {\n\n        this.stateChange(SessionState.CONNECTING);\n        if (connection_data !== null && typeof connection_data === 'object') {\n            this.connection_data = new ConnectionData(connection_data.host,\n                connection_data.request_port,\n                connection_data.subscribe_port,\n                connection_data.request_timeout_ms,\n                connection_data.tree_timeout_ms,\n                connection_data.queue_length);\n        }\n\n        let req_ready = new Deferred();\n        let req_handle = this.request.connect(this.connection_data.getRequestUri(),\n            this.connection_data.getRequestTimeoutMs(),\n            this.connection_data.getQueueLength());\n        let sub_handle = this.subscribe.connect(this.connection_data.getSubscribeUri());\n\n        // establishing request connection, opening new session, loading parameter tree;\n        let _this = this;\n        req_handle.then(msg => {\n            return _this.request.login(login_data.login, login_data.password);\n        }).then(msg => {\n            return this.request.getParameterTree(_this.connection_data.getTreeTimeoutMs());\n        }).then(msg => {\n            req_ready.resolve(msg);\n        }).catch(e => {\n            req_ready.reject(e);\n        });\n\n        let session_ready = new Deferred();\n        Promise.all([req_ready.promise, sub_handle]).then(msg => {\n            _this.updateToken();\n            _this.initTimers();\n            _this.stateChange(SessionState.CONNECTION_OK);\n            session_ready.resolve(msg[0]);\n        }).catch(e => {\n            _this.stateChange(SessionState.CONNECTION_FAILED);\n            _this.request.close();\n            _this.subscribe.close();\n            session_ready.reject(e);\n        });\n\n        return session_ready.promise;\n    }\n\n    stateChange(state) {\n        if (state !== this.state) {\n            this.state = state;\n            for (let observer of this.observers) {\n                observer({state: state});\n            }\n        }\n    }\n\n    ready() {\n        return this.state == SessionState.CONNECTION_OK;\n    }\n\n    hasError() {\n        return this.state == SessionState.CONNECTION_LOST ||\n            this.state == SessionState.CONNECTION_FAILED;\n    }\n\n    isConnecting() {\n        return this.state == SessionState.CONNECTION_OK ||\n            this.state == SessionState.CONNECTING;\n    }\n\n    notify(observer) {\n        this.observers = [].concat(observer);\n    }\n\n    getState() {\n        return this.state;\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/session_manager.js","/*\n * Developer : Alexey Zakharov (alexey.zakharov@vectioneer.com)\n * All rights reserved. Copyright (c) 2015 - 2018 VECTIONEER.\n */\n\n'use strict';\n\nimport {Subscription} from './subscribe';\nimport {Deferred, ConnectionState} from './utils';\nimport work from 'webworkify-webpack';\n\nexport class SubscribeAsync {\n    /**\n     * Creates subscribe\n     * @constructor\n     * @param {Request} request A reference to the request object.\n     */\n    constructor(request) {\n        this.worker = work(require.resolve('@workers/subscribe.worker.js'));\n        this.worker_queue = {};\n        this.worker_task_id = 0;\n        this.request = request;\n        this.connection_state = ConnectionState.CLOSED;\n        this.subscriptions = {};\n\n\n        let _this = this;\n        this.worker.addEventListener('message', function (e) {\n            let data = e.data;\n            let id = data.id;\n            let reply = data.reply;\n\n            // if id >= this is a reply to the request\n            if (id == -2) {\n                let sub = _this.subscriptions[reply.id];\n                if (sub) {\n                    let observer = sub._getObserver();\n                    if (observer) {\n                        for (let item of reply.data) {\n                            observer(item);\n                        }\n                    }\n                }\n            } else if (id == -1) {\n                // connection closed\n                if (reply.type == 'connection_closed') {\n                    _this.connection_state = ConnectionState.CLOSED;\n                    _this.connectionClosed();\n                }\n            } else {\n                if (reply.type == 'success') {\n                    _this.worker_queue[id].resolve(reply.result);\n                } else {\n                    _this.worker_queue[id].reject(reply.result);\n                }\n                delete _this.worker_queue[id];\n            }\n        }, false);\n\n        let channel = new MessageChannel();\n        this.post({type: 'registerRequest'}, [channel.port1])\n        this.request.registerSubscriber(channel.port2).catch(e => {\n            console.error('Failed to register subscriber');\n        });\n\n    }\n\n\n    post(arg, port = undefined) {\n        let clb = new Deferred();\n        this.worker_queue[this.worker_task_id] = clb;\n        this.worker.postMessage({id: this.worker_task_id++, request: arg}, port);\n        return clb.promise;\n    }\n\n    /**\n     * Actual Publish/Subscribe connection state.\n     * @return {number} Returns a connection state.\n     * @example\n     * CONNECTING   0    The connection is not yet open\n     * OPEN         1    The connection is open and ready to communicate\n     * CLOSING      2    The connection is in the process of closing\n     * CLOSED       3    The connection is closed or could not be opened\n     */\n    connectionState() {\n        return this.connection_state;\n    }\n\n    loadProto(protobuf_files) {\n        let index = document.URL.lastIndexOf('/');\n        const url = document.URL.substring(0, index + 1);\n\n        let full_address = [];\n        for (let proto_pair of protobuf_files) {\n            full_address.push({\n                proto: url + proto_pair.proto,\n                hash: url + proto_pair.hash\n            });\n        }\n\n        return this.post({type: 'loadProto', files: full_address});\n    }\n\n    /**\n     * Opens a subscribe connection.\n     * @param {string} url Motorcortex server URL.\n     * @return {Promise<string>} A promise, which completes when connection is ready.\n     * If connection is failed, short error description is passed to the cathe method.\n     * @example\n     * let sub = new motorcortex.Subscribe(req);\n     * let sub_conn_done = sub.connect(`ws://${server}:5557`);\n     * sub_conn_done.then(function () {\n     *      console.log('Subscribe connection is established');\n     * })\n     * .catch(function (reason) {\n     *      console.error('Failed to establish connection: ' + reason);\n     * });\n     */\n    connect(url) {\n        this.connection_state = ConnectionState.CONNECTING;\n        let loaded_files = this.request.loadedFiles();\n        if (!loaded_files) {\n            throw \"No files are loaded, call load first.\";\n        }\n        let types_loaded = this.loadProto(loaded_files);\n        let connected = this.post({\n            type: 'connect',\n            url: url\n        });\n        let ret = new Deferred();\n        let _this = this;\n        Promise.all([types_loaded, connected])\n            .then(e => {\n                _this.connection_state = ConnectionState.OPEN;\n                ret.resolve(e);\n            })\n            .catch(e => {\n                _this.connection_state = ConnectionState.CLOSED;\n                ret.reject(e);\n            });\n\n        return ret.promise;\n    }\n\n    connectionClosed() {\n    }\n\n    /**\n     * Closes connection to the server\n     */\n    close() {\n        if ((this.connectionState() !== ConnectionState.CLOSING) &&\n            (this.connectionState() !== ConnectionState.CLOSED)) {\n            this.connection_state = ConnectionState.CLOSING;\n            this.post({type: 'close'});\n        }\n    }\n\n    /**\n     * Create a subscription group for a list of the parameters.\n     * @param {Array<string>} path_list List of the parameters to subscribe to.\n     * @param {string} group_alias Name of the group.\n     * @param {number=} frq_divider Frequency divider is a downscaling factor of the group publish rate.\n     * Default value is 1, every cycle of the publisher.\n     * @return {Subscription<GroupStatusMsg>} Returns a subscription handle, which acts as a JavaScript Promise,\n     * it is resolved when subscription is ready or failed. After the subscription\n     * is ready the handle is used to retrieve latest data.\n     * @see Subscription, motorcortex.proto, GroupStatusMsg, StatusCode\n     * @example\n     * let data_sub = sub.subscribe([\"root/Control/jointReferenceGenerator/enable\",\n     *      \"root/Control/jointReferenceGenerator/signalGenerator01/amplitude\",\n     *      \"root/Control/jointReferenceGenerator/signalGenerator02/amplitude\"], \"group1\");\n     *\n     * data_sub.then(function (subscription) {\n     *      console.log('Subscription is ready');\n     *      // when subscription is ready, setting an update callback\n     *      data_sub.notify(function (parameters) {\n     *          console.log('Received group update');\n     *          let layout = data_sub.layout();\n     *          for(let i = 0; i < layout.length; i++) {\n     *              console.log(\"Parameter: \" + layout[i] + \" value: \" + parameters[i].toString());\n     *          }\n     *      }\n     * }).catch(function (subscription) {\n     *      console.log('Failed to subscribe: ' + motorcortex.statusToStr(group.status));\n     * });\n     */\n    subscribe(path_list, group_alias, frq_divider) {\n        let subscription = new Subscription(group_alias, this.request.getMessageTypes());\n        let _this = this;\n        this.post({\n            type: 'subscribe', path_list: path_list,\n            group_alias: group_alias, frq_divider: frq_divider\n        }).then(msg => {\n            // add subscription to the active sub. list and call subscription complete routine\n            _this.subscriptions[group_alias] = subscription;\n            subscription._complete(msg, path_list);\n        }).catch(e => {\n            // if subscription failed, call failed routine\n            subscription._failed(e);\n        });\n\n        return subscription;\n    }\n\n    /**\n     * Unsubscribes from the group.\n     * @param {string} group_alias Name of the group to unsubscribe from.\n     * @return {Promise<StatusMsg>} Returns a Promise, which resolves when the unsubscribe operation is complete,\n     * fails otherwise.\n     * @see motorcortex.proto, StatusMsg, StatusCode\n     * @example\n     * let unsub_handle = req.unsubscribe('myGroup1');\n     * unsub_handle.catch( function(unsubscribe) {\n     *      console.log('Failed to remove group: ' + motorcortex.statusToStr(unsubscribe.status));\n     * });\n     */\n    unsubscribe(group_alias) {\n        if (this.subscriptions[group_alias]) {\n            delete this.subscriptions[group_alias];\n        }\n        return this.post({type: 'unsubscribe', group_alias: group_alias});\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/subscribe_async.js","/*\n * Developer : Alexey Zakharov (alexey.zakharov@vectioneer.com)\n * All rights reserved. Copyright (c) 2015 - 2018 VECTIONEER.\n */\n\n'use strict';\nimport {MessageTypes} from '../message_types';\nimport {Request} from '../request';\nimport {ConnectionState} from '../utils';\n\nlet motorcortex_types = new MessageTypes();\nlet req = new Request(motorcortex_types);\n\nreq.connectionClosed = function () {\n    postMessage({id: -1, reply: {type: 'connection_closed'}});\n}\n\nlet request_channel = null;\n\nexport default function () {\n\n    function processRequest(e) {\n        let data = e.data;\n        let id = data.id;\n        let request = data.request;\n        let reply = null;\n\n        switch (request.type) {\n            case 'registerSubscribe':\n                request_channel = e.ports[0];\n                request_channel.onmessage = onSubscribeMessage;\n                reply = new Promise(function (resolve, reject) {\n                    resolve();\n                });\n                break;\n            case 'loadProto':\n                if (!motorcortex_types.loadedFiles()) {\n                    reply = motorcortex_types.load(request.files);\n                } else {\n                    reply = new Promise(function (resolve, reject) {\n                        resolve();\n                    });\n                }\n                break;\n            case 'connect':\n                reply = req.connect(request.url, request.timeout_ms, request.max_request_queue_size);\n                break;\n            case 'close':\n                reply = new Promise(function (resolve, reject) {\n                    reply = req.close();\n                    resolve();\n                });\n                break;\n            case 'getSessionTokenMsg':\n                reply = req.getSessionTokenMsg();\n                break;\n            case 'restoreSessionMsg':\n                reply = req.restoreSessionMsg(request.token);\n                break;\n            case 'login':\n                reply = req.login(request.login, request.password);\n                break;\n            case 'logout':\n                reply = req.logout();\n                break;\n            case 'getParameterTree':\n                reply = new Promise(function (resolve, reject) {\n                    req.getParameterTree(request.timeout_msec).then(e => {\n                        resolve(e.getTree());\n                    }).catch(e => {\n                        reject(e);\n                    })\n                });\n                break;\n            case 'getParameterTreeHash':\n                reply = req.getParameterTreeHash();\n                break;\n            case 'getParameterList':\n                reply = req.getParameterList(request.path_list, request.timeout_ms);\n                break;\n            case 'getParameter':\n                reply = req.getParameter(request.path);\n                break;\n            case 'setParameter':\n                reply = req.setParameter(request.path, request.value, request.options);\n                break;\n            case 'overwriteParameter':\n                reply = req.overwriteParameter(request.path, request.value,\n                    request.force_activate, request.options);\n                break;\n            case 'releaseParameter':\n                reply = req.releaseParameter(request.path);\n                break;\n            case 'setParameterList':\n                reply = req.setParameterList(request.param_list);\n                break;\n            case 'getParameterList':\n                reply = req.getParameterList(request.path_list, request.timeout_ms);\n                break;\n            case 'createGroup':\n                reply = req.createGroup(request.path_list, request.group_alias, request.frq_divider);\n                break;\n            case 'removeGroup':\n                reply = req.removeGroup(request.group_alias);\n                break;\n            case 'save':\n                reply = req.save(request.file_name);\n                break;\n            case 'load':\n                reply = req.load(request.file_name);\n                break;\n            default:\n                reply = new Promise(function (resolve, reject) {\n                    reject('Unknown request type:' + request.type);\n                });\n        }\n        return [reply, id];\n    }\n\n    function onMessage(e) {\n        let [reply, id] = processRequest(e);\n        reply.then(e => {\n            postMessage({id: id, reply: {type: 'success', result: e}});\n        }).catch(e => {\n            postMessage({id: id, reply: {type: 'error', result: e}});\n        });\n    }\n\n    function onSubscribeMessage(e) {\n        let [reply, id] = processRequest(e);\n        reply.then(e => {\n            request_channel.postMessage({id: id, reply: {type: 'success', result: e}});\n        }).catch(e => {\n            request_channel.postMessage({id: id, reply: {type: 'error', result: e}});\n        });\n    }\n\n    // Respond to message from parent thread\n    addEventListener('message', onMessage)\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/workers/request.worker.js","/*\n * Developer : Alexey Zakharov (alexey.zakharov@vectioneer.com)\n * All rights reserved. Copyright (c) 2015 - 2018 VECTIONEER.\n */\n\n'use strict';\nimport {MessageTypes} from '../message_types';\nimport {Subscribe} from '../subscribe';\nimport {Deferred} from '../utils'\n\nclass RPCRequest {\n    constructor(protobuf_types) {\n        this.protobuf_types = protobuf_types;\n        this.request_channel = null;\n        this.request_id = 0;\n        this.request_queue = {};\n    }\n\n    post(request) {\n        let reply = new Deferred();\n        if (this.request_channel) {\n            this.request_queue[this.request_id] = reply;\n            this.request_channel.postMessage({\n                id: this.request_id++,\n                request: request\n            });\n        } else {\n            reply.reject('SubscribeAsync request channel is not ready');\n        }\n\n        return reply.promise;\n    }\n\n    getMessageTypes() {\n        return this.protobuf_types;\n    }\n\n    setPort(port) {\n        this.request_channel = port;\n        this.request_channel.onmessage = this.onRequestMessage.bind(this);\n    }\n\n    onRequestMessage(e) {\n        let data = e.data;\n        let id = data.id;\n        let reply = data.reply;\n\n        if (id >= 0) {\n            if (reply.type == 'success') {\n                this.request_queue[id].resolve(reply.result);\n            } else {\n                this.request_queue[id].reject(reply.result);\n            }\n\n            delete this.request_queue[id];\n        }\n    }\n\n    createGroup(path_list, group_alias, frq_divider) {\n        return this.post({\n            type: 'createGroup',\n            path_list: path_list,\n            group_alias: group_alias,\n            frq_divider: frq_divider\n        });\n    }\n\n    removeGroup(group_alias) {\n        return this.post({\n            type: 'removeGroup',\n            group_alias: group_alias\n        });\n    }\n}\n\nlet motorcortex_types = new MessageTypes();\nlet rpc_request = new RPCRequest(motorcortex_types);\nlet sub = new Subscribe(rpc_request);\nlet subsriptions = {};\n\nfunction post(id, arg) {\n    postMessage({id: id, reply: arg});\n}\n\nsub.connectionClosed = function () {\n    postMessage({id: -1, reply: {type: 'connection_closed'}});\n}\n\n\nfunction notify() {\n    for (let key in subsriptions) {\n        let sb = subsriptions[key]\n        if (sb.length > 0) {\n            post(-2, {id: key, data: sb});\n            sb.length = 0;\n        }\n    }\n}\nlet notify_timer = setInterval(notify, 1000 / 60.0);\n\nexport default function () {\n\n    function processMessage(e) {\n        let data = e.data;\n        let id = data.id;\n        let request = data.request;\n\n        let reply = null;\n        switch (request.type) {\n            case 'registerRequest':\n                rpc_request.setPort(e.ports[0]);\n                reply = new Promise(function (resolve, reject) {\n                    resolve();\n                });\n                break;\n            case 'loadProto':\n                if (!motorcortex_types.loadedFiles()) {\n                    reply = motorcortex_types.load(request.files);\n                } else {\n                    reply = new Promise(function (resolve, reject) {\n                        resolve();\n                    });\n                }\n                break;\n            case 'connect':\n                reply = sub.connect(request.url);\n                break;\n            case 'close':\n                reply = new Promise(function (resolve, reject) {\n                    reply = sub.close();\n                    resolve();\n                });\n                break;\n            case 'subscribe':\n                let d = new Deferred()\n                reply = d.promise;\n                let subscription = sub.subscribe(request.path_list, request.group_alias, request.frq_divider);\n                subscription.then(e => {\n                    d.resolve(e);\n                    subsriptions[request.group_alias] = [];\n                    let input_buffer = subsriptions[request.group_alias];\n                    subscription.notify(data => {\n                        input_buffer.push(data);\n                    })\n                }).catch(e => {\n                    d.reject(e);\n                });\n                break;\n            case 'unsubscribe':\n                if (subsriptions[request.group_alias]) {\n                    delete subsriptions[request.group_alias];\n                }\n                reply = sub.unsubscribe(request.group_alias);\n                break;\n            default:\n                reply = new Promise(function (resolve, reject) {\n                    reject('Unknown request type:' + request.type);\n                });\n        }\n\n        return [id, reply];\n    }\n\n    function onMessage(e) {\n        let [id, reply] = processMessage(e);\n\n        reply.then(e => {\n            post(id, {type: 'success', result: e});\n        }).catch(e => {\n            post(id, {type: 'error', result: e});\n        });\n    }\n\n    // Respond to message from parent thread\n    addEventListener('message', onMessage)\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/workers/subscribe.worker.js","// full library entry point.\r\n\r\n\"use strict\";\r\nmodule.exports = require(\"./src/index\");\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/index.js\n// module id = 47\n// module chunks = 0","\"use strict\";\r\nmodule.exports = common;\r\n\r\nvar commonRe = /\\/|\\./;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {INamespace} google/protobuf/any.proto Any\r\n * @property {INamespace} google/protobuf/duration.proto Duration\r\n * @property {INamespace} google/protobuf/empty.proto Empty\r\n * @property {INamespace} google/protobuf/field_mask.proto FieldMask\r\n * @property {INamespace} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {INamespace} google/protobuf/timestamp.proto Timestamp\r\n * @property {INamespace} google/protobuf/wrappers.proto Wrappers\r\n * @example\r\n * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)\r\n * protobuf.common(\"descriptor\", descriptorJson);\r\n *\r\n * // manually provides a custom definition (uses my.foo namespace)\r\n * protobuf.common(\"my/foo/bar.proto\", myFooBarJson);\r\n */\r\nfunction common(name, json) {\r\n    if (!commonRe.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n//\r\n// google/protobuf/descriptor.proto\r\n// google/protobuf/source_context.proto\r\n// google/protobuf/type.proto\r\n//\r\n// Stripped and pre-parsed versions of these non-bundled files are instead available as part of\r\n// the repository or package within the google/protobuf directory.\r\n\r\ncommon(\"any\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Any message.\r\n     * @interface IAny\r\n     * @type {Object}\r\n     * @property {string} [typeUrl]\r\n     * @property {Uint8Array} [bytes]\r\n     * @memberof common\r\n     */\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Duration message.\r\n     * @interface IDuration\r\n     * @type {Object}\r\n     * @property {number|Long} [seconds]\r\n     * @property {number} [nanos]\r\n     * @memberof common\r\n     */\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Timestamp message.\r\n     * @interface ITimestamp\r\n     * @type {Object}\r\n     * @property {number|Long} [seconds]\r\n     * @property {number} [nanos]\r\n     * @memberof common\r\n     */\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Empty message.\r\n     * @interface IEmpty\r\n     * @memberof common\r\n     */\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Struct message.\r\n     * @interface IStruct\r\n     * @type {Object}\r\n     * @property {Object.<string,IValue>} [fields]\r\n     * @memberof common\r\n     */\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Value message.\r\n     * @interface IValue\r\n     * @type {Object}\r\n     * @property {string} [kind]\r\n     * @property {0} [nullValue]\r\n     * @property {number} [numberValue]\r\n     * @property {string} [stringValue]\r\n     * @property {boolean} [boolValue]\r\n     * @property {IStruct} [structValue]\r\n     * @property {IListValue} [listValue]\r\n     * @memberof common\r\n     */\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [\r\n                    \"nullValue\",\r\n                    \"numberValue\",\r\n                    \"stringValue\",\r\n                    \"boolValue\",\r\n                    \"structValue\",\r\n                    \"listValue\"\r\n                ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.ListValue message.\r\n     * @interface IListValue\r\n     * @type {Object}\r\n     * @property {Array.<IValue>} [values]\r\n     * @memberof common\r\n     */\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"wrappers\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.DoubleValue message.\r\n     * @interface IDoubleValue\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    DoubleValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"double\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.FloatValue message.\r\n     * @interface IFloatValue\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    FloatValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"float\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Int64Value message.\r\n     * @interface IInt64Value\r\n     * @type {Object}\r\n     * @property {number|Long} [value]\r\n     * @memberof common\r\n     */\r\n    Int64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.UInt64Value message.\r\n     * @interface IUInt64Value\r\n     * @type {Object}\r\n     * @property {number|Long} [value]\r\n     * @memberof common\r\n     */\r\n    UInt64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Int32Value message.\r\n     * @interface IInt32Value\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    Int32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.UInt32Value message.\r\n     * @interface IUInt32Value\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    UInt32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.BoolValue message.\r\n     * @interface IBoolValue\r\n     * @type {Object}\r\n     * @property {boolean} [value]\r\n     * @memberof common\r\n     */\r\n    BoolValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bool\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.StringValue message.\r\n     * @interface IStringValue\r\n     * @type {Object}\r\n     * @property {string} [value]\r\n     * @memberof common\r\n     */\r\n    StringValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"string\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.BytesValue message.\r\n     * @interface IBytesValue\r\n     * @type {Object}\r\n     * @property {Uint8Array} [value]\r\n     * @memberof common\r\n     */\r\n    BytesValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"field_mask\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.FieldMask message.\r\n     * @interface IDoubleValue\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    FieldMask: {\r\n        fields: {\r\n            paths: {\r\n                rule: \"repeated\",\r\n                type: \"string\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Gets the root definition of the specified common proto file.\r\n *\r\n * Bundled definitions are:\r\n * - google/protobuf/any.proto\r\n * - google/protobuf/duration.proto\r\n * - google/protobuf/empty.proto\r\n * - google/protobuf/field_mask.proto\r\n * - google/protobuf/struct.proto\r\n * - google/protobuf/timestamp.proto\r\n * - google/protobuf/wrappers.proto\r\n *\r\n * @param {string} file Proto file name\r\n * @returns {INamespace|null} Root definition or `null` if not defined\r\n */\r\ncommon.get = function get(file) {\r\n    return common[file] || null;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/common.js\n// module id = 48\n// module chunks = 0","\"use strict\";\r\nvar protobuf = module.exports = require(\"./index-minimal\");\r\n\r\nprotobuf.build = \"light\";\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Serialization\r\nprotobuf.encoder          = require(\"./encoder\");\r\nprotobuf.decoder          = require(\"./decoder\");\r\nprotobuf.verifier         = require(\"./verifier\");\r\nprotobuf.converter        = require(\"./converter\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Message          = require(\"./message\");\r\nprotobuf.wrappers         = require(\"./wrappers\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.util             = require(\"./util\");\r\n\r\n// Configure reflection\r\nprotobuf.ReflectionObject._configure(protobuf.Root);\r\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service);\r\nprotobuf.Root._configure(protobuf.Type);\r\nprotobuf.Field._configure(protobuf.Type);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/index-light.js\n// module id = 49\n// module chunks = 0","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(\"./writer\");\r\nprotobuf.BufferWriter = require(\"./writer_buffer\");\r\nprotobuf.Reader       = require(\"./reader\");\r\nprotobuf.BufferReader = require(\"./reader_buffer\");\r\n\r\n// Utility\r\nprotobuf.util         = require(\"./util/minimal\");\r\nprotobuf.rpc          = require(\"./rpc\");\r\nprotobuf.roots        = require(\"./roots\");\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Configure serialization\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/index-minimal.js\n// module id = 50\n// module chunks = 0","\"use strict\";\r\nvar protobuf = module.exports = require(\"./index-light\");\r\n\r\nprotobuf.build = \"full\";\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(\"./tokenize\");\r\nprotobuf.parse            = require(\"./parse\");\r\nprotobuf.common           = require(\"./common\");\r\n\r\n// Configure parser\r\nprotobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/index.js\n// module id = 51\n// module chunks = 0","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nparse.filename = null;\r\nparse.defaults = { keepCase: false };\r\n\r\nvar tokenize  = require(\"./tokenize\"),\r\n    Root      = require(\"./root\"),\r\n    Type      = require(\"./type\"),\r\n    Field     = require(\"./field\"),\r\n    MapField  = require(\"./mapfield\"),\r\n    OneOf     = require(\"./oneof\"),\r\n    Enum      = require(\"./enum\"),\r\n    Service   = require(\"./service\"),\r\n    Method    = require(\"./method\"),\r\n    types     = require(\"./types\"),\r\n    util      = require(\"./util\");\r\n\r\nvar base10Re    = /^[1-9][0-9]*$/,\r\n    base10NegRe = /^-?[1-9][0-9]*$/,\r\n    base16Re    = /^0[x][0-9a-fA-F]+$/,\r\n    base16NegRe = /^-?0[x][0-9a-fA-F]+$/,\r\n    base8Re     = /^0[0-7]+$/,\r\n    base8NegRe  = /^-?0[0-7]+$/,\r\n    numberRe    = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,\r\n    nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\r\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,\r\n    fqTypeRefRe = /^(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @interface IParserResult\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of {@link parse}.\r\n * @interface IParseOptions\r\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\r\n * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of JSON serialization.\r\n * @interface IToJSONOptions\r\n * @property {boolean} [keepComments=false] Serializes comments.\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @param {string} source Source contents\r\n * @param {Root} root Root to populate\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {IParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {IParseOptions} defaults Default {@link IParseOptions}\r\n */\r\nfunction parse(source, root, options) {\r\n    /* eslint-disable callback-return */\r\n    if (!(root instanceof Root)) {\r\n        options = root;\r\n        root = new Root();\r\n    }\r\n    if (!options)\r\n        options = parse.defaults;\r\n\r\n    var tn = tokenize(source, options.alternateCommentMode || false),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip,\r\n        cmnt = tn.cmnt;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    var ptr = root;\r\n\r\n    var applyCase = options.keepCase ? function(name) { return name; } : util.camelCase;\r\n\r\n    /* istanbul ignore next */\r\n    function illegal(token, name, insideTryCatch) {\r\n        var filename = parse.filename;\r\n        if (!insideTryCatch)\r\n            parse.filename = null;\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line + \")\");\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            /* istanbul ignore if */\r\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\r\n                throw illegal(token);\r\n\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === \"\\\"\" || token === \"'\");\r\n        return values.join(\"\");\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (token) {\r\n            case \"'\":\r\n            case \"\\\"\":\r\n                push(token);\r\n                return readString();\r\n            case \"true\": case \"TRUE\":\r\n                return true;\r\n            case \"false\": case \"FALSE\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token, /* insideTryCatch */ true);\r\n        } catch (e) {\r\n\r\n            /* istanbul ignore else */\r\n            if (acceptTypeRef && typeRefRe.test(token))\r\n                return token;\r\n\r\n            /* istanbul ignore next */\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRanges(target, acceptStrings) {\r\n        var token, start;\r\n        do {\r\n            if (acceptStrings && ((token = peek()) === \"\\\"\" || token === \"'\"))\r\n                target.push(readString());\r\n            else\r\n                target.push([ start = parseId(next()), skip(\"to\", true) ? parseId(next()) : start ]);\r\n        } while (skip(\",\", true));\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseNumber(token, insideTryCatch) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === \"-\") {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        switch (token) {\r\n            case \"inf\": case \"INF\": case \"Inf\":\r\n                return sign * Infinity;\r\n            case \"nan\": case \"NAN\": case \"Nan\": case \"NaN\":\r\n                return NaN;\r\n            case \"0\":\r\n                return 0;\r\n        }\r\n        if (base10Re.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (base16Re.test(token))\r\n            return sign * parseInt(token, 16);\r\n        if (base8Re.test(token))\r\n            return sign * parseInt(token, 8);\r\n\r\n        /* istanbul ignore else */\r\n        if (numberRe.test(token))\r\n            return sign * parseFloat(token);\r\n\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"number\", insideTryCatch);\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        switch (token) {\r\n            case \"max\": case \"MAX\": case \"Max\":\r\n                return 536870911;\r\n            case \"0\":\r\n                return 0;\r\n        }\r\n\r\n        /* istanbul ignore if */\r\n        if (!acceptNegative && token.charAt(0) === \"-\")\r\n            throw illegal(token, \"id\");\r\n\r\n        if (base10NegRe.test(token))\r\n            return parseInt(token, 10);\r\n        if (base16NegRe.test(token))\r\n            return parseInt(token, 16);\r\n\r\n        /* istanbul ignore else */\r\n        if (base8NegRe.test(token))\r\n            return parseInt(token, 8);\r\n\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n\r\n        /* istanbul ignore if */\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n\r\n        pkg = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(pkg))\r\n            throw illegal(pkg, \"name\");\r\n\r\n        ptr = ptr.define(pkg);\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(\";\");\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = readString();\r\n        isProto3 = syntax === \"proto3\";\r\n\r\n        /* istanbul ignore if */\r\n        if (!isProto3 && syntax !== \"proto2\")\r\n            throw illegal(syntax, \"syntax\");\r\n\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case \"option\":\r\n                parseOption(parent, token);\r\n                skip(\";\");\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function ifBlock(obj, fnIf, fnElse) {\r\n        var trailingLine = tn.line;\r\n        if (obj) {\r\n            obj.comment = cmnt(); // try block-type comment\r\n            obj.filename = parse.filename;\r\n        }\r\n        if (skip(\"{\", true)) {\r\n            var token;\r\n            while ((token = next()) !== \"}\")\r\n                fnIf(token);\r\n            skip(\";\", true);\r\n        } else {\r\n            if (fnElse)\r\n                fnElse();\r\n            skip(\";\");\r\n            if (obj && typeof obj.comment !== \"string\")\r\n                obj.comment = cmnt(trailingLine); // try line-type comment if no block\r\n        }\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"type name\");\r\n\r\n        var type = new Type(token);\r\n        ifBlock(type, function parseType_block(token) {\r\n            if (parseCommon(type, token))\r\n                return;\r\n\r\n            switch (token) {\r\n\r\n                case \"map\":\r\n                    parseMapField(type, token);\r\n                    break;\r\n\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                case \"oneof\":\r\n                    parseOneOf(type, token);\r\n                    break;\r\n\r\n                case \"extensions\":\r\n                    readRanges(type.extensions || (type.extensions = []));\r\n                    break;\r\n\r\n                case \"reserved\":\r\n                    readRanges(type.reserved || (type.reserved = []), true);\r\n                    break;\r\n\r\n                default:\r\n                    /* istanbul ignore if */\r\n                    if (!isProto3 || !typeRefRe.test(token))\r\n                        throw illegal(token);\r\n\r\n                    push(token);\r\n                    parseField(type, \"optional\");\r\n                    break;\r\n            }\r\n        });\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (type === \"group\") {\r\n            parseGroup(parent, rule);\r\n            return;\r\n        }\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(type))\r\n            throw illegal(type, \"type\");\r\n\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n\r\n        var field = new Field(name, parseId(next()), type, rule, extend);\r\n        ifBlock(field, function parseField_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(field, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseField_line() {\r\n            parseInlineOptions(field);\r\n        });\r\n        parent.add(field);\r\n\r\n        // JSON defaults to packed=true if not set so we have to set packed=false explicity when\r\n        // parsing proto2 descriptors without the option, where applicable. This must be done for\r\n        // all known packable types and anything that could be an enum (= is not a basic type).\r\n        if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined))\r\n            field.setOption(\"packed\", false, /* ifNotSet */ true);\r\n    }\r\n\r\n    function parseGroup(parent, rule) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        var fieldName = util.lcFirst(name);\r\n        if (name === fieldName)\r\n            name = util.ucFirst(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var type = new Type(name);\r\n        type.group = true;\r\n        var field = new Field(fieldName, id, name, rule);\r\n        field.filename = parse.filename;\r\n        ifBlock(type, function parseGroup_block(token) {\r\n            switch (token) {\r\n\r\n                case \"option\":\r\n                    parseOption(type, token);\r\n                    skip(\";\");\r\n                    break;\r\n\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                /* istanbul ignore next */\r\n                default:\r\n                    throw illegal(token); // there are no groups with proto3 semantics\r\n            }\r\n        });\r\n        parent.add(type)\r\n              .add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, \"type\");\r\n\r\n        skip(\",\");\r\n        var valueType = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(valueType))\r\n            throw illegal(valueType, \"type\");\r\n\r\n        skip(\">\");\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        skip(\"=\");\r\n        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);\r\n        ifBlock(field, function parseMapField_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(field, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseMapField_line() {\r\n            parseInlineOptions(field);\r\n        });\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var oneof = new OneOf(applyCase(token));\r\n        ifBlock(oneof, function parseOneOf_block(token) {\r\n            if (token === \"option\") {\r\n                parseOption(oneof, token);\r\n                skip(\";\");\r\n            } else {\r\n                push(token);\r\n                parseField(oneof, \"optional\");\r\n            }\r\n        });\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var enm = new Enum(token);\r\n        ifBlock(enm, function parseEnum_block(token) {\r\n          switch(token) {\r\n            case \"option\":\r\n              parseOption(enm, token);\r\n              skip(\";\");\r\n              break;\r\n\r\n            case \"reserved\":\r\n              readRanges(enm.reserved || (enm.reserved = []), true);\r\n              break;\r\n\r\n            default:\r\n              parseEnumValue(enm, token);\r\n          }\r\n        });\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumValue(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"name\");\r\n\r\n        skip(\"=\");\r\n        var value = parseId(next(), true),\r\n            dummy = {};\r\n        ifBlock(dummy, function parseEnumValue_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(dummy, token); // skip\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseEnumValue_line() {\r\n            parseInlineOptions(dummy); // skip\r\n        });\r\n        parent.add(token, value, dummy.comment);\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var isCustom = skip(\"(\", true);\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token;\r\n        if (isCustom) {\r\n            skip(\")\");\r\n            name = \"(\" + name + \")\";\r\n            token = peek();\r\n            if (fqTypeRefRe.test(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(\"{\", true)) { // { a: \"foo\" b { c: \"bar\" } }\r\n            do {\r\n                /* istanbul ignore if */\r\n                if (!nameRe.test(token = next()))\r\n                    throw illegal(token, \"name\");\r\n\r\n                if (peek() === \"{\")\r\n                    parseOptionValue(parent, name + \".\" + token);\r\n                else {\r\n                    skip(\":\");\r\n                    if (peek() === \"{\")\r\n                        parseOptionValue(parent, name + \".\" + token);\r\n                    else\r\n                        setOption(parent, name + \".\" + token, readValue(true));\r\n                }\r\n            } while (!skip(\"}\", true));\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, \"option\");\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"service name\");\r\n\r\n        var service = new Service(token);\r\n        ifBlock(service, function parseService_block(token) {\r\n            if (parseCommon(service, token))\r\n                return;\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"rpc\")\r\n                parseMethod(service, token);\r\n            else\r\n                throw illegal(token);\r\n        });\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token,\r\n            requestType, requestStream,\r\n            responseType, responseStream;\r\n\r\n        skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            requestStream = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n\r\n        requestType = token;\r\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            responseStream = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n\r\n        responseType = token;\r\n        skip(\")\");\r\n\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        ifBlock(method, function parseMethod_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(method, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        });\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token, \"reference\");\r\n\r\n        var reference = token;\r\n        ifBlock(null, function parseExtension_block(token) {\r\n            switch (token) {\r\n\r\n                case \"required\":\r\n                case \"repeated\":\r\n                case \"optional\":\r\n                    parseField(parent, token, reference);\r\n                    break;\r\n\r\n                default:\r\n                    /* istanbul ignore if */\r\n                    if (!isProto3 || !typeRefRe.test(token))\r\n                        throw illegal(token);\r\n                    push(token);\r\n                    parseField(parent, \"optional\", reference);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        switch (token) {\r\n\r\n            case \"package\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseSyntax();\r\n                break;\r\n\r\n            case \"option\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseOption(ptr, token);\r\n                skip(\";\");\r\n                break;\r\n\r\n            default:\r\n\r\n                /* istanbul ignore else */\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n\r\n                /* istanbul ignore next */\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    parse.filename = null;\r\n    return {\r\n        \"package\"     : pkg,\r\n        \"imports\"     : imports,\r\n         weakImports  : weakImports,\r\n         syntax       : syntax,\r\n         root         : root\r\n    };\r\n}\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @name parse\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {IParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {IParseOptions} defaults Default {@link IParseOptions}\r\n * @variation 2\r\n */\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/parse.js\n// module id = 52\n// module chunks = 0","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(\"./reader\");\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/reader_buffer.js\n// module id = 53\n// module chunks = 0","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {TRes} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {RPCImpl|null}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\r\n * @param {Constructor<TReq>} requestCtor Request constructor\r\n * @param {Constructor<TRes>} responseCtor Response constructor\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\r\n * @returns {undefined}\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/rpc/service.js\n// module id = 54\n// module chunks = 0","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/util/longbits.js\n// module id = 55\n// module chunks = 0","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(\"./writer\");\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protobufjs/src/writer_buffer.js\n// module id = 56\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 57\n// module chunks = 0","module.exports = {\"name\":\"motorcortex-js\",\"version\":\"0.12.1\",\"description\":\"Motorcortex Bindings for JavaScript\",\"author\":\"Alexey Zakharov <alexey@vectioneer.com>\",\"license\":\"Copyright (C) Vectioneer - All Rights Reserved\",\"private\":true,\"main\":\"dist/motorcortex.js\",\"scripts\":{\"build\":\"webpack --config config/webpack.config.js --progress --profile --colors --verbose\",\"dev\":\"webpack-dev-server --config config/webpack.config.js --progress --colors --port 2992 --inline\",\"docs\":\"./node_modules/.bin/jsdoc --configure jsdoc.json --verbose readme.md\",\"docsMD\":\"./node_modules/.bin/jsdoc2md src/*.js > ./doc/motorcortex_api.md\",\"test\":\"karma start --single-run --browsers ChromeHeadless karma.conf.js\"},\"dependencies\":{\"protobufjs\":\"^6.8.4\"},\"devDependencies\":{\"webworkify-webpack\":\"^2.1.2\",\"babel-core\":\"^6.26.0\",\"babel-loader\":\"^7.0.0\",\"babel-preset-env\":\"^1.6.1\",\"babel-preset-es2015\":\"^6.24.1\",\"babel-register\":\"^6.26.0\",\"babelify\":\"^8.0.0\",\"browserify\":\"^16.1.0\",\"chai\":\"^4.1.2\",\"jsdoc\":\"^3.5.5\",\"jsdoc-to-markdown\":\"^4.0.1\",\"karma\":\"^2.0.0\",\"karma-babel-preprocessor\":\"^7.0.0\",\"karma-browserify\":\"^5.2.0\",\"karma-chai\":\"^0.1.0\",\"karma-chrome-launcher\":\"^2.2.0\",\"karma-mocha\":\"^1.3.0\",\"long\":\"^3.2.0\",\"minami\":\"^1.2.3\",\"mocha\":\"^5.0.1\",\"uglify-js\":\"^2.8.0\",\"uglifyjs-webpack-plugin\":\"^0.4.3\",\"watchify\":\"^3.10.0\",\"webpack\":\"^2.6.1\",\"webpack-dev-server\":\"^2.11.1\",\"copy-webpack-plugin\":\"^4.5.1\"},\"engines\":{\"node\":\">= 7.0.0\",\"npm\":\">= 5.0.0\"},\"babel\":{\"presets\":[\"env\"]}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./package.json\n// module id = 58\n// module chunks = 0"],"sourceRoot":""}